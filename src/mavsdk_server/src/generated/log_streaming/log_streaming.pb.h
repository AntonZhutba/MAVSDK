// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_streaming/log_streaming.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_5fstreaming_2flog_5fstreaming_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_5fstreaming_2flog_5fstreaming_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_5fstreaming_2flog_5fstreaming_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5fstreaming_2flog_5fstreaming_2eproto;
namespace mavsdk {
namespace rpc {
namespace log_streaming {
class LogStreamingRaw;
struct LogStreamingRawDefaultTypeInternal;
extern LogStreamingRawDefaultTypeInternal _LogStreamingRaw_default_instance_;
class LogStreamingRawResponse;
struct LogStreamingRawResponseDefaultTypeInternal;
extern LogStreamingRawResponseDefaultTypeInternal _LogStreamingRawResponse_default_instance_;
class LogStreamingResult;
struct LogStreamingResultDefaultTypeInternal;
extern LogStreamingResultDefaultTypeInternal _LogStreamingResult_default_instance_;
class StartLogStreamingRequest;
struct StartLogStreamingRequestDefaultTypeInternal;
extern StartLogStreamingRequestDefaultTypeInternal _StartLogStreamingRequest_default_instance_;
class StartLogStreamingResponse;
struct StartLogStreamingResponseDefaultTypeInternal;
extern StartLogStreamingResponseDefaultTypeInternal _StartLogStreamingResponse_default_instance_;
class StopLogStreamingRequest;
struct StopLogStreamingRequestDefaultTypeInternal;
extern StopLogStreamingRequestDefaultTypeInternal _StopLogStreamingRequest_default_instance_;
class StopLogStreamingResponse;
struct StopLogStreamingResponseDefaultTypeInternal;
extern StopLogStreamingResponseDefaultTypeInternal _StopLogStreamingResponse_default_instance_;
class SubscribeLogStreamingRawRequest;
struct SubscribeLogStreamingRawRequestDefaultTypeInternal;
extern SubscribeLogStreamingRawRequestDefaultTypeInternal _SubscribeLogStreamingRawRequest_default_instance_;
}  // namespace log_streaming
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::log_streaming::LogStreamingRaw* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingRaw>(Arena*);
template<> ::mavsdk::rpc::log_streaming::LogStreamingRawResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingRawResponse>(Arena*);
template<> ::mavsdk::rpc::log_streaming::LogStreamingResult* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingResult>(Arena*);
template<> ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::StartLogStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::StartLogStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::StopLogStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::StopLogStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace log_streaming {

enum LogStreamingResult_Result : int {
  LogStreamingResult_Result_RESULT_SUCCESS = 0,
  LogStreamingResult_Result_RESULT_NO_SYSTEM = 1,
  LogStreamingResult_Result_RESULT_CONNECTION_ERROR = 2,
  LogStreamingResult_Result_RESULT_BUSY = 3,
  LogStreamingResult_Result_RESULT_COMMAND_DENIED = 4,
  LogStreamingResult_Result_RESULT_TIMEOUT = 5,
  LogStreamingResult_Result_RESULT_UNSUPPORTED = 6,
  LogStreamingResult_Result_RESULT_UNKNOWN = 7,
  LogStreamingResult_Result_LogStreamingResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogStreamingResult_Result_LogStreamingResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogStreamingResult_Result_IsValid(int value);
constexpr LogStreamingResult_Result LogStreamingResult_Result_Result_MIN = LogStreamingResult_Result_RESULT_SUCCESS;
constexpr LogStreamingResult_Result LogStreamingResult_Result_Result_MAX = LogStreamingResult_Result_RESULT_UNKNOWN;
constexpr int LogStreamingResult_Result_Result_ARRAYSIZE = LogStreamingResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogStreamingResult_Result_descriptor();
template<typename T>
inline const std::string& LogStreamingResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogStreamingResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogStreamingResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogStreamingResult_Result_descriptor(), enum_t_value);
}
inline bool LogStreamingResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogStreamingResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogStreamingResult_Result>(
    LogStreamingResult_Result_descriptor(), name, value);
}
// ===================================================================

class StartLogStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.StartLogStreamingRequest) */ {
 public:
  inline StartLogStreamingRequest() : StartLogStreamingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartLogStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLogStreamingRequest(const StartLogStreamingRequest& from);
  StartLogStreamingRequest(StartLogStreamingRequest&& from) noexcept
    : StartLogStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StartLogStreamingRequest& operator=(const StartLogStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLogStreamingRequest& operator=(StartLogStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartLogStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLogStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StartLogStreamingRequest*>(
               &_StartLogStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartLogStreamingRequest& a, StartLogStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLogStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLogStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartLogStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartLogStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartLogStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartLogStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.StartLogStreamingRequest";
  }
  protected:
  explicit StartLogStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.StartLogStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StartLogStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.StartLogStreamingResponse) */ {
 public:
  inline StartLogStreamingResponse() : StartLogStreamingResponse(nullptr) {}
  ~StartLogStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StartLogStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLogStreamingResponse(const StartLogStreamingResponse& from);
  StartLogStreamingResponse(StartLogStreamingResponse&& from) noexcept
    : StartLogStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StartLogStreamingResponse& operator=(const StartLogStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLogStreamingResponse& operator=(StartLogStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartLogStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLogStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StartLogStreamingResponse*>(
               &_StartLogStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartLogStreamingResponse& a, StartLogStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLogStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLogStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartLogStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartLogStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartLogStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartLogStreamingResponse& from) {
    StartLogStreamingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartLogStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.StartLogStreamingResponse";
  }
  protected:
  explicit StartLogStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogStreamingResultFieldNumber = 1,
  };
  // .mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
  bool has_log_streaming_result() const;
  private:
  bool _internal_has_log_streaming_result() const;
  public:
  void clear_log_streaming_result();
  const ::mavsdk::rpc::log_streaming::LogStreamingResult& log_streaming_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::log_streaming::LogStreamingResult* release_log_streaming_result();
  ::mavsdk::rpc::log_streaming::LogStreamingResult* mutable_log_streaming_result();
  void set_allocated_log_streaming_result(::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result);
  private:
  const ::mavsdk::rpc::log_streaming::LogStreamingResult& _internal_log_streaming_result() const;
  ::mavsdk::rpc::log_streaming::LogStreamingResult* _internal_mutable_log_streaming_result();
  public:
  void unsafe_arena_set_allocated_log_streaming_result(
      ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result);
  ::mavsdk::rpc::log_streaming::LogStreamingResult* unsafe_arena_release_log_streaming_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.StartLogStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StopLogStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.StopLogStreamingRequest) */ {
 public:
  inline StopLogStreamingRequest() : StopLogStreamingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopLogStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopLogStreamingRequest(const StopLogStreamingRequest& from);
  StopLogStreamingRequest(StopLogStreamingRequest&& from) noexcept
    : StopLogStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StopLogStreamingRequest& operator=(const StopLogStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopLogStreamingRequest& operator=(StopLogStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopLogStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopLogStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StopLogStreamingRequest*>(
               &_StopLogStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopLogStreamingRequest& a, StopLogStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopLogStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopLogStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopLogStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopLogStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopLogStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopLogStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.StopLogStreamingRequest";
  }
  protected:
  explicit StopLogStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.StopLogStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StopLogStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.StopLogStreamingResponse) */ {
 public:
  inline StopLogStreamingResponse() : StopLogStreamingResponse(nullptr) {}
  ~StopLogStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StopLogStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopLogStreamingResponse(const StopLogStreamingResponse& from);
  StopLogStreamingResponse(StopLogStreamingResponse&& from) noexcept
    : StopLogStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StopLogStreamingResponse& operator=(const StopLogStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopLogStreamingResponse& operator=(StopLogStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopLogStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopLogStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StopLogStreamingResponse*>(
               &_StopLogStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopLogStreamingResponse& a, StopLogStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopLogStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopLogStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopLogStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopLogStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopLogStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopLogStreamingResponse& from) {
    StopLogStreamingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLogStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.StopLogStreamingResponse";
  }
  protected:
  explicit StopLogStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogStreamingResultFieldNumber = 1,
  };
  // .mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
  bool has_log_streaming_result() const;
  private:
  bool _internal_has_log_streaming_result() const;
  public:
  void clear_log_streaming_result();
  const ::mavsdk::rpc::log_streaming::LogStreamingResult& log_streaming_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::log_streaming::LogStreamingResult* release_log_streaming_result();
  ::mavsdk::rpc::log_streaming::LogStreamingResult* mutable_log_streaming_result();
  void set_allocated_log_streaming_result(::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result);
  private:
  const ::mavsdk::rpc::log_streaming::LogStreamingResult& _internal_log_streaming_result() const;
  ::mavsdk::rpc::log_streaming::LogStreamingResult* _internal_mutable_log_streaming_result();
  public:
  void unsafe_arena_set_allocated_log_streaming_result(
      ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result);
  ::mavsdk::rpc::log_streaming::LogStreamingResult* unsafe_arena_release_log_streaming_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.StopLogStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLogStreamingRawRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest) */ {
 public:
  inline SubscribeLogStreamingRawRequest() : SubscribeLogStreamingRawRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeLogStreamingRawRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeLogStreamingRawRequest(const SubscribeLogStreamingRawRequest& from);
  SubscribeLogStreamingRawRequest(SubscribeLogStreamingRawRequest&& from) noexcept
    : SubscribeLogStreamingRawRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeLogStreamingRawRequest& operator=(const SubscribeLogStreamingRawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLogStreamingRawRequest& operator=(SubscribeLogStreamingRawRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeLogStreamingRawRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeLogStreamingRawRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeLogStreamingRawRequest*>(
               &_SubscribeLogStreamingRawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeLogStreamingRawRequest& a, SubscribeLogStreamingRawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeLogStreamingRawRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeLogStreamingRawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeLogStreamingRawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeLogStreamingRawRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeLogStreamingRawRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeLogStreamingRawRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest";
  }
  protected:
  explicit SubscribeLogStreamingRawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class LogStreamingRawResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.LogStreamingRawResponse) */ {
 public:
  inline LogStreamingRawResponse() : LogStreamingRawResponse(nullptr) {}
  ~LogStreamingRawResponse() override;
  explicit PROTOBUF_CONSTEXPR LogStreamingRawResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogStreamingRawResponse(const LogStreamingRawResponse& from);
  LogStreamingRawResponse(LogStreamingRawResponse&& from) noexcept
    : LogStreamingRawResponse() {
    *this = ::std::move(from);
  }

  inline LogStreamingRawResponse& operator=(const LogStreamingRawResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStreamingRawResponse& operator=(LogStreamingRawResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogStreamingRawResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogStreamingRawResponse* internal_default_instance() {
    return reinterpret_cast<const LogStreamingRawResponse*>(
               &_LogStreamingRawResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogStreamingRawResponse& a, LogStreamingRawResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStreamingRawResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStreamingRawResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogStreamingRawResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogStreamingRawResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogStreamingRawResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogStreamingRawResponse& from) {
    LogStreamingRawResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStreamingRawResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.LogStreamingRawResponse";
  }
  protected:
  explicit LogStreamingRawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoggingRawFieldNumber = 1,
  };
  // .mavsdk.rpc.log_streaming.LogStreamingRaw logging_raw = 1;
  bool has_logging_raw() const;
  private:
  bool _internal_has_logging_raw() const;
  public:
  void clear_logging_raw();
  const ::mavsdk::rpc::log_streaming::LogStreamingRaw& logging_raw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::log_streaming::LogStreamingRaw* release_logging_raw();
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* mutable_logging_raw();
  void set_allocated_logging_raw(::mavsdk::rpc::log_streaming::LogStreamingRaw* logging_raw);
  private:
  const ::mavsdk::rpc::log_streaming::LogStreamingRaw& _internal_logging_raw() const;
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* _internal_mutable_logging_raw();
  public:
  void unsafe_arena_set_allocated_logging_raw(
      ::mavsdk::rpc::log_streaming::LogStreamingRaw* logging_raw);
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* unsafe_arena_release_logging_raw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.LogStreamingRawResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::log_streaming::LogStreamingRaw* logging_raw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class LogStreamingRaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.LogStreamingRaw) */ {
 public:
  inline LogStreamingRaw() : LogStreamingRaw(nullptr) {}
  ~LogStreamingRaw() override;
  explicit PROTOBUF_CONSTEXPR LogStreamingRaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogStreamingRaw(const LogStreamingRaw& from);
  LogStreamingRaw(LogStreamingRaw&& from) noexcept
    : LogStreamingRaw() {
    *this = ::std::move(from);
  }

  inline LogStreamingRaw& operator=(const LogStreamingRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStreamingRaw& operator=(LogStreamingRaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogStreamingRaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogStreamingRaw* internal_default_instance() {
    return reinterpret_cast<const LogStreamingRaw*>(
               &_LogStreamingRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogStreamingRaw& a, LogStreamingRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStreamingRaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStreamingRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogStreamingRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogStreamingRaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogStreamingRaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogStreamingRaw& from) {
    LogStreamingRaw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStreamingRaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.LogStreamingRaw";
  }
  protected:
  explicit LogStreamingRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataBase64FieldNumber = 1,
  };
  // string data_base64 = 1;
  void clear_data_base64();
  const std::string& data_base64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_base64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_base64();
  PROTOBUF_NODISCARD std::string* release_data_base64();
  void set_allocated_data_base64(std::string* data_base64);
  private:
  const std::string& _internal_data_base64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_base64(const std::string& value);
  std::string* _internal_mutable_data_base64();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.LogStreamingRaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_base64_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class LogStreamingResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.log_streaming.LogStreamingResult) */ {
 public:
  inline LogStreamingResult() : LogStreamingResult(nullptr) {}
  ~LogStreamingResult() override;
  explicit PROTOBUF_CONSTEXPR LogStreamingResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogStreamingResult(const LogStreamingResult& from);
  LogStreamingResult(LogStreamingResult&& from) noexcept
    : LogStreamingResult() {
    *this = ::std::move(from);
  }

  inline LogStreamingResult& operator=(const LogStreamingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStreamingResult& operator=(LogStreamingResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogStreamingResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogStreamingResult* internal_default_instance() {
    return reinterpret_cast<const LogStreamingResult*>(
               &_LogStreamingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogStreamingResult& a, LogStreamingResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStreamingResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStreamingResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogStreamingResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogStreamingResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogStreamingResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogStreamingResult& from) {
    LogStreamingResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStreamingResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.log_streaming.LogStreamingResult";
  }
  protected:
  explicit LogStreamingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogStreamingResult_Result Result;
  static constexpr Result RESULT_SUCCESS =
    LogStreamingResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    LogStreamingResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    LogStreamingResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    LogStreamingResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    LogStreamingResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    LogStreamingResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED =
    LogStreamingResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_UNKNOWN =
    LogStreamingResult_Result_RESULT_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return LogStreamingResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    LogStreamingResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    LogStreamingResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    LogStreamingResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return LogStreamingResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return LogStreamingResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return LogStreamingResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.log_streaming.LogStreamingResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::log_streaming::LogStreamingResult_Result result() const;
  void set_result(::mavsdk::rpc::log_streaming::LogStreamingResult_Result value);
  private:
  ::mavsdk::rpc::log_streaming::LogStreamingResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::log_streaming::LogStreamingResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.log_streaming.LogStreamingResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fstreaming_2flog_5fstreaming_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartLogStreamingRequest

// -------------------------------------------------------------------

// StartLogStreamingResponse

// .mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
inline bool StartLogStreamingResponse::_internal_has_log_streaming_result() const {
  return this != internal_default_instance() && _impl_.log_streaming_result_ != nullptr;
}
inline bool StartLogStreamingResponse::has_log_streaming_result() const {
  return _internal_has_log_streaming_result();
}
inline void StartLogStreamingResponse::clear_log_streaming_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.log_streaming_result_ != nullptr) {
    delete _impl_.log_streaming_result_;
  }
  _impl_.log_streaming_result_ = nullptr;
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingResult& StartLogStreamingResponse::_internal_log_streaming_result() const {
  const ::mavsdk::rpc::log_streaming::LogStreamingResult* p = _impl_.log_streaming_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::log_streaming::LogStreamingResult&>(
      ::mavsdk::rpc::log_streaming::_LogStreamingResult_default_instance_);
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingResult& StartLogStreamingResponse::log_streaming_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.StartLogStreamingResponse.log_streaming_result)
  return _internal_log_streaming_result();
}
inline void StartLogStreamingResponse::unsafe_arena_set_allocated_log_streaming_result(
    ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_streaming_result_);
  }
  _impl_.log_streaming_result_ = log_streaming_result;
  if (log_streaming_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.log_streaming.StartLogStreamingResponse.log_streaming_result)
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StartLogStreamingResponse::release_log_streaming_result() {
  
  ::mavsdk::rpc::log_streaming::LogStreamingResult* temp = _impl_.log_streaming_result_;
  _impl_.log_streaming_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StartLogStreamingResponse::unsafe_arena_release_log_streaming_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.log_streaming.StartLogStreamingResponse.log_streaming_result)
  
  ::mavsdk::rpc::log_streaming::LogStreamingResult* temp = _impl_.log_streaming_result_;
  _impl_.log_streaming_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StartLogStreamingResponse::_internal_mutable_log_streaming_result() {
  
  if (_impl_.log_streaming_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingResult>(GetArenaForAllocation());
    _impl_.log_streaming_result_ = p;
  }
  return _impl_.log_streaming_result_;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StartLogStreamingResponse::mutable_log_streaming_result() {
  ::mavsdk::rpc::log_streaming::LogStreamingResult* _msg = _internal_mutable_log_streaming_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.log_streaming.StartLogStreamingResponse.log_streaming_result)
  return _msg;
}
inline void StartLogStreamingResponse::set_allocated_log_streaming_result(::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.log_streaming_result_;
  }
  if (log_streaming_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log_streaming_result);
    if (message_arena != submessage_arena) {
      log_streaming_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_streaming_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.log_streaming_result_ = log_streaming_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.log_streaming.StartLogStreamingResponse.log_streaming_result)
}

// -------------------------------------------------------------------

// StopLogStreamingRequest

// -------------------------------------------------------------------

// StopLogStreamingResponse

// .mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
inline bool StopLogStreamingResponse::_internal_has_log_streaming_result() const {
  return this != internal_default_instance() && _impl_.log_streaming_result_ != nullptr;
}
inline bool StopLogStreamingResponse::has_log_streaming_result() const {
  return _internal_has_log_streaming_result();
}
inline void StopLogStreamingResponse::clear_log_streaming_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.log_streaming_result_ != nullptr) {
    delete _impl_.log_streaming_result_;
  }
  _impl_.log_streaming_result_ = nullptr;
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingResult& StopLogStreamingResponse::_internal_log_streaming_result() const {
  const ::mavsdk::rpc::log_streaming::LogStreamingResult* p = _impl_.log_streaming_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::log_streaming::LogStreamingResult&>(
      ::mavsdk::rpc::log_streaming::_LogStreamingResult_default_instance_);
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingResult& StopLogStreamingResponse::log_streaming_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.StopLogStreamingResponse.log_streaming_result)
  return _internal_log_streaming_result();
}
inline void StopLogStreamingResponse::unsafe_arena_set_allocated_log_streaming_result(
    ::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_streaming_result_);
  }
  _impl_.log_streaming_result_ = log_streaming_result;
  if (log_streaming_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.log_streaming.StopLogStreamingResponse.log_streaming_result)
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StopLogStreamingResponse::release_log_streaming_result() {
  
  ::mavsdk::rpc::log_streaming::LogStreamingResult* temp = _impl_.log_streaming_result_;
  _impl_.log_streaming_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StopLogStreamingResponse::unsafe_arena_release_log_streaming_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.log_streaming.StopLogStreamingResponse.log_streaming_result)
  
  ::mavsdk::rpc::log_streaming::LogStreamingResult* temp = _impl_.log_streaming_result_;
  _impl_.log_streaming_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StopLogStreamingResponse::_internal_mutable_log_streaming_result() {
  
  if (_impl_.log_streaming_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingResult>(GetArenaForAllocation());
    _impl_.log_streaming_result_ = p;
  }
  return _impl_.log_streaming_result_;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult* StopLogStreamingResponse::mutable_log_streaming_result() {
  ::mavsdk::rpc::log_streaming::LogStreamingResult* _msg = _internal_mutable_log_streaming_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.log_streaming.StopLogStreamingResponse.log_streaming_result)
  return _msg;
}
inline void StopLogStreamingResponse::set_allocated_log_streaming_result(::mavsdk::rpc::log_streaming::LogStreamingResult* log_streaming_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.log_streaming_result_;
  }
  if (log_streaming_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log_streaming_result);
    if (message_arena != submessage_arena) {
      log_streaming_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_streaming_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.log_streaming_result_ = log_streaming_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.log_streaming.StopLogStreamingResponse.log_streaming_result)
}

// -------------------------------------------------------------------

// SubscribeLogStreamingRawRequest

// -------------------------------------------------------------------

// LogStreamingRawResponse

// .mavsdk.rpc.log_streaming.LogStreamingRaw logging_raw = 1;
inline bool LogStreamingRawResponse::_internal_has_logging_raw() const {
  return this != internal_default_instance() && _impl_.logging_raw_ != nullptr;
}
inline bool LogStreamingRawResponse::has_logging_raw() const {
  return _internal_has_logging_raw();
}
inline void LogStreamingRawResponse::clear_logging_raw() {
  if (GetArenaForAllocation() == nullptr && _impl_.logging_raw_ != nullptr) {
    delete _impl_.logging_raw_;
  }
  _impl_.logging_raw_ = nullptr;
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingRaw& LogStreamingRawResponse::_internal_logging_raw() const {
  const ::mavsdk::rpc::log_streaming::LogStreamingRaw* p = _impl_.logging_raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::log_streaming::LogStreamingRaw&>(
      ::mavsdk::rpc::log_streaming::_LogStreamingRaw_default_instance_);
}
inline const ::mavsdk::rpc::log_streaming::LogStreamingRaw& LogStreamingRawResponse::logging_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.LogStreamingRawResponse.logging_raw)
  return _internal_logging_raw();
}
inline void LogStreamingRawResponse::unsafe_arena_set_allocated_logging_raw(
    ::mavsdk::rpc::log_streaming::LogStreamingRaw* logging_raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logging_raw_);
  }
  _impl_.logging_raw_ = logging_raw;
  if (logging_raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.log_streaming.LogStreamingRawResponse.logging_raw)
}
inline ::mavsdk::rpc::log_streaming::LogStreamingRaw* LogStreamingRawResponse::release_logging_raw() {
  
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* temp = _impl_.logging_raw_;
  _impl_.logging_raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingRaw* LogStreamingRawResponse::unsafe_arena_release_logging_raw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.log_streaming.LogStreamingRawResponse.logging_raw)
  
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* temp = _impl_.logging_raw_;
  _impl_.logging_raw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingRaw* LogStreamingRawResponse::_internal_mutable_logging_raw() {
  
  if (_impl_.logging_raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::log_streaming::LogStreamingRaw>(GetArenaForAllocation());
    _impl_.logging_raw_ = p;
  }
  return _impl_.logging_raw_;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingRaw* LogStreamingRawResponse::mutable_logging_raw() {
  ::mavsdk::rpc::log_streaming::LogStreamingRaw* _msg = _internal_mutable_logging_raw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.log_streaming.LogStreamingRawResponse.logging_raw)
  return _msg;
}
inline void LogStreamingRawResponse::set_allocated_logging_raw(::mavsdk::rpc::log_streaming::LogStreamingRaw* logging_raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logging_raw_;
  }
  if (logging_raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logging_raw);
    if (message_arena != submessage_arena) {
      logging_raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_raw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logging_raw_ = logging_raw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.log_streaming.LogStreamingRawResponse.logging_raw)
}

// -------------------------------------------------------------------

// LogStreamingRaw

// string data_base64 = 1;
inline void LogStreamingRaw::clear_data_base64() {
  _impl_.data_base64_.ClearToEmpty();
}
inline const std::string& LogStreamingRaw::data_base64() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.LogStreamingRaw.data_base64)
  return _internal_data_base64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogStreamingRaw::set_data_base64(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_base64_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.log_streaming.LogStreamingRaw.data_base64)
}
inline std::string* LogStreamingRaw::mutable_data_base64() {
  std::string* _s = _internal_mutable_data_base64();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.log_streaming.LogStreamingRaw.data_base64)
  return _s;
}
inline const std::string& LogStreamingRaw::_internal_data_base64() const {
  return _impl_.data_base64_.Get();
}
inline void LogStreamingRaw::_internal_set_data_base64(const std::string& value) {
  
  _impl_.data_base64_.Set(value, GetArenaForAllocation());
}
inline std::string* LogStreamingRaw::_internal_mutable_data_base64() {
  
  return _impl_.data_base64_.Mutable(GetArenaForAllocation());
}
inline std::string* LogStreamingRaw::release_data_base64() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.log_streaming.LogStreamingRaw.data_base64)
  return _impl_.data_base64_.Release();
}
inline void LogStreamingRaw::set_allocated_data_base64(std::string* data_base64) {
  if (data_base64 != nullptr) {
    
  } else {
    
  }
  _impl_.data_base64_.SetAllocated(data_base64, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_base64_.IsDefault()) {
    _impl_.data_base64_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.log_streaming.LogStreamingRaw.data_base64)
}

// -------------------------------------------------------------------

// LogStreamingResult

// .mavsdk.rpc.log_streaming.LogStreamingResult.Result result = 1;
inline void LogStreamingResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult_Result LogStreamingResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::log_streaming::LogStreamingResult_Result >(_impl_.result_);
}
inline ::mavsdk::rpc::log_streaming::LogStreamingResult_Result LogStreamingResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.LogStreamingResult.result)
  return _internal_result();
}
inline void LogStreamingResult::_internal_set_result(::mavsdk::rpc::log_streaming::LogStreamingResult_Result value) {
  
  _impl_.result_ = value;
}
inline void LogStreamingResult::set_result(::mavsdk::rpc::log_streaming::LogStreamingResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.log_streaming.LogStreamingResult.result)
}

// string result_str = 2;
inline void LogStreamingResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& LogStreamingResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.log_streaming.LogStreamingResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogStreamingResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.log_streaming.LogStreamingResult.result_str)
}
inline std::string* LogStreamingResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.log_streaming.LogStreamingResult.result_str)
  return _s;
}
inline const std::string& LogStreamingResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void LogStreamingResult::_internal_set_result_str(const std::string& value) {
  
  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* LogStreamingResult::_internal_mutable_result_str() {
  
  return _impl_.result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* LogStreamingResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.log_streaming.LogStreamingResult.result_str)
  return _impl_.result_str_.Release();
}
inline void LogStreamingResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  _impl_.result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.log_streaming.LogStreamingResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace log_streaming
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::log_streaming::LogStreamingResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::log_streaming::LogStreamingResult_Result>() {
  return ::mavsdk::rpc::log_streaming::LogStreamingResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_5fstreaming_2flog_5fstreaming_2eproto
