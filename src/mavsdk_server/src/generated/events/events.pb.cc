// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events/events.proto

#include "events/events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace events {
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_namespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compid_)*/0u
  , /*decltype(_impl_.log_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.health_component_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthAndArmingCheckProblemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckProblemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckProblemDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckProblemDefaultTypeInternal _HealthAndArmingCheckProblem_default_instance_;
PROTOBUF_CONSTEXPR HealthAndArmingCheckMode::HealthAndArmingCheckMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.problems_)*/{}
  , /*decltype(_impl_.mode_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.can_arm_or_run_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthAndArmingCheckModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckModeDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckModeDefaultTypeInternal _HealthAndArmingCheckMode_default_instance_;
PROTOBUF_CONSTEXPR HealthComponentReport::HealthComponentReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_present_)*/false
  , /*decltype(_impl_.has_error_)*/false
  , /*decltype(_impl_.has_warning_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthComponentReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthComponentReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthComponentReportDefaultTypeInternal() {}
  union {
    HealthComponentReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthComponentReportDefaultTypeInternal _HealthComponentReport_default_instance_;
PROTOBUF_CONSTEXPR HealthAndArmingCheckReport::HealthAndArmingCheckReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.health_components_)*/{}
  , /*decltype(_impl_.all_problems_)*/{}
  , /*decltype(_impl_.current_mode_intention_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthAndArmingCheckReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckReportDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckReportDefaultTypeInternal _HealthAndArmingCheckReport_default_instance_;
PROTOBUF_CONSTEXPR EventsResult::EventsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResultDefaultTypeInternal() {}
  union {
    EventsResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResultDefaultTypeInternal _EventsResult_default_instance_;
PROTOBUF_CONSTEXPR SubscribeEventsRequest::SubscribeEventsRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeEventsRequestDefaultTypeInternal() {}
  union {
    SubscribeEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeEventsRequestDefaultTypeInternal _SubscribeEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR EventsResponse::EventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeHealthAndArmingChecksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHealthAndArmingChecksRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthAndArmingChecksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHealthAndArmingChecksRequestDefaultTypeInternal _SubscribeHealthAndArmingChecksRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.report_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthAndArmingChecksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingChecksResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingChecksResponseDefaultTypeInternal() {}
  union {
    HealthAndArmingChecksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingChecksResponseDefaultTypeInternal _HealthAndArmingChecksResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(
    ::_pbi::ConstantInitialized) {}
struct GetHealthAndArmingChecksReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportRequestDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportRequestDefaultTypeInternal _GetHealthAndArmingChecksReportRequest_default_instance_;
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_result_)*/nullptr
  , /*decltype(_impl_.report_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHealthAndArmingChecksReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportResponseDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportResponseDefaultTypeInternal _GetHealthAndArmingChecksReportResponse_default_instance_;
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_events_2fevents_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_events_2fevents_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_events_2fevents_2eproto = nullptr;

const uint32_t TableStruct_events_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.compid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.log_level_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_namespace_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.log_level_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.health_component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.mode_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.can_arm_or_run_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.problems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.is_present_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_error_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_warning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.current_mode_intention_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.health_components_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.all_problems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _impl_.event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _impl_.report_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.events_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.report_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::events::Event)},
  { 12, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckProblem)},
  { 22, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckMode)},
  { 31, -1, -1, sizeof(::mavsdk::rpc::events::HealthComponentReport)},
  { 42, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckReport)},
  { 51, -1, -1, sizeof(::mavsdk::rpc::events::EventsResult)},
  { 59, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeEventsRequest)},
  { 65, -1, -1, sizeof(::mavsdk::rpc::events::EventsResponse)},
  { 72, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest)},
  { 78, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingChecksResponse)},
  { 85, -1, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest)},
  { 91, -1, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::events::_Event_default_instance_._instance,
  &::mavsdk::rpc::events::_HealthAndArmingCheckProblem_default_instance_._instance,
  &::mavsdk::rpc::events::_HealthAndArmingCheckMode_default_instance_._instance,
  &::mavsdk::rpc::events::_HealthComponentReport_default_instance_._instance,
  &::mavsdk::rpc::events::_HealthAndArmingCheckReport_default_instance_._instance,
  &::mavsdk::rpc::events::_EventsResult_default_instance_._instance,
  &::mavsdk::rpc::events::_SubscribeEventsRequest_default_instance_._instance,
  &::mavsdk::rpc::events::_EventsResponse_default_instance_._instance,
  &::mavsdk::rpc::events::_SubscribeHealthAndArmingChecksRequest_default_instance_._instance,
  &::mavsdk::rpc::events::_HealthAndArmingChecksResponse_default_instance_._instance,
  &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportRequest_default_instance_._instance,
  &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportResponse_default_instance_._instance,
};

const char descriptor_table_protodef_events_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023events/events.proto\022\021mavsdk.rpc.events"
  "\032\024mavsdk_options.proto\"\232\001\n\005Event\022\016\n\006comp"
  "id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\023\n\013description"
  "\030\003 \001(\t\022.\n\tlog_level\030\004 \001(\0162\033.mavsdk.rpc.e"
  "vents.LogLevel\022\027\n\017event_namespace\030\005 \001(\t\022"
  "\022\n\nevent_name\030\006 \001(\t\"\215\001\n\033HealthAndArmingC"
  "heckProblem\022\017\n\007message\030\001 \001(\t\022\023\n\013descript"
  "ion\030\002 \001(\t\022.\n\tlog_level\030\003 \001(\0162\033.mavsdk.rp"
  "c.events.LogLevel\022\030\n\020health_component\030\004 "
  "\001(\t\"\207\001\n\030HealthAndArmingCheckMode\022\021\n\tmode"
  "_name\030\001 \001(\t\022\026\n\016can_arm_or_run\030\002 \001(\010\022@\n\010p"
  "roblems\030\003 \003(\0132..mavsdk.rpc.events.Health"
  "AndArmingCheckProblem\"p\n\025HealthComponent"
  "Report\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\022\n\ni"
  "s_present\030\003 \001(\010\022\021\n\thas_error\030\004 \001(\010\022\023\n\013ha"
  "s_warning\030\005 \001(\010\"\364\001\n\032HealthAndArmingCheck"
  "Report\022K\n\026current_mode_intention\030\001 \001(\0132+"
  ".mavsdk.rpc.events.HealthAndArmingCheckM"
  "ode\022C\n\021health_components\030\002 \003(\0132(.mavsdk."
  "rpc.events.HealthComponentReport\022D\n\014all_"
  "problems\030\003 \003(\0132..mavsdk.rpc.events.Healt"
  "hAndArmingCheckProblem\"\254\002\n\014EventsResult\022"
  "6\n\006result\030\001 \001(\0162&.mavsdk.rpc.events.Even"
  "tsResult.Result\022\022\n\nresult_str\030\002 \001(\t\"\317\001\n\006"
  "Result\022\022\n\016RESULT_SUCCESS\020\000\022\030\n\024RESULT_NOT"
  "_AVAILABLE\020\001\022\033\n\027RESULT_CONNECTION_ERROR\020"
  "\002\022\026\n\022RESULT_UNSUPPORTED\020\003\022\021\n\rRESULT_DENI"
  "ED\020\004\022\021\n\rRESULT_FAILED\020\005\022\022\n\016RESULT_TIMEOU"
  "T\020\006\022\024\n\020RESULT_NO_SYSTEM\020\007\022\022\n\016RESULT_UNKN"
  "OWN\020\010\"\030\n\026SubscribeEventsRequest\"9\n\016Event"
  "sResponse\022\'\n\005event\030\001 \001(\0132\030.mavsdk.rpc.ev"
  "ents.Event\"\'\n%SubscribeHealthAndArmingCh"
  "ecksRequest\"^\n\035HealthAndArmingChecksResp"
  "onse\022=\n\006report\030\001 \001(\0132-.mavsdk.rpc.events"
  ".HealthAndArmingCheckReport\"\'\n%GetHealth"
  "AndArmingChecksReportRequest\"\237\001\n&GetHeal"
  "thAndArmingChecksReportResponse\0226\n\revent"
  "s_result\030\001 \001(\0132\037.mavsdk.rpc.events.Event"
  "sResult\022=\n\006report\030\002 \001(\0132-.mavsdk.rpc.eve"
  "nts.HealthAndArmingCheckReport*\273\001\n\010LogLe"
  "vel\022\027\n\023LOG_LEVEL_EMERGENCY\020\000\022\023\n\017LOG_LEVE"
  "L_ALERT\020\001\022\026\n\022LOG_LEVEL_CRITICAL\020\002\022\023\n\017LOG"
  "_LEVEL_ERROR\020\003\022\025\n\021LOG_LEVEL_WARNING\020\004\022\024\n"
  "\020LOG_LEVEL_NOTICE\020\005\022\022\n\016LOG_LEVEL_INFO\020\006\022"
  "\023\n\017LOG_LEVEL_DEBUG\020\0072\255\003\n\rEventsService\022g"
  "\n\017SubscribeEvents\022).mavsdk.rpc.events.Su"
  "bscribeEventsRequest\032!.mavsdk.rpc.events"
  ".EventsResponse\"\004\200\265\030\0000\001\022\224\001\n\036SubscribeHea"
  "lthAndArmingChecks\0228.mavsdk.rpc.events.S"
  "ubscribeHealthAndArmingChecksRequest\0320.m"
  "avsdk.rpc.events.HealthAndArmingChecksRe"
  "sponse\"\004\200\265\030\0000\001\022\233\001\n\036GetHealthAndArmingChe"
  "cksReport\0228.mavsdk.rpc.events.GetHealthA"
  "ndArmingChecksReportRequest\0329.mavsdk.rpc"
  ".events.GetHealthAndArmingChecksReportRe"
  "sponse\"\004\200\265\030\001B\037\n\020io.mavsdk.eventsB\013Events"
  "Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_events_2fevents_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_events_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_events_2fevents_2eproto = {
    false, false, 2253, descriptor_table_protodef_events_2fevents_2eproto,
    "events/events.proto",
    &descriptor_table_events_2fevents_2eproto_once, descriptor_table_events_2fevents_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_events_2fevents_2eproto::offsets,
    file_level_metadata_events_2fevents_2eproto, file_level_enum_descriptors_events_2fevents_2eproto,
    file_level_service_descriptors_events_2fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_events_2fevents_2eproto_getter() {
  return &descriptor_table_events_2fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_events_2fevents_2eproto(&descriptor_table_events_2fevents_2eproto);
namespace mavsdk {
namespace rpc {
namespace events {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventsResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[0];
}
bool EventsResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EventsResult_Result EventsResult::RESULT_SUCCESS;
constexpr EventsResult_Result EventsResult::RESULT_NOT_AVAILABLE;
constexpr EventsResult_Result EventsResult::RESULT_CONNECTION_ERROR;
constexpr EventsResult_Result EventsResult::RESULT_UNSUPPORTED;
constexpr EventsResult_Result EventsResult::RESULT_DENIED;
constexpr EventsResult_Result EventsResult::RESULT_FAILED;
constexpr EventsResult_Result EventsResult::RESULT_TIMEOUT;
constexpr EventsResult_Result EventsResult::RESULT_NO_SYSTEM;
constexpr EventsResult_Result EventsResult::RESULT_UNKNOWN;
constexpr EventsResult_Result EventsResult::Result_MIN;
constexpr EventsResult_Result EventsResult::Result_MAX;
constexpr int EventsResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[1];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.event_namespace_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.compid_){}
    , decltype(_impl_.log_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_namespace().empty()) {
    _this->_impl_.event_namespace_.Set(from._internal_event_namespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_name().empty()) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compid_, &from._impl_.compid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_level_) -
    reinterpret_cast<char*>(&_impl_.compid_)) + sizeof(_impl_.log_level_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.event_namespace_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.compid_){0u}
    , decltype(_impl_.log_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.description_.Destroy();
  _impl_.event_namespace_.Destroy();
  _impl_.event_name_.Destroy();
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.event_namespace_.ClearToEmpty();
  _impl_.event_name_.ClearToEmpty();
  ::memset(&_impl_.compid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_level_) -
      reinterpret_cast<char*>(&_impl_.compid_)) + sizeof(_impl_.log_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 compid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.Event.message"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.Event.description"));
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.events.LogLevel log_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::mavsdk::rpc::events::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string event_namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_event_namespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.Event.event_namespace"));
        } else
          goto handle_unusual;
        continue;
      // string event_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.Event.event_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 compid = 1;
  if (this->_internal_compid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_compid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.Event.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.Event.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .mavsdk.rpc.events.LogLevel log_level = 4;
  if (this->_internal_log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_log_level(), target);
  }

  // string event_namespace = 5;
  if (!this->_internal_event_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_namespace().data(), static_cast<int>(this->_internal_event_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.Event.event_namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_event_namespace(), target);
  }

  // string event_name = 6;
  if (!this->_internal_event_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.Event.event_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_event_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string event_namespace = 5;
  if (!this->_internal_event_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_namespace());
  }

  // string event_name = 6;
  if (!this->_internal_event_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // uint32 compid = 1;
  if (this->_internal_compid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compid());
  }

  // .mavsdk.rpc.events.LogLevel log_level = 4;
  if (this->_internal_log_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_event_namespace().empty()) {
    _this->_internal_set_event_namespace(from._internal_event_namespace());
  }
  if (!from._internal_event_name().empty()) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  if (from._internal_compid() != 0) {
    _this->_internal_set_compid(from._internal_compid());
  }
  if (from._internal_log_level() != 0) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_namespace_, lhs_arena,
      &other->_impl_.event_namespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_name_, lhs_arena,
      &other->_impl_.event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_)
      + sizeof(Event::_impl_.log_level_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_)>(
          reinterpret_cast<char*>(&_impl_.compid_),
          reinterpret_cast<char*>(&other->_impl_.compid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[0]);
}

// ===================================================================

class HealthAndArmingCheckProblem::_Internal {
 public:
};

HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}
HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(const HealthAndArmingCheckProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthAndArmingCheckProblem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.health_component_){}
    , decltype(_impl_.log_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.health_component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.health_component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_health_component().empty()) {
    _this->_impl_.health_component_.Set(from._internal_health_component(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.log_level_ = from._impl_.log_level_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}

inline void HealthAndArmingCheckProblem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.health_component_){}
    , decltype(_impl_.log_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.health_component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.health_component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthAndArmingCheckProblem::~HealthAndArmingCheckProblem() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthAndArmingCheckProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.description_.Destroy();
  _impl_.health_component_.Destroy();
}

void HealthAndArmingCheckProblem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthAndArmingCheckProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.health_component_.ClearToEmpty();
  _impl_.log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthAndArmingCheckProblem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthAndArmingCheckProblem.message"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthAndArmingCheckProblem.description"));
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.events.LogLevel log_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::mavsdk::rpc::events::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string health_component = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_health_component();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthAndArmingCheckProblem.health_component"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthAndArmingCheckProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthAndArmingCheckProblem.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthAndArmingCheckProblem.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .mavsdk.rpc.events.LogLevel log_level = 3;
  if (this->_internal_log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_log_level(), target);
  }

  // string health_component = 4;
  if (!this->_internal_health_component().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health_component().data(), static_cast<int>(this->_internal_health_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthAndArmingCheckProblem.health_component");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_health_component(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  return target;
}

size_t HealthAndArmingCheckProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string health_component = 4;
  if (!this->_internal_health_component().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health_component());
  }

  // .mavsdk.rpc.events.LogLevel log_level = 3;
  if (this->_internal_log_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthAndArmingCheckProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthAndArmingCheckProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthAndArmingCheckProblem::GetClassData() const { return &_class_data_; }


void HealthAndArmingCheckProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckProblem*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckProblem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_health_component().empty()) {
    _this->_internal_set_health_component(from._internal_health_component());
  }
  if (from._internal_log_level() != 0) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckProblem::CopyFrom(const HealthAndArmingCheckProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAndArmingCheckProblem::IsInitialized() const {
  return true;
}

void HealthAndArmingCheckProblem::InternalSwap(HealthAndArmingCheckProblem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.health_component_, lhs_arena,
      &other->_impl_.health_component_, rhs_arena
  );
  swap(_impl_.log_level_, other->_impl_.log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAndArmingCheckProblem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[1]);
}

// ===================================================================

class HealthAndArmingCheckMode::_Internal {
 public:
};

HealthAndArmingCheckMode::HealthAndArmingCheckMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}
HealthAndArmingCheckMode::HealthAndArmingCheckMode(const HealthAndArmingCheckMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthAndArmingCheckMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.problems_){from._impl_.problems_}
    , decltype(_impl_.mode_name_){}
    , decltype(_impl_.can_arm_or_run_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode_name().empty()) {
    _this->_impl_.mode_name_.Set(from._internal_mode_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.can_arm_or_run_ = from._impl_.can_arm_or_run_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}

inline void HealthAndArmingCheckMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.problems_){arena}
    , decltype(_impl_.mode_name_){}
    , decltype(_impl_.can_arm_or_run_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthAndArmingCheckMode::~HealthAndArmingCheckMode() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthAndArmingCheckMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.problems_.~RepeatedPtrField();
  _impl_.mode_name_.Destroy();
}

void HealthAndArmingCheckMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthAndArmingCheckMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.problems_.Clear();
  _impl_.mode_name_.ClearToEmpty();
  _impl_.can_arm_or_run_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthAndArmingCheckMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mode_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mode_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthAndArmingCheckMode.mode_name"));
        } else
          goto handle_unusual;
        continue;
      // bool can_arm_or_run = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_arm_or_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_problems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthAndArmingCheckMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode_name = 1;
  if (!this->_internal_mode_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode_name().data(), static_cast<int>(this->_internal_mode_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthAndArmingCheckMode.mode_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode_name(), target);
  }

  // bool can_arm_or_run = 2;
  if (this->_internal_can_arm_or_run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_arm_or_run(), target);
  }

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_problems_size()); i < n; i++) {
    const auto& repfield = this->_internal_problems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckMode)
  return target;
}

size_t HealthAndArmingCheckMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
  total_size += 1UL * this->_internal_problems_size();
  for (const auto& msg : this->_impl_.problems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mode_name = 1;
  if (!this->_internal_mode_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode_name());
  }

  // bool can_arm_or_run = 2;
  if (this->_internal_can_arm_or_run() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthAndArmingCheckMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthAndArmingCheckMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthAndArmingCheckMode::GetClassData() const { return &_class_data_; }


void HealthAndArmingCheckMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckMode*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.problems_.MergeFrom(from._impl_.problems_);
  if (!from._internal_mode_name().empty()) {
    _this->_internal_set_mode_name(from._internal_mode_name());
  }
  if (from._internal_can_arm_or_run() != 0) {
    _this->_internal_set_can_arm_or_run(from._internal_can_arm_or_run());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckMode::CopyFrom(const HealthAndArmingCheckMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAndArmingCheckMode::IsInitialized() const {
  return true;
}

void HealthAndArmingCheckMode::InternalSwap(HealthAndArmingCheckMode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.problems_.InternalSwap(&other->_impl_.problems_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_name_, lhs_arena,
      &other->_impl_.mode_name_, rhs_arena
  );
  swap(_impl_.can_arm_or_run_, other->_impl_.can_arm_or_run_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAndArmingCheckMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[2]);
}

// ===================================================================

class HealthComponentReport::_Internal {
 public:
};

HealthComponentReport::HealthComponentReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthComponentReport)
}
HealthComponentReport::HealthComponentReport(const HealthComponentReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthComponentReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.is_present_){}
    , decltype(_impl_.has_error_){}
    , decltype(_impl_.has_warning_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_present_, &from._impl_.is_present_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_warning_) -
    reinterpret_cast<char*>(&_impl_.is_present_)) + sizeof(_impl_.has_warning_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthComponentReport)
}

inline void HealthComponentReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.is_present_){false}
    , decltype(_impl_.has_error_){false}
    , decltype(_impl_.has_warning_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthComponentReport::~HealthComponentReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthComponentReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthComponentReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.label_.Destroy();
}

void HealthComponentReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthComponentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthComponentReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  ::memset(&_impl_.is_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_warning_) -
      reinterpret_cast<char*>(&_impl_.is_present_)) + sizeof(_impl_.has_warning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthComponentReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthComponentReport.name"));
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.HealthComponentReport.label"));
        } else
          goto handle_unusual;
        continue;
      // bool is_present = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.has_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_warning = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.has_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthComponentReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthComponentReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthComponentReport.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.HealthComponentReport.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // bool is_present = 3;
  if (this->_internal_is_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_present(), target);
  }

  // bool has_error = 4;
  if (this->_internal_has_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_error(), target);
  }

  // bool has_warning = 5;
  if (this->_internal_has_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_warning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthComponentReport)
  return target;
}

size_t HealthComponentReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthComponentReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // bool is_present = 3;
  if (this->_internal_is_present() != 0) {
    total_size += 1 + 1;
  }

  // bool has_error = 4;
  if (this->_internal_has_error() != 0) {
    total_size += 1 + 1;
  }

  // bool has_warning = 5;
  if (this->_internal_has_warning() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthComponentReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthComponentReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthComponentReport::GetClassData() const { return &_class_data_; }


void HealthComponentReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthComponentReport*>(&to_msg);
  auto& from = static_cast<const HealthComponentReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthComponentReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_is_present() != 0) {
    _this->_internal_set_is_present(from._internal_is_present());
  }
  if (from._internal_has_error() != 0) {
    _this->_internal_set_has_error(from._internal_has_error());
  }
  if (from._internal_has_warning() != 0) {
    _this->_internal_set_has_warning(from._internal_has_warning());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthComponentReport::CopyFrom(const HealthComponentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthComponentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthComponentReport::IsInitialized() const {
  return true;
}

void HealthComponentReport::InternalSwap(HealthComponentReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_)
      + sizeof(HealthComponentReport::_impl_.has_warning_)
      - PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_)>(
          reinterpret_cast<char*>(&_impl_.is_present_),
          reinterpret_cast<char*>(&other->_impl_.is_present_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthComponentReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[3]);
}

// ===================================================================

class HealthAndArmingCheckReport::_Internal {
 public:
  static const ::mavsdk::rpc::events::HealthAndArmingCheckMode& current_mode_intention(const HealthAndArmingCheckReport* msg);
};

const ::mavsdk::rpc::events::HealthAndArmingCheckMode&
HealthAndArmingCheckReport::_Internal::current_mode_intention(const HealthAndArmingCheckReport* msg) {
  return *msg->_impl_.current_mode_intention_;
}
HealthAndArmingCheckReport::HealthAndArmingCheckReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}
HealthAndArmingCheckReport::HealthAndArmingCheckReport(const HealthAndArmingCheckReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthAndArmingCheckReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.health_components_){from._impl_.health_components_}
    , decltype(_impl_.all_problems_){from._impl_.all_problems_}
    , decltype(_impl_.current_mode_intention_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_mode_intention()) {
    _this->_impl_.current_mode_intention_ = new ::mavsdk::rpc::events::HealthAndArmingCheckMode(*from._impl_.current_mode_intention_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}

inline void HealthAndArmingCheckReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.health_components_){arena}
    , decltype(_impl_.all_problems_){arena}
    , decltype(_impl_.current_mode_intention_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthAndArmingCheckReport::~HealthAndArmingCheckReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthAndArmingCheckReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.health_components_.~RepeatedPtrField();
  _impl_.all_problems_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.current_mode_intention_;
}

void HealthAndArmingCheckReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthAndArmingCheckReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_components_.Clear();
  _impl_.all_problems_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.current_mode_intention_ != nullptr) {
    delete _impl_.current_mode_intention_;
  }
  _impl_.current_mode_intention_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthAndArmingCheckReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_mode_intention(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_problems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthAndArmingCheckReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
  if (this->_internal_has_current_mode_intention()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_mode_intention(this),
        _Internal::current_mode_intention(this).GetCachedSize(), target, stream);
  }

  // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_health_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_health_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_problems_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_problems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckReport)
  return target;
}

size_t HealthAndArmingCheckReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
  total_size += 1UL * this->_internal_health_components_size();
  for (const auto& msg : this->_impl_.health_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
  total_size += 1UL * this->_internal_all_problems_size();
  for (const auto& msg : this->_impl_.all_problems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
  if (this->_internal_has_current_mode_intention()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_mode_intention_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthAndArmingCheckReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthAndArmingCheckReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthAndArmingCheckReport::GetClassData() const { return &_class_data_; }


void HealthAndArmingCheckReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckReport*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.health_components_.MergeFrom(from._impl_.health_components_);
  _this->_impl_.all_problems_.MergeFrom(from._impl_.all_problems_);
  if (from._internal_has_current_mode_intention()) {
    _this->_internal_mutable_current_mode_intention()->::mavsdk::rpc::events::HealthAndArmingCheckMode::MergeFrom(
        from._internal_current_mode_intention());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckReport::CopyFrom(const HealthAndArmingCheckReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAndArmingCheckReport::IsInitialized() const {
  return true;
}

void HealthAndArmingCheckReport::InternalSwap(HealthAndArmingCheckReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.health_components_.InternalSwap(&other->_impl_.health_components_);
  _impl_.all_problems_.InternalSwap(&other->_impl_.all_problems_);
  swap(_impl_.current_mode_intention_, other->_impl_.current_mode_intention_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAndArmingCheckReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[4]);
}

// ===================================================================

class EventsResult::_Internal {
 public:
};

EventsResult::EventsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResult)
}
EventsResult::EventsResult(const EventsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResult)
}

inline void EventsResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventsResult::~EventsResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void EventsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.events.EventsResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::events::EventsResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.events.EventsResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventsResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.events.EventsResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.events.EventsResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResult)
  return target;
}

size_t EventsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.events.EventsResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsResult::GetClassData() const { return &_class_data_; }


void EventsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventsResult*>(&to_msg);
  auto& from = static_cast<const EventsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResult::CopyFrom(const EventsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResult::IsInitialized() const {
  return true;
}

void EventsResult::InternalSwap(EventsResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_str_, lhs_arena,
      &other->_impl_.result_str_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[5]);
}

// ===================================================================

class SubscribeEventsRequest::_Internal {
 public:
};

SubscribeEventsRequest::SubscribeEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}
SubscribeEventsRequest::SubscribeEventsRequest(const SubscribeEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeEventsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeEventsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[6]);
}

// ===================================================================

class EventsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::events::Event& event(const EventsResponse* msg);
};

const ::mavsdk::rpc::events::Event&
EventsResponse::_Internal::event(const EventsResponse* msg) {
  return *msg->_impl_.event_;
}
EventsResponse::EventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResponse)
}
EventsResponse::EventsResponse(const EventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::mavsdk::rpc::events::Event(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResponse)
}

inline void EventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.event_;
}

void EventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.events.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.events.Event event = 1;
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResponse)
  return target;
}

size_t EventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.events.Event event = 1;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsResponse::GetClassData() const { return &_class_data_; }


void EventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventsResponse*>(&to_msg);
  auto& from = static_cast<const EventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::mavsdk::rpc::events::Event::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse::IsInitialized() const {
  return true;
}

void EventsResponse::InternalSwap(EventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[7]);
}

// ===================================================================

class SubscribeHealthAndArmingChecksRequest::_Internal {
 public:
};

SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}
SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(const SubscribeHealthAndArmingChecksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeHealthAndArmingChecksRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeHealthAndArmingChecksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeHealthAndArmingChecksRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHealthAndArmingChecksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[8]);
}

// ===================================================================

class HealthAndArmingChecksResponse::_Internal {
 public:
  static const ::mavsdk::rpc::events::HealthAndArmingCheckReport& report(const HealthAndArmingChecksResponse* msg);
};

const ::mavsdk::rpc::events::HealthAndArmingCheckReport&
HealthAndArmingChecksResponse::_Internal::report(const HealthAndArmingChecksResponse* msg) {
  return *msg->_impl_.report_;
}
HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}
HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(const HealthAndArmingChecksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthAndArmingChecksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.report_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_report()) {
    _this->_impl_.report_ = new ::mavsdk::rpc::events::HealthAndArmingCheckReport(*from._impl_.report_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}

inline void HealthAndArmingChecksResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.report_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthAndArmingChecksResponse::~HealthAndArmingChecksResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthAndArmingChecksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.report_;
}

void HealthAndArmingChecksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthAndArmingChecksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.report_ != nullptr) {
    delete _impl_.report_;
  }
  _impl_.report_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthAndArmingChecksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthAndArmingChecksResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
  if (this->_internal_has_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  return target;
}

size_t HealthAndArmingChecksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
  if (this->_internal_has_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.report_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthAndArmingChecksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthAndArmingChecksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthAndArmingChecksResponse::GetClassData() const { return &_class_data_; }


void HealthAndArmingChecksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingChecksResponse*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingChecksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_report()) {
    _this->_internal_mutable_report()->::mavsdk::rpc::events::HealthAndArmingCheckReport::MergeFrom(
        from._internal_report());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingChecksResponse::CopyFrom(const HealthAndArmingChecksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAndArmingChecksResponse::IsInitialized() const {
  return true;
}

void HealthAndArmingChecksResponse::InternalSwap(HealthAndArmingChecksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.report_, other->_impl_.report_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAndArmingChecksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[9]);
}

// ===================================================================

class GetHealthAndArmingChecksReportRequest::_Internal {
 public:
};

GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}
GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(const GetHealthAndArmingChecksReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetHealthAndArmingChecksReportRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHealthAndArmingChecksReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHealthAndArmingChecksReportRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetHealthAndArmingChecksReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[10]);
}

// ===================================================================

class GetHealthAndArmingChecksReportResponse::_Internal {
 public:
  static const ::mavsdk::rpc::events::EventsResult& events_result(const GetHealthAndArmingChecksReportResponse* msg);
  static const ::mavsdk::rpc::events::HealthAndArmingCheckReport& report(const GetHealthAndArmingChecksReportResponse* msg);
};

const ::mavsdk::rpc::events::EventsResult&
GetHealthAndArmingChecksReportResponse::_Internal::events_result(const GetHealthAndArmingChecksReportResponse* msg) {
  return *msg->_impl_.events_result_;
}
const ::mavsdk::rpc::events::HealthAndArmingCheckReport&
GetHealthAndArmingChecksReportResponse::_Internal::report(const GetHealthAndArmingChecksReportResponse* msg) {
  return *msg->_impl_.report_;
}
GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}
GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(const GetHealthAndArmingChecksReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHealthAndArmingChecksReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_result_){nullptr}
    , decltype(_impl_.report_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_events_result()) {
    _this->_impl_.events_result_ = new ::mavsdk::rpc::events::EventsResult(*from._impl_.events_result_);
  }
  if (from._internal_has_report()) {
    _this->_impl_.report_ = new ::mavsdk::rpc::events::HealthAndArmingCheckReport(*from._impl_.report_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}

inline void GetHealthAndArmingChecksReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_result_){nullptr}
    , decltype(_impl_.report_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHealthAndArmingChecksReportResponse::~GetHealthAndArmingChecksReportResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHealthAndArmingChecksReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.events_result_;
  if (this != internal_default_instance()) delete _impl_.report_;
}

void GetHealthAndArmingChecksReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHealthAndArmingChecksReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.events_result_ != nullptr) {
    delete _impl_.events_result_;
  }
  _impl_.events_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.report_ != nullptr) {
    delete _impl_.report_;
  }
  _impl_.report_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHealthAndArmingChecksReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.events.EventsResult events_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_events_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHealthAndArmingChecksReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.events.EventsResult events_result = 1;
  if (this->_internal_has_events_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::events_result(this),
        _Internal::events_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
  if (this->_internal_has_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  return target;
}

size_t GetHealthAndArmingChecksReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.events.EventsResult events_result = 1;
  if (this->_internal_has_events_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.events_result_);
  }

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
  if (this->_internal_has_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.report_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHealthAndArmingChecksReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHealthAndArmingChecksReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHealthAndArmingChecksReportResponse::GetClassData() const { return &_class_data_; }


void GetHealthAndArmingChecksReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHealthAndArmingChecksReportResponse*>(&to_msg);
  auto& from = static_cast<const GetHealthAndArmingChecksReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_events_result()) {
    _this->_internal_mutable_events_result()->::mavsdk::rpc::events::EventsResult::MergeFrom(
        from._internal_events_result());
  }
  if (from._internal_has_report()) {
    _this->_internal_mutable_report()->::mavsdk::rpc::events::HealthAndArmingCheckReport::MergeFrom(
        from._internal_report());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHealthAndArmingChecksReportResponse::CopyFrom(const GetHealthAndArmingChecksReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthAndArmingChecksReportResponse::IsInitialized() const {
  return true;
}

void GetHealthAndArmingChecksReportResponse::InternalSwap(GetHealthAndArmingChecksReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_)
      + sizeof(GetHealthAndArmingChecksReportResponse::_impl_.report_)
      - PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_)>(
          reinterpret_cast<char*>(&_impl_.events_result_),
          reinterpret_cast<char*>(&other->_impl_.events_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthAndArmingChecksReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::Event*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::HealthAndArmingCheckProblem*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::HealthAndArmingCheckProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::HealthAndArmingCheckProblem >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::HealthAndArmingCheckMode*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::HealthAndArmingCheckMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::HealthAndArmingCheckMode >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::HealthComponentReport*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::HealthComponentReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::HealthComponentReport >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::HealthAndArmingCheckReport*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::HealthAndArmingCheckReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::HealthAndArmingCheckReport >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::EventsResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::EventsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::EventsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::SubscribeEventsRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::SubscribeEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::SubscribeEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::EventsResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::EventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::EventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::HealthAndArmingChecksResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::HealthAndArmingChecksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::HealthAndArmingChecksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
