// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arm_authorizer_server/arm_authorizer_server.proto

#include "arm_authorizer_server/arm_authorizer_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace arm_authorizer_server {
PROTOBUF_CONSTEXPR SubscribeArmAuthorizationRequest::SubscribeArmAuthorizationRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeArmAuthorizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeArmAuthorizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeArmAuthorizationRequestDefaultTypeInternal() {}
  union {
    SubscribeArmAuthorizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeArmAuthorizationRequestDefaultTypeInternal _SubscribeArmAuthorizationRequest_default_instance_;
PROTOBUF_CONSTEXPR ArmAuthorizationResponse::ArmAuthorizationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.system_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArmAuthorizationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmAuthorizationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmAuthorizationResponseDefaultTypeInternal() {}
  union {
    ArmAuthorizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmAuthorizationResponseDefaultTypeInternal _ArmAuthorizationResponse_default_instance_;
PROTOBUF_CONSTEXPR AcceptArmAuthorizationRequest::AcceptArmAuthorizationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valid_time_s_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptArmAuthorizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptArmAuthorizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptArmAuthorizationRequestDefaultTypeInternal() {}
  union {
    AcceptArmAuthorizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptArmAuthorizationRequestDefaultTypeInternal _AcceptArmAuthorizationRequest_default_instance_;
PROTOBUF_CONSTEXPR AcceptArmAuthorizationResponse::AcceptArmAuthorizationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arm_authorizer_server_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptArmAuthorizationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptArmAuthorizationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptArmAuthorizationResponseDefaultTypeInternal() {}
  union {
    AcceptArmAuthorizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptArmAuthorizationResponseDefaultTypeInternal _AcceptArmAuthorizationResponse_default_instance_;
PROTOBUF_CONSTEXPR RejectArmAuthorizationRequest::RejectArmAuthorizationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.temporarily_)*/false
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.extra_info_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RejectArmAuthorizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RejectArmAuthorizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RejectArmAuthorizationRequestDefaultTypeInternal() {}
  union {
    RejectArmAuthorizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RejectArmAuthorizationRequestDefaultTypeInternal _RejectArmAuthorizationRequest_default_instance_;
PROTOBUF_CONSTEXPR RejectArmAuthorizationResponse::RejectArmAuthorizationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arm_authorizer_server_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RejectArmAuthorizationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RejectArmAuthorizationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RejectArmAuthorizationResponseDefaultTypeInternal() {}
  union {
    RejectArmAuthorizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RejectArmAuthorizationResponseDefaultTypeInternal _RejectArmAuthorizationResponse_default_instance_;
PROTOBUF_CONSTEXPR ArmAuthorizerServerResult::ArmAuthorizerServerResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArmAuthorizerServerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmAuthorizerServerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmAuthorizerServerResultDefaultTypeInternal() {}
  union {
    ArmAuthorizerServerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmAuthorizerServerResultDefaultTypeInternal _ArmAuthorizerServerResult_default_instance_;
}  // namespace arm_authorizer_server
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto = nullptr;

const uint32_t TableStruct_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::SubscribeArmAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse, _impl_.system_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest, _impl_.valid_time_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse, _impl_.arm_authorizer_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest, _impl_.temporarily_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest, _impl_.extra_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse, _impl_.arm_authorizer_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult, _impl_.result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::SubscribeArmAuthorizationRequest)},
  { 6, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse)},
  { 13, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest)},
  { 20, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse)},
  { 27, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest)},
  { 36, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse)},
  { 43, -1, -1, sizeof(::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::arm_authorizer_server::_SubscribeArmAuthorizationRequest_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_ArmAuthorizationResponse_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_AcceptArmAuthorizationRequest_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_AcceptArmAuthorizationResponse_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_RejectArmAuthorizationRequest_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_RejectArmAuthorizationResponse_default_instance_._instance,
  &::mavsdk::rpc::arm_authorizer_server::_ArmAuthorizerServerResult_default_instance_._instance,
};

const char descriptor_table_protodef_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1arm_authorizer_server/arm_authorizer_s"
  "erver.proto\022 mavsdk.rpc.arm_authorizer_s"
  "erver\032\024mavsdk_options.proto\"\"\n Subscribe"
  "ArmAuthorizationRequest\"-\n\030ArmAuthorizat"
  "ionResponse\022\021\n\tsystem_id\030\001 \001(\r\"5\n\035Accept"
  "ArmAuthorizationRequest\022\024\n\014valid_time_s\030"
  "\001 \001(\005\"\203\001\n\036AcceptArmAuthorizationResponse"
  "\022a\n\034arm_authorizer_server_result\030\001 \001(\0132;"
  ".mavsdk.rpc.arm_authorizer_server.ArmAut"
  "horizerServerResult\"\213\001\n\035RejectArmAuthori"
  "zationRequest\022\023\n\013temporarily\030\001 \001(\010\022A\n\006re"
  "ason\030\002 \001(\01621.mavsdk.rpc.arm_authorizer_s"
  "erver.RejectionReason\022\022\n\nextra_info\030\003 \001("
  "\005\"\203\001\n\036RejectArmAuthorizationResponse\022a\n\034"
  "arm_authorizer_server_result\030\001 \001(\0132;.mav"
  "sdk.rpc.arm_authorizer_server.ArmAuthori"
  "zerServerResult\"\310\001\n\031ArmAuthorizerServerR"
  "esult\022R\n\006result\030\001 \001(\0162B.mavsdk.rpc.arm_a"
  "uthorizer_server.ArmAuthorizerServerResu"
  "lt.Result\022\022\n\nresult_str\030\002 \001(\t\"C\n\006Result\022"
  "\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022"
  "\021\n\rRESULT_FAILED\020\002*\327\001\n\017RejectionReason\022\034"
  "\n\030REJECTION_REASON_GENERIC\020\000\022\031\n\025REJECTIO"
  "N_REASON_NONE\020\001\022%\n!REJECTION_REASON_INVA"
  "LID_WAYPOINT\020\002\022\034\n\030REJECTION_REASON_TIMEO"
  "UT\020\003\022$\n REJECTION_REASON_AIRSPACE_IN_USE"
  "\020\004\022 \n\034REJECTION_REASON_BAD_WEATHER\020\0052\212\004\n"
  "\032ArmAuthorizerServerService\022\243\001\n\031Subscrib"
  "eArmAuthorization\022B.mavsdk.rpc.arm_autho"
  "rizer_server.SubscribeArmAuthorizationRe"
  "quest\032:.mavsdk.rpc.arm_authorizer_server"
  ".ArmAuthorizationResponse\"\004\200\265\030\0000\001\022\241\001\n\026Ac"
  "ceptArmAuthorization\022\?.mavsdk.rpc.arm_au"
  "thorizer_server.AcceptArmAuthorizationRe"
  "quest\032@.mavsdk.rpc.arm_authorizer_server"
  ".AcceptArmAuthorizationResponse\"\004\200\265\030\001\022\241\001"
  "\n\026RejectArmAuthorization\022\?.mavsdk.rpc.ar"
  "m_authorizer_server.RejectArmAuthorizati"
  "onRequest\032@.mavsdk.rpc.arm_authorizer_se"
  "rver.RejectArmAuthorizationResponse\"\004\200\265\030"
  "\001B4\n\030io.mavsdk.arm_authorizerB\030ArmAuthor"
  "izerServerProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto = {
    false, false, 1663, descriptor_table_protodef_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto,
    "arm_authorizer_server/arm_authorizer_server.proto",
    &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once, descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto::offsets,
    file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto, file_level_enum_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto,
    file_level_service_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter() {
  return &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto(&descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace arm_authorizer_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmAuthorizerServerResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto);
  return file_level_enum_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[0];
}
bool ArmAuthorizerServerResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ArmAuthorizerServerResult_Result ArmAuthorizerServerResult::RESULT_UNKNOWN;
constexpr ArmAuthorizerServerResult_Result ArmAuthorizerServerResult::RESULT_SUCCESS;
constexpr ArmAuthorizerServerResult_Result ArmAuthorizerServerResult::RESULT_FAILED;
constexpr ArmAuthorizerServerResult_Result ArmAuthorizerServerResult::Result_MIN;
constexpr ArmAuthorizerServerResult_Result ArmAuthorizerServerResult::Result_MAX;
constexpr int ArmAuthorizerServerResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RejectionReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto);
  return file_level_enum_descriptors_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[1];
}
bool RejectionReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SubscribeArmAuthorizationRequest::_Internal {
 public:
};

SubscribeArmAuthorizationRequest::SubscribeArmAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest)
}
SubscribeArmAuthorizationRequest::SubscribeArmAuthorizationRequest(const SubscribeArmAuthorizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeArmAuthorizationRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeArmAuthorizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeArmAuthorizationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeArmAuthorizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[0]);
}

// ===================================================================

class ArmAuthorizationResponse::_Internal {
 public:
};

ArmAuthorizationResponse::ArmAuthorizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
}
ArmAuthorizationResponse::ArmAuthorizationResponse(const ArmAuthorizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArmAuthorizationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.system_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.system_id_ = from._impl_.system_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
}

inline void ArmAuthorizationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.system_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ArmAuthorizationResponse::~ArmAuthorizationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArmAuthorizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArmAuthorizationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArmAuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArmAuthorizationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 system_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.system_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArmAuthorizationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 system_id = 1;
  if (this->_internal_system_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_system_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  return target;
}

size_t ArmAuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 system_id = 1;
  if (this->_internal_system_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_system_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArmAuthorizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArmAuthorizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArmAuthorizationResponse::GetClassData() const { return &_class_data_; }


void ArmAuthorizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArmAuthorizationResponse*>(&to_msg);
  auto& from = static_cast<const ArmAuthorizationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_system_id() != 0) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArmAuthorizationResponse::CopyFrom(const ArmAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmAuthorizationResponse::IsInitialized() const {
  return true;
}

void ArmAuthorizationResponse::InternalSwap(ArmAuthorizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.system_id_, other->_impl_.system_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmAuthorizationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[1]);
}

// ===================================================================

class AcceptArmAuthorizationRequest::_Internal {
 public:
};

AcceptArmAuthorizationRequest::AcceptArmAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
}
AcceptArmAuthorizationRequest::AcceptArmAuthorizationRequest(const AcceptArmAuthorizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptArmAuthorizationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valid_time_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.valid_time_s_ = from._impl_.valid_time_s_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
}

inline void AcceptArmAuthorizationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valid_time_s_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcceptArmAuthorizationRequest::~AcceptArmAuthorizationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptArmAuthorizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AcceptArmAuthorizationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptArmAuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valid_time_s_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptArmAuthorizationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 valid_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.valid_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptArmAuthorizationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 valid_time_s = 1;
  if (this->_internal_valid_time_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_valid_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  return target;
}

size_t AcceptArmAuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 valid_time_s = 1;
  if (this->_internal_valid_time_s() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_valid_time_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptArmAuthorizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptArmAuthorizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptArmAuthorizationRequest::GetClassData() const { return &_class_data_; }


void AcceptArmAuthorizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptArmAuthorizationRequest*>(&to_msg);
  auto& from = static_cast<const AcceptArmAuthorizationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_valid_time_s() != 0) {
    _this->_internal_set_valid_time_s(from._internal_valid_time_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptArmAuthorizationRequest::CopyFrom(const AcceptArmAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptArmAuthorizationRequest::IsInitialized() const {
  return true;
}

void AcceptArmAuthorizationRequest::InternalSwap(AcceptArmAuthorizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.valid_time_s_, other->_impl_.valid_time_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptArmAuthorizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[2]);
}

// ===================================================================

class AcceptArmAuthorizationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult& arm_authorizer_server_result(const AcceptArmAuthorizationResponse* msg);
};

const ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult&
AcceptArmAuthorizationResponse::_Internal::arm_authorizer_server_result(const AcceptArmAuthorizationResponse* msg) {
  return *msg->_impl_.arm_authorizer_server_result_;
}
AcceptArmAuthorizationResponse::AcceptArmAuthorizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
}
AcceptArmAuthorizationResponse::AcceptArmAuthorizationResponse(const AcceptArmAuthorizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptArmAuthorizationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arm_authorizer_server_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arm_authorizer_server_result()) {
    _this->_impl_.arm_authorizer_server_result_ = new ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult(*from._impl_.arm_authorizer_server_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
}

inline void AcceptArmAuthorizationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arm_authorizer_server_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcceptArmAuthorizationResponse::~AcceptArmAuthorizationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptArmAuthorizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.arm_authorizer_server_result_;
}

void AcceptArmAuthorizationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptArmAuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.arm_authorizer_server_result_ != nullptr) {
    delete _impl_.arm_authorizer_server_result_;
  }
  _impl_.arm_authorizer_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptArmAuthorizationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arm_authorizer_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptArmAuthorizationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
  if (this->_internal_has_arm_authorizer_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::arm_authorizer_server_result(this),
        _Internal::arm_authorizer_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  return target;
}

size_t AcceptArmAuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
  if (this->_internal_has_arm_authorizer_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arm_authorizer_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptArmAuthorizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptArmAuthorizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptArmAuthorizationResponse::GetClassData() const { return &_class_data_; }


void AcceptArmAuthorizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptArmAuthorizationResponse*>(&to_msg);
  auto& from = static_cast<const AcceptArmAuthorizationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_arm_authorizer_server_result()) {
    _this->_internal_mutable_arm_authorizer_server_result()->::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult::MergeFrom(
        from._internal_arm_authorizer_server_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptArmAuthorizationResponse::CopyFrom(const AcceptArmAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptArmAuthorizationResponse::IsInitialized() const {
  return true;
}

void AcceptArmAuthorizationResponse::InternalSwap(AcceptArmAuthorizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.arm_authorizer_server_result_, other->_impl_.arm_authorizer_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptArmAuthorizationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[3]);
}

// ===================================================================

class RejectArmAuthorizationRequest::_Internal {
 public:
};

RejectArmAuthorizationRequest::RejectArmAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
}
RejectArmAuthorizationRequest::RejectArmAuthorizationRequest(const RejectArmAuthorizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RejectArmAuthorizationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.temporarily_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.extra_info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.temporarily_, &from._impl_.temporarily_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extra_info_) -
    reinterpret_cast<char*>(&_impl_.temporarily_)) + sizeof(_impl_.extra_info_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
}

inline void RejectArmAuthorizationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.temporarily_){false}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.extra_info_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RejectArmAuthorizationRequest::~RejectArmAuthorizationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RejectArmAuthorizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RejectArmAuthorizationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RejectArmAuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.temporarily_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.extra_info_) -
      reinterpret_cast<char*>(&_impl_.temporarily_)) + sizeof(_impl_.extra_info_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejectArmAuthorizationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool temporarily = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.temporarily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::mavsdk::rpc::arm_authorizer_server::RejectionReason>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 extra_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.extra_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejectArmAuthorizationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool temporarily = 1;
  if (this->_internal_temporarily() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_temporarily(), target);
  }

  // .mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // int32 extra_info = 3;
  if (this->_internal_extra_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_extra_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  return target;
}

size_t RejectArmAuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool temporarily = 1;
  if (this->_internal_temporarily() != 0) {
    total_size += 1 + 1;
  }

  // .mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // int32 extra_info = 3;
  if (this->_internal_extra_info() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extra_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejectArmAuthorizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RejectArmAuthorizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejectArmAuthorizationRequest::GetClassData() const { return &_class_data_; }


void RejectArmAuthorizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RejectArmAuthorizationRequest*>(&to_msg);
  auto& from = static_cast<const RejectArmAuthorizationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_temporarily() != 0) {
    _this->_internal_set_temporarily(from._internal_temporarily());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_extra_info() != 0) {
    _this->_internal_set_extra_info(from._internal_extra_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejectArmAuthorizationRequest::CopyFrom(const RejectArmAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectArmAuthorizationRequest::IsInitialized() const {
  return true;
}

void RejectArmAuthorizationRequest::InternalSwap(RejectArmAuthorizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejectArmAuthorizationRequest, _impl_.extra_info_)
      + sizeof(RejectArmAuthorizationRequest::_impl_.extra_info_)
      - PROTOBUF_FIELD_OFFSET(RejectArmAuthorizationRequest, _impl_.temporarily_)>(
          reinterpret_cast<char*>(&_impl_.temporarily_),
          reinterpret_cast<char*>(&other->_impl_.temporarily_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RejectArmAuthorizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[4]);
}

// ===================================================================

class RejectArmAuthorizationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult& arm_authorizer_server_result(const RejectArmAuthorizationResponse* msg);
};

const ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult&
RejectArmAuthorizationResponse::_Internal::arm_authorizer_server_result(const RejectArmAuthorizationResponse* msg) {
  return *msg->_impl_.arm_authorizer_server_result_;
}
RejectArmAuthorizationResponse::RejectArmAuthorizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
}
RejectArmAuthorizationResponse::RejectArmAuthorizationResponse(const RejectArmAuthorizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RejectArmAuthorizationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arm_authorizer_server_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arm_authorizer_server_result()) {
    _this->_impl_.arm_authorizer_server_result_ = new ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult(*from._impl_.arm_authorizer_server_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
}

inline void RejectArmAuthorizationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arm_authorizer_server_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RejectArmAuthorizationResponse::~RejectArmAuthorizationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RejectArmAuthorizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.arm_authorizer_server_result_;
}

void RejectArmAuthorizationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RejectArmAuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.arm_authorizer_server_result_ != nullptr) {
    delete _impl_.arm_authorizer_server_result_;
  }
  _impl_.arm_authorizer_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejectArmAuthorizationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arm_authorizer_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejectArmAuthorizationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
  if (this->_internal_has_arm_authorizer_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::arm_authorizer_server_result(this),
        _Internal::arm_authorizer_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  return target;
}

size_t RejectArmAuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
  if (this->_internal_has_arm_authorizer_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arm_authorizer_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejectArmAuthorizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RejectArmAuthorizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejectArmAuthorizationResponse::GetClassData() const { return &_class_data_; }


void RejectArmAuthorizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RejectArmAuthorizationResponse*>(&to_msg);
  auto& from = static_cast<const RejectArmAuthorizationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_arm_authorizer_server_result()) {
    _this->_internal_mutable_arm_authorizer_server_result()->::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult::MergeFrom(
        from._internal_arm_authorizer_server_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejectArmAuthorizationResponse::CopyFrom(const RejectArmAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectArmAuthorizationResponse::IsInitialized() const {
  return true;
}

void RejectArmAuthorizationResponse::InternalSwap(RejectArmAuthorizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.arm_authorizer_server_result_, other->_impl_.arm_authorizer_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RejectArmAuthorizationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[5]);
}

// ===================================================================

class ArmAuthorizerServerResult::_Internal {
 public:
};

ArmAuthorizerServerResult::ArmAuthorizerServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
}
ArmAuthorizerServerResult::ArmAuthorizerServerResult(const ArmAuthorizerServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArmAuthorizerServerResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
}

inline void ArmAuthorizerServerResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArmAuthorizerServerResult::~ArmAuthorizerServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArmAuthorizerServerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void ArmAuthorizerServerResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArmAuthorizerServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArmAuthorizerServerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArmAuthorizerServerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  return target;
}

size_t ArmAuthorizerServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArmAuthorizerServerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArmAuthorizerServerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArmAuthorizerServerResult::GetClassData() const { return &_class_data_; }


void ArmAuthorizerServerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArmAuthorizerServerResult*>(&to_msg);
  auto& from = static_cast<const ArmAuthorizerServerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArmAuthorizerServerResult::CopyFrom(const ArmAuthorizerServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmAuthorizerServerResult::IsInitialized() const {
  return true;
}

void ArmAuthorizerServerResult::InternalSwap(ArmAuthorizerServerResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_str_, lhs_arena,
      &other->_impl_.result_str_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmAuthorizerServerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_getter, &descriptor_table_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto_once,
      file_level_metadata_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace arm_authorizer_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::SubscribeArmAuthorizationRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::SubscribeArmAuthorizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::SubscribeArmAuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::AcceptArmAuthorizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::RejectArmAuthorizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::arm_authorizer_server::ArmAuthorizerServerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
