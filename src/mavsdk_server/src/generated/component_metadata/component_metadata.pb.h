// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component_metadata/component_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_5fmetadata_2fcomponent_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_5fmetadata_2fcomponent_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_5fmetadata_2fcomponent_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
namespace mavsdk {
namespace rpc {
namespace component_metadata {
class ComponentMetadataResult;
struct ComponentMetadataResultDefaultTypeInternal;
extern ComponentMetadataResultDefaultTypeInternal _ComponentMetadataResult_default_instance_;
class GetMetadataRequest;
struct GetMetadataRequestDefaultTypeInternal;
extern GetMetadataRequestDefaultTypeInternal _GetMetadataRequest_default_instance_;
class GetMetadataResponse;
struct GetMetadataResponseDefaultTypeInternal;
extern GetMetadataResponseDefaultTypeInternal _GetMetadataResponse_default_instance_;
class MetadataAvailableResponse;
struct MetadataAvailableResponseDefaultTypeInternal;
extern MetadataAvailableResponseDefaultTypeInternal _MetadataAvailableResponse_default_instance_;
class MetadataData;
struct MetadataDataDefaultTypeInternal;
extern MetadataDataDefaultTypeInternal _MetadataData_default_instance_;
class MetadataUpdate;
struct MetadataUpdateDefaultTypeInternal;
extern MetadataUpdateDefaultTypeInternal _MetadataUpdate_default_instance_;
class RequestAutopilotComponentRequest;
struct RequestAutopilotComponentRequestDefaultTypeInternal;
extern RequestAutopilotComponentRequestDefaultTypeInternal _RequestAutopilotComponentRequest_default_instance_;
class RequestAutopilotComponentResponse;
struct RequestAutopilotComponentResponseDefaultTypeInternal;
extern RequestAutopilotComponentResponseDefaultTypeInternal _RequestAutopilotComponentResponse_default_instance_;
class RequestComponentRequest;
struct RequestComponentRequestDefaultTypeInternal;
extern RequestComponentRequestDefaultTypeInternal _RequestComponentRequest_default_instance_;
class RequestComponentResponse;
struct RequestComponentResponseDefaultTypeInternal;
extern RequestComponentResponseDefaultTypeInternal _RequestComponentResponse_default_instance_;
class SubscribeMetadataAvailableRequest;
struct SubscribeMetadataAvailableRequestDefaultTypeInternal;
extern SubscribeMetadataAvailableRequestDefaultTypeInternal _SubscribeMetadataAvailableRequest_default_instance_;
}  // namespace component_metadata
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::component_metadata::ComponentMetadataResult* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::ComponentMetadataResult>(Arena*);
template<> ::mavsdk::rpc::component_metadata::GetMetadataRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::GetMetadataRequest>(Arena*);
template<> ::mavsdk::rpc::component_metadata::GetMetadataResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::GetMetadataResponse>(Arena*);
template<> ::mavsdk::rpc::component_metadata::MetadataAvailableResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::MetadataAvailableResponse>(Arena*);
template<> ::mavsdk::rpc::component_metadata::MetadataData* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::MetadataData>(Arena*);
template<> ::mavsdk::rpc::component_metadata::MetadataUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::MetadataUpdate>(Arena*);
template<> ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest>(Arena*);
template<> ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>(Arena*);
template<> ::mavsdk::rpc::component_metadata::RequestComponentRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::RequestComponentRequest>(Arena*);
template<> ::mavsdk::rpc::component_metadata::RequestComponentResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::RequestComponentResponse>(Arena*);
template<> ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace component_metadata {

enum ComponentMetadataResult_Result : int {
  ComponentMetadataResult_Result_RESULT_SUCCESS = 0,
  ComponentMetadataResult_Result_RESULT_NOT_AVAILABLE = 1,
  ComponentMetadataResult_Result_RESULT_CONNECTION_ERROR = 2,
  ComponentMetadataResult_Result_RESULT_UNSUPPORTED = 3,
  ComponentMetadataResult_Result_RESULT_DENIED = 4,
  ComponentMetadataResult_Result_RESULT_FAILED = 5,
  ComponentMetadataResult_Result_RESULT_TIMEOUT = 6,
  ComponentMetadataResult_Result_RESULT_NO_SYSTEM = 7,
  ComponentMetadataResult_Result_RESULT_NOT_REQUESTED = 8,
  ComponentMetadataResult_Result_ComponentMetadataResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ComponentMetadataResult_Result_ComponentMetadataResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ComponentMetadataResult_Result_IsValid(int value);
constexpr ComponentMetadataResult_Result ComponentMetadataResult_Result_Result_MIN = ComponentMetadataResult_Result_RESULT_SUCCESS;
constexpr ComponentMetadataResult_Result ComponentMetadataResult_Result_Result_MAX = ComponentMetadataResult_Result_RESULT_NOT_REQUESTED;
constexpr int ComponentMetadataResult_Result_Result_ARRAYSIZE = ComponentMetadataResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentMetadataResult_Result_descriptor();
template<typename T>
inline const std::string& ComponentMetadataResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentMetadataResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentMetadataResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentMetadataResult_Result_descriptor(), enum_t_value);
}
inline bool ComponentMetadataResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentMetadataResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentMetadataResult_Result>(
    ComponentMetadataResult_Result_descriptor(), name, value);
}
enum MetadataType : int {
  METADATA_TYPE_ALL_COMPLETED = 0,
  METADATA_TYPE_PARAMETER = 1,
  METADATA_TYPE_EVENTS = 2,
  METADATA_TYPE_ACTUATORS = 3,
  MetadataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetadataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetadataType_IsValid(int value);
constexpr MetadataType MetadataType_MIN = METADATA_TYPE_ALL_COMPLETED;
constexpr MetadataType MetadataType_MAX = METADATA_TYPE_ACTUATORS;
constexpr int MetadataType_ARRAYSIZE = MetadataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataType_descriptor();
template<typename T>
inline const std::string& MetadataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetadataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetadataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetadataType_descriptor(), enum_t_value);
}
inline bool MetadataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetadataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetadataType>(
    MetadataType_descriptor(), name, value);
}
// ===================================================================

class RequestComponentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.RequestComponentRequest) */ {
 public:
  inline RequestComponentRequest() : RequestComponentRequest(nullptr) {}
  ~RequestComponentRequest() override;
  explicit PROTOBUF_CONSTEXPR RequestComponentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestComponentRequest(const RequestComponentRequest& from);
  RequestComponentRequest(RequestComponentRequest&& from) noexcept
    : RequestComponentRequest() {
    *this = ::std::move(from);
  }

  inline RequestComponentRequest& operator=(const RequestComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestComponentRequest& operator=(RequestComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestComponentRequest* internal_default_instance() {
    return reinterpret_cast<const RequestComponentRequest*>(
               &_RequestComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestComponentRequest& a, RequestComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestComponentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestComponentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestComponentRequest& from) {
    RequestComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestComponentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.RequestComponentRequest";
  }
  protected:
  explicit RequestComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompidFieldNumber = 1,
  };
  // uint32 compid = 1;
  void clear_compid();
  uint32_t compid() const;
  void set_compid(uint32_t value);
  private:
  uint32_t _internal_compid() const;
  void _internal_set_compid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.RequestComponentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t compid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class RequestComponentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.RequestComponentResponse) */ {
 public:
  inline RequestComponentResponse() : RequestComponentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestComponentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestComponentResponse(const RequestComponentResponse& from);
  RequestComponentResponse(RequestComponentResponse&& from) noexcept
    : RequestComponentResponse() {
    *this = ::std::move(from);
  }

  inline RequestComponentResponse& operator=(const RequestComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestComponentResponse& operator=(RequestComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestComponentResponse* internal_default_instance() {
    return reinterpret_cast<const RequestComponentResponse*>(
               &_RequestComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestComponentResponse& a, RequestComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestComponentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestComponentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestComponentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestComponentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestComponentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.RequestComponentResponse";
  }
  protected:
  explicit RequestComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.RequestComponentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class GetMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.GetMetadataRequest) */ {
 public:
  inline GetMetadataRequest() : GetMetadataRequest(nullptr) {}
  ~GetMetadataRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetadataRequest(const GetMetadataRequest& from);
  GetMetadataRequest(GetMetadataRequest&& from) noexcept
    : GetMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetMetadataRequest& operator=(const GetMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetadataRequest& operator=(GetMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetadataRequest*>(
               &_GetMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMetadataRequest& a, GetMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMetadataRequest& from) {
    GetMetadataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.GetMetadataRequest";
  }
  protected:
  explicit GetMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompidFieldNumber = 1,
    kMetadataTypeFieldNumber = 2,
  };
  // uint32 compid = 1;
  void clear_compid();
  uint32_t compid() const;
  void set_compid(uint32_t value);
  private:
  uint32_t _internal_compid() const;
  void _internal_set_compid(uint32_t value);
  public:

  // .mavsdk.rpc.component_metadata.MetadataType metadata_type = 2;
  void clear_metadata_type();
  ::mavsdk::rpc::component_metadata::MetadataType metadata_type() const;
  void set_metadata_type(::mavsdk::rpc::component_metadata::MetadataType value);
  private:
  ::mavsdk::rpc::component_metadata::MetadataType _internal_metadata_type() const;
  void _internal_set_metadata_type(::mavsdk::rpc::component_metadata::MetadataType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.GetMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t compid_;
    int metadata_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class GetMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.GetMetadataResponse) */ {
 public:
  inline GetMetadataResponse() : GetMetadataResponse(nullptr) {}
  ~GetMetadataResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetadataResponse(const GetMetadataResponse& from);
  GetMetadataResponse(GetMetadataResponse&& from) noexcept
    : GetMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetMetadataResponse& operator=(const GetMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetadataResponse& operator=(GetMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetadataResponse*>(
               &_GetMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetMetadataResponse& a, GetMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMetadataResponse& from) {
    GetMetadataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.GetMetadataResponse";
  }
  protected:
  explicit GetMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentMetadataResultFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .mavsdk.rpc.component_metadata.ComponentMetadataResult component_metadata_result = 1;
  bool has_component_metadata_result() const;
  private:
  bool _internal_has_component_metadata_result() const;
  public:
  void clear_component_metadata_result();
  const ::mavsdk::rpc::component_metadata::ComponentMetadataResult& component_metadata_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::component_metadata::ComponentMetadataResult* release_component_metadata_result();
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* mutable_component_metadata_result();
  void set_allocated_component_metadata_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult* component_metadata_result);
  private:
  const ::mavsdk::rpc::component_metadata::ComponentMetadataResult& _internal_component_metadata_result() const;
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* _internal_mutable_component_metadata_result();
  public:
  void unsafe_arena_set_allocated_component_metadata_result(
      ::mavsdk::rpc::component_metadata::ComponentMetadataResult* component_metadata_result);
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* unsafe_arena_release_component_metadata_result();

  // .mavsdk.rpc.component_metadata.MetadataData response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::mavsdk::rpc::component_metadata::MetadataData& response() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::component_metadata::MetadataData* release_response();
  ::mavsdk::rpc::component_metadata::MetadataData* mutable_response();
  void set_allocated_response(::mavsdk::rpc::component_metadata::MetadataData* response);
  private:
  const ::mavsdk::rpc::component_metadata::MetadataData& _internal_response() const;
  ::mavsdk::rpc::component_metadata::MetadataData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::mavsdk::rpc::component_metadata::MetadataData* response);
  ::mavsdk::rpc::component_metadata::MetadataData* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.GetMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::component_metadata::ComponentMetadataResult* component_metadata_result_;
    ::mavsdk::rpc::component_metadata::MetadataData* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class MetadataData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.MetadataData) */ {
 public:
  inline MetadataData() : MetadataData(nullptr) {}
  ~MetadataData() override;
  explicit PROTOBUF_CONSTEXPR MetadataData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataData(const MetadataData& from);
  MetadataData(MetadataData&& from) noexcept
    : MetadataData() {
    *this = ::std::move(from);
  }

  inline MetadataData& operator=(const MetadataData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataData& operator=(MetadataData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataData* internal_default_instance() {
    return reinterpret_cast<const MetadataData*>(
               &_MetadataData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MetadataData& a, MetadataData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetadataData& from) {
    MetadataData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.MetadataData";
  }
  protected:
  explicit MetadataData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonMetadataFieldNumber = 1,
  };
  // string json_metadata = 1;
  void clear_json_metadata();
  const std::string& json_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_metadata();
  PROTOBUF_NODISCARD std::string* release_json_metadata();
  void set_allocated_json_metadata(std::string* json_metadata);
  private:
  const std::string& _internal_json_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_metadata(const std::string& value);
  std::string* _internal_mutable_json_metadata();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.MetadataData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ComponentMetadataResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.ComponentMetadataResult) */ {
 public:
  inline ComponentMetadataResult() : ComponentMetadataResult(nullptr) {}
  ~ComponentMetadataResult() override;
  explicit PROTOBUF_CONSTEXPR ComponentMetadataResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentMetadataResult(const ComponentMetadataResult& from);
  ComponentMetadataResult(ComponentMetadataResult&& from) noexcept
    : ComponentMetadataResult() {
    *this = ::std::move(from);
  }

  inline ComponentMetadataResult& operator=(const ComponentMetadataResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentMetadataResult& operator=(ComponentMetadataResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentMetadataResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentMetadataResult* internal_default_instance() {
    return reinterpret_cast<const ComponentMetadataResult*>(
               &_ComponentMetadataResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComponentMetadataResult& a, ComponentMetadataResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentMetadataResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentMetadataResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentMetadataResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentMetadataResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentMetadataResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentMetadataResult& from) {
    ComponentMetadataResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentMetadataResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.ComponentMetadataResult";
  }
  protected:
  explicit ComponentMetadataResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentMetadataResult_Result Result;
  static constexpr Result RESULT_SUCCESS =
    ComponentMetadataResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NOT_AVAILABLE =
    ComponentMetadataResult_Result_RESULT_NOT_AVAILABLE;
  static constexpr Result RESULT_CONNECTION_ERROR =
    ComponentMetadataResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    ComponentMetadataResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_DENIED =
    ComponentMetadataResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_FAILED =
    ComponentMetadataResult_Result_RESULT_FAILED;
  static constexpr Result RESULT_TIMEOUT =
    ComponentMetadataResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_NO_SYSTEM =
    ComponentMetadataResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_NOT_REQUESTED =
    ComponentMetadataResult_Result_RESULT_NOT_REQUESTED;
  static inline bool Result_IsValid(int value) {
    return ComponentMetadataResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ComponentMetadataResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ComponentMetadataResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ComponentMetadataResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ComponentMetadataResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ComponentMetadataResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ComponentMetadataResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.component_metadata.ComponentMetadataResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result result() const;
  void set_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result value);
  private:
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.ComponentMetadataResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class RequestAutopilotComponentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest) */ {
 public:
  inline RequestAutopilotComponentRequest() : RequestAutopilotComponentRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestAutopilotComponentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAutopilotComponentRequest(const RequestAutopilotComponentRequest& from);
  RequestAutopilotComponentRequest(RequestAutopilotComponentRequest&& from) noexcept
    : RequestAutopilotComponentRequest() {
    *this = ::std::move(from);
  }

  inline RequestAutopilotComponentRequest& operator=(const RequestAutopilotComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAutopilotComponentRequest& operator=(RequestAutopilotComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAutopilotComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAutopilotComponentRequest* internal_default_instance() {
    return reinterpret_cast<const RequestAutopilotComponentRequest*>(
               &_RequestAutopilotComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestAutopilotComponentRequest& a, RequestAutopilotComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAutopilotComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAutopilotComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAutopilotComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAutopilotComponentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestAutopilotComponentRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestAutopilotComponentRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest";
  }
  protected:
  explicit RequestAutopilotComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class RequestAutopilotComponentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse) */ {
 public:
  inline RequestAutopilotComponentResponse() : RequestAutopilotComponentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestAutopilotComponentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAutopilotComponentResponse(const RequestAutopilotComponentResponse& from);
  RequestAutopilotComponentResponse(RequestAutopilotComponentResponse&& from) noexcept
    : RequestAutopilotComponentResponse() {
    *this = ::std::move(from);
  }

  inline RequestAutopilotComponentResponse& operator=(const RequestAutopilotComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAutopilotComponentResponse& operator=(RequestAutopilotComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAutopilotComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAutopilotComponentResponse* internal_default_instance() {
    return reinterpret_cast<const RequestAutopilotComponentResponse*>(
               &_RequestAutopilotComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestAutopilotComponentResponse& a, RequestAutopilotComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAutopilotComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAutopilotComponentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAutopilotComponentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAutopilotComponentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestAutopilotComponentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestAutopilotComponentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse";
  }
  protected:
  explicit RequestAutopilotComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMetadataAvailableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest) */ {
 public:
  inline SubscribeMetadataAvailableRequest() : SubscribeMetadataAvailableRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeMetadataAvailableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeMetadataAvailableRequest(const SubscribeMetadataAvailableRequest& from);
  SubscribeMetadataAvailableRequest(SubscribeMetadataAvailableRequest&& from) noexcept
    : SubscribeMetadataAvailableRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMetadataAvailableRequest& operator=(const SubscribeMetadataAvailableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMetadataAvailableRequest& operator=(SubscribeMetadataAvailableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeMetadataAvailableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeMetadataAvailableRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMetadataAvailableRequest*>(
               &_SubscribeMetadataAvailableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeMetadataAvailableRequest& a, SubscribeMetadataAvailableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMetadataAvailableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMetadataAvailableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeMetadataAvailableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeMetadataAvailableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeMetadataAvailableRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeMetadataAvailableRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest";
  }
  protected:
  explicit SubscribeMetadataAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class MetadataAvailableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.MetadataAvailableResponse) */ {
 public:
  inline MetadataAvailableResponse() : MetadataAvailableResponse(nullptr) {}
  ~MetadataAvailableResponse() override;
  explicit PROTOBUF_CONSTEXPR MetadataAvailableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataAvailableResponse(const MetadataAvailableResponse& from);
  MetadataAvailableResponse(MetadataAvailableResponse&& from) noexcept
    : MetadataAvailableResponse() {
    *this = ::std::move(from);
  }

  inline MetadataAvailableResponse& operator=(const MetadataAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataAvailableResponse& operator=(MetadataAvailableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataAvailableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataAvailableResponse* internal_default_instance() {
    return reinterpret_cast<const MetadataAvailableResponse*>(
               &_MetadataAvailableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MetadataAvailableResponse& a, MetadataAvailableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataAvailableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataAvailableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataAvailableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataAvailableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataAvailableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetadataAvailableResponse& from) {
    MetadataAvailableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataAvailableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.MetadataAvailableResponse";
  }
  protected:
  explicit MetadataAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .mavsdk.rpc.component_metadata.MetadataUpdate data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::mavsdk::rpc::component_metadata::MetadataUpdate& data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::component_metadata::MetadataUpdate* release_data();
  ::mavsdk::rpc::component_metadata::MetadataUpdate* mutable_data();
  void set_allocated_data(::mavsdk::rpc::component_metadata::MetadataUpdate* data);
  private:
  const ::mavsdk::rpc::component_metadata::MetadataUpdate& _internal_data() const;
  ::mavsdk::rpc::component_metadata::MetadataUpdate* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::mavsdk::rpc::component_metadata::MetadataUpdate* data);
  ::mavsdk::rpc::component_metadata::MetadataUpdate* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.MetadataAvailableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::component_metadata::MetadataUpdate* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class MetadataUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_metadata.MetadataUpdate) */ {
 public:
  inline MetadataUpdate() : MetadataUpdate(nullptr) {}
  ~MetadataUpdate() override;
  explicit PROTOBUF_CONSTEXPR MetadataUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataUpdate(const MetadataUpdate& from);
  MetadataUpdate(MetadataUpdate&& from) noexcept
    : MetadataUpdate() {
    *this = ::std::move(from);
  }

  inline MetadataUpdate& operator=(const MetadataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataUpdate& operator=(MetadataUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataUpdate* internal_default_instance() {
    return reinterpret_cast<const MetadataUpdate*>(
               &_MetadataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MetadataUpdate& a, MetadataUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetadataUpdate& from) {
    MetadataUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_metadata.MetadataUpdate";
  }
  protected:
  explicit MetadataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonMetadataFieldNumber = 3,
    kCompidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string json_metadata = 3;
  void clear_json_metadata();
  const std::string& json_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_metadata();
  PROTOBUF_NODISCARD std::string* release_json_metadata();
  void set_allocated_json_metadata(std::string* json_metadata);
  private:
  const std::string& _internal_json_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_metadata(const std::string& value);
  std::string* _internal_mutable_json_metadata();
  public:

  // uint32 compid = 1;
  void clear_compid();
  uint32_t compid() const;
  void set_compid(uint32_t value);
  private:
  uint32_t _internal_compid() const;
  void _internal_set_compid(uint32_t value);
  public:

  // .mavsdk.rpc.component_metadata.MetadataType type = 2;
  void clear_type();
  ::mavsdk::rpc::component_metadata::MetadataType type() const;
  void set_type(::mavsdk::rpc::component_metadata::MetadataType value);
  private:
  ::mavsdk::rpc::component_metadata::MetadataType _internal_type() const;
  void _internal_set_type(::mavsdk::rpc::component_metadata::MetadataType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_metadata.MetadataUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_metadata_;
    uint32_t compid_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_5fmetadata_2fcomponent_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestComponentRequest

// uint32 compid = 1;
inline void RequestComponentRequest::clear_compid() {
  _impl_.compid_ = 0u;
}
inline uint32_t RequestComponentRequest::_internal_compid() const {
  return _impl_.compid_;
}
inline uint32_t RequestComponentRequest::compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.RequestComponentRequest.compid)
  return _internal_compid();
}
inline void RequestComponentRequest::_internal_set_compid(uint32_t value) {
  
  _impl_.compid_ = value;
}
inline void RequestComponentRequest::set_compid(uint32_t value) {
  _internal_set_compid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.RequestComponentRequest.compid)
}

// -------------------------------------------------------------------

// RequestComponentResponse

// -------------------------------------------------------------------

// GetMetadataRequest

// uint32 compid = 1;
inline void GetMetadataRequest::clear_compid() {
  _impl_.compid_ = 0u;
}
inline uint32_t GetMetadataRequest::_internal_compid() const {
  return _impl_.compid_;
}
inline uint32_t GetMetadataRequest::compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.GetMetadataRequest.compid)
  return _internal_compid();
}
inline void GetMetadataRequest::_internal_set_compid(uint32_t value) {
  
  _impl_.compid_ = value;
}
inline void GetMetadataRequest::set_compid(uint32_t value) {
  _internal_set_compid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.GetMetadataRequest.compid)
}

// .mavsdk.rpc.component_metadata.MetadataType metadata_type = 2;
inline void GetMetadataRequest::clear_metadata_type() {
  _impl_.metadata_type_ = 0;
}
inline ::mavsdk::rpc::component_metadata::MetadataType GetMetadataRequest::_internal_metadata_type() const {
  return static_cast< ::mavsdk::rpc::component_metadata::MetadataType >(_impl_.metadata_type_);
}
inline ::mavsdk::rpc::component_metadata::MetadataType GetMetadataRequest::metadata_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.GetMetadataRequest.metadata_type)
  return _internal_metadata_type();
}
inline void GetMetadataRequest::_internal_set_metadata_type(::mavsdk::rpc::component_metadata::MetadataType value) {
  
  _impl_.metadata_type_ = value;
}
inline void GetMetadataRequest::set_metadata_type(::mavsdk::rpc::component_metadata::MetadataType value) {
  _internal_set_metadata_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.GetMetadataRequest.metadata_type)
}

// -------------------------------------------------------------------

// GetMetadataResponse

// .mavsdk.rpc.component_metadata.ComponentMetadataResult component_metadata_result = 1;
inline bool GetMetadataResponse::_internal_has_component_metadata_result() const {
  return this != internal_default_instance() && _impl_.component_metadata_result_ != nullptr;
}
inline bool GetMetadataResponse::has_component_metadata_result() const {
  return _internal_has_component_metadata_result();
}
inline void GetMetadataResponse::clear_component_metadata_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.component_metadata_result_ != nullptr) {
    delete _impl_.component_metadata_result_;
  }
  _impl_.component_metadata_result_ = nullptr;
}
inline const ::mavsdk::rpc::component_metadata::ComponentMetadataResult& GetMetadataResponse::_internal_component_metadata_result() const {
  const ::mavsdk::rpc::component_metadata::ComponentMetadataResult* p = _impl_.component_metadata_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_metadata::ComponentMetadataResult&>(
      ::mavsdk::rpc::component_metadata::_ComponentMetadataResult_default_instance_);
}
inline const ::mavsdk::rpc::component_metadata::ComponentMetadataResult& GetMetadataResponse::component_metadata_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.GetMetadataResponse.component_metadata_result)
  return _internal_component_metadata_result();
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_component_metadata_result(
    ::mavsdk::rpc::component_metadata::ComponentMetadataResult* component_metadata_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_metadata_result_);
  }
  _impl_.component_metadata_result_ = component_metadata_result;
  if (component_metadata_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_metadata.GetMetadataResponse.component_metadata_result)
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult* GetMetadataResponse::release_component_metadata_result() {
  
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* temp = _impl_.component_metadata_result_;
  _impl_.component_metadata_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult* GetMetadataResponse::unsafe_arena_release_component_metadata_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.GetMetadataResponse.component_metadata_result)
  
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* temp = _impl_.component_metadata_result_;
  _impl_.component_metadata_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult* GetMetadataResponse::_internal_mutable_component_metadata_result() {
  
  if (_impl_.component_metadata_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_metadata::ComponentMetadataResult>(GetArenaForAllocation());
    _impl_.component_metadata_result_ = p;
  }
  return _impl_.component_metadata_result_;
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult* GetMetadataResponse::mutable_component_metadata_result() {
  ::mavsdk::rpc::component_metadata::ComponentMetadataResult* _msg = _internal_mutable_component_metadata_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.GetMetadataResponse.component_metadata_result)
  return _msg;
}
inline void GetMetadataResponse::set_allocated_component_metadata_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult* component_metadata_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.component_metadata_result_;
  }
  if (component_metadata_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(component_metadata_result);
    if (message_arena != submessage_arena) {
      component_metadata_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_metadata_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.component_metadata_result_ = component_metadata_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.GetMetadataResponse.component_metadata_result)
}

// .mavsdk.rpc.component_metadata.MetadataData response = 2;
inline bool GetMetadataResponse::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool GetMetadataResponse::has_response() const {
  return _internal_has_response();
}
inline void GetMetadataResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::mavsdk::rpc::component_metadata::MetadataData& GetMetadataResponse::_internal_response() const {
  const ::mavsdk::rpc::component_metadata::MetadataData* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_metadata::MetadataData&>(
      ::mavsdk::rpc::component_metadata::_MetadataData_default_instance_);
}
inline const ::mavsdk::rpc::component_metadata::MetadataData& GetMetadataResponse::response() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.GetMetadataResponse.response)
  return _internal_response();
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_response(
    ::mavsdk::rpc::component_metadata::MetadataData* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_metadata.GetMetadataResponse.response)
}
inline ::mavsdk::rpc::component_metadata::MetadataData* GetMetadataResponse::release_response() {
  
  ::mavsdk::rpc::component_metadata::MetadataData* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_metadata::MetadataData* GetMetadataResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.GetMetadataResponse.response)
  
  ::mavsdk::rpc::component_metadata::MetadataData* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_metadata::MetadataData* GetMetadataResponse::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_metadata::MetadataData>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::mavsdk::rpc::component_metadata::MetadataData* GetMetadataResponse::mutable_response() {
  ::mavsdk::rpc::component_metadata::MetadataData* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.GetMetadataResponse.response)
  return _msg;
}
inline void GetMetadataResponse::set_allocated_response(::mavsdk::rpc::component_metadata::MetadataData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.GetMetadataResponse.response)
}

// -------------------------------------------------------------------

// MetadataData

// string json_metadata = 1;
inline void MetadataData::clear_json_metadata() {
  _impl_.json_metadata_.ClearToEmpty();
}
inline const std::string& MetadataData::json_metadata() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.MetadataData.json_metadata)
  return _internal_json_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetadataData::set_json_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.json_metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.MetadataData.json_metadata)
}
inline std::string* MetadataData::mutable_json_metadata() {
  std::string* _s = _internal_mutable_json_metadata();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.MetadataData.json_metadata)
  return _s;
}
inline const std::string& MetadataData::_internal_json_metadata() const {
  return _impl_.json_metadata_.Get();
}
inline void MetadataData::_internal_set_json_metadata(const std::string& value) {
  
  _impl_.json_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MetadataData::_internal_mutable_json_metadata() {
  
  return _impl_.json_metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* MetadataData::release_json_metadata() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.MetadataData.json_metadata)
  return _impl_.json_metadata_.Release();
}
inline void MetadataData::set_allocated_json_metadata(std::string* json_metadata) {
  if (json_metadata != nullptr) {
    
  } else {
    
  }
  _impl_.json_metadata_.SetAllocated(json_metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_metadata_.IsDefault()) {
    _impl_.json_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.MetadataData.json_metadata)
}

// -------------------------------------------------------------------

// ComponentMetadataResult

// .mavsdk.rpc.component_metadata.ComponentMetadataResult.Result result = 1;
inline void ComponentMetadataResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result ComponentMetadataResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result >(_impl_.result_);
}
inline ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result ComponentMetadataResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.ComponentMetadataResult.result)
  return _internal_result();
}
inline void ComponentMetadataResult::_internal_set_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result value) {
  
  _impl_.result_ = value;
}
inline void ComponentMetadataResult::set_result(::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.ComponentMetadataResult.result)
}

// string result_str = 2;
inline void ComponentMetadataResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& ComponentMetadataResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.ComponentMetadataResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentMetadataResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.ComponentMetadataResult.result_str)
}
inline std::string* ComponentMetadataResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.ComponentMetadataResult.result_str)
  return _s;
}
inline const std::string& ComponentMetadataResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void ComponentMetadataResult::_internal_set_result_str(const std::string& value) {
  
  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentMetadataResult::_internal_mutable_result_str() {
  
  return _impl_.result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentMetadataResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.ComponentMetadataResult.result_str)
  return _impl_.result_str_.Release();
}
inline void ComponentMetadataResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  _impl_.result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.ComponentMetadataResult.result_str)
}

// -------------------------------------------------------------------

// RequestAutopilotComponentRequest

// -------------------------------------------------------------------

// RequestAutopilotComponentResponse

// -------------------------------------------------------------------

// SubscribeMetadataAvailableRequest

// -------------------------------------------------------------------

// MetadataAvailableResponse

// .mavsdk.rpc.component_metadata.MetadataUpdate data = 1;
inline bool MetadataAvailableResponse::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool MetadataAvailableResponse::has_data() const {
  return _internal_has_data();
}
inline void MetadataAvailableResponse::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::mavsdk::rpc::component_metadata::MetadataUpdate& MetadataAvailableResponse::_internal_data() const {
  const ::mavsdk::rpc::component_metadata::MetadataUpdate* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_metadata::MetadataUpdate&>(
      ::mavsdk::rpc::component_metadata::_MetadataUpdate_default_instance_);
}
inline const ::mavsdk::rpc::component_metadata::MetadataUpdate& MetadataAvailableResponse::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.MetadataAvailableResponse.data)
  return _internal_data();
}
inline void MetadataAvailableResponse::unsafe_arena_set_allocated_data(
    ::mavsdk::rpc::component_metadata::MetadataUpdate* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_metadata.MetadataAvailableResponse.data)
}
inline ::mavsdk::rpc::component_metadata::MetadataUpdate* MetadataAvailableResponse::release_data() {
  
  ::mavsdk::rpc::component_metadata::MetadataUpdate* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_metadata::MetadataUpdate* MetadataAvailableResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.MetadataAvailableResponse.data)
  
  ::mavsdk::rpc::component_metadata::MetadataUpdate* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_metadata::MetadataUpdate* MetadataAvailableResponse::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_metadata::MetadataUpdate>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::mavsdk::rpc::component_metadata::MetadataUpdate* MetadataAvailableResponse::mutable_data() {
  ::mavsdk::rpc::component_metadata::MetadataUpdate* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.MetadataAvailableResponse.data)
  return _msg;
}
inline void MetadataAvailableResponse::set_allocated_data(::mavsdk::rpc::component_metadata::MetadataUpdate* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.MetadataAvailableResponse.data)
}

// -------------------------------------------------------------------

// MetadataUpdate

// uint32 compid = 1;
inline void MetadataUpdate::clear_compid() {
  _impl_.compid_ = 0u;
}
inline uint32_t MetadataUpdate::_internal_compid() const {
  return _impl_.compid_;
}
inline uint32_t MetadataUpdate::compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.MetadataUpdate.compid)
  return _internal_compid();
}
inline void MetadataUpdate::_internal_set_compid(uint32_t value) {
  
  _impl_.compid_ = value;
}
inline void MetadataUpdate::set_compid(uint32_t value) {
  _internal_set_compid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.MetadataUpdate.compid)
}

// .mavsdk.rpc.component_metadata.MetadataType type = 2;
inline void MetadataUpdate::clear_type() {
  _impl_.type_ = 0;
}
inline ::mavsdk::rpc::component_metadata::MetadataType MetadataUpdate::_internal_type() const {
  return static_cast< ::mavsdk::rpc::component_metadata::MetadataType >(_impl_.type_);
}
inline ::mavsdk::rpc::component_metadata::MetadataType MetadataUpdate::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.MetadataUpdate.type)
  return _internal_type();
}
inline void MetadataUpdate::_internal_set_type(::mavsdk::rpc::component_metadata::MetadataType value) {
  
  _impl_.type_ = value;
}
inline void MetadataUpdate::set_type(::mavsdk::rpc::component_metadata::MetadataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.MetadataUpdate.type)
}

// string json_metadata = 3;
inline void MetadataUpdate::clear_json_metadata() {
  _impl_.json_metadata_.ClearToEmpty();
}
inline const std::string& MetadataUpdate::json_metadata() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_metadata.MetadataUpdate.json_metadata)
  return _internal_json_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetadataUpdate::set_json_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.json_metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_metadata.MetadataUpdate.json_metadata)
}
inline std::string* MetadataUpdate::mutable_json_metadata() {
  std::string* _s = _internal_mutable_json_metadata();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_metadata.MetadataUpdate.json_metadata)
  return _s;
}
inline const std::string& MetadataUpdate::_internal_json_metadata() const {
  return _impl_.json_metadata_.Get();
}
inline void MetadataUpdate::_internal_set_json_metadata(const std::string& value) {
  
  _impl_.json_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MetadataUpdate::_internal_mutable_json_metadata() {
  
  return _impl_.json_metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* MetadataUpdate::release_json_metadata() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_metadata.MetadataUpdate.json_metadata)
  return _impl_.json_metadata_.Release();
}
inline void MetadataUpdate::set_allocated_json_metadata(std::string* json_metadata) {
  if (json_metadata != nullptr) {
    
  } else {
    
  }
  _impl_.json_metadata_.SetAllocated(json_metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_metadata_.IsDefault()) {
    _impl_.json_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_metadata.MetadataUpdate.json_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace component_metadata
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result>() {
  return ::mavsdk::rpc::component_metadata::ComponentMetadataResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::component_metadata::MetadataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::component_metadata::MetadataType>() {
  return ::mavsdk::rpc::component_metadata::MetadataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_5fmetadata_2fcomponent_5fmetadata_2eproto
