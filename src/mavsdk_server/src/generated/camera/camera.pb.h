// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera/camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_2fcamera_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_2fcamera_2eproto;
namespace mavsdk {
namespace rpc {
namespace camera {
class CameraList;
struct CameraListDefaultTypeInternal;
extern CameraListDefaultTypeInternal _CameraList_default_instance_;
class CameraListResponse;
struct CameraListResponseDefaultTypeInternal;
extern CameraListResponseDefaultTypeInternal _CameraListResponse_default_instance_;
class CameraResult;
struct CameraResultDefaultTypeInternal;
extern CameraResultDefaultTypeInternal _CameraResult_default_instance_;
class CaptureInfo;
struct CaptureInfoDefaultTypeInternal;
extern CaptureInfoDefaultTypeInternal _CaptureInfo_default_instance_;
class CaptureInfoResponse;
struct CaptureInfoResponseDefaultTypeInternal;
extern CaptureInfoResponseDefaultTypeInternal _CaptureInfoResponse_default_instance_;
class CurrentSettingsResponse;
struct CurrentSettingsResponseDefaultTypeInternal;
extern CurrentSettingsResponseDefaultTypeInternal _CurrentSettingsResponse_default_instance_;
class CurrentSettingsUpdate;
struct CurrentSettingsUpdateDefaultTypeInternal;
extern CurrentSettingsUpdateDefaultTypeInternal _CurrentSettingsUpdate_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class FocusInStartRequest;
struct FocusInStartRequestDefaultTypeInternal;
extern FocusInStartRequestDefaultTypeInternal _FocusInStartRequest_default_instance_;
class FocusInStartResponse;
struct FocusInStartResponseDefaultTypeInternal;
extern FocusInStartResponseDefaultTypeInternal _FocusInStartResponse_default_instance_;
class FocusOutStartRequest;
struct FocusOutStartRequestDefaultTypeInternal;
extern FocusOutStartRequestDefaultTypeInternal _FocusOutStartRequest_default_instance_;
class FocusOutStartResponse;
struct FocusOutStartResponseDefaultTypeInternal;
extern FocusOutStartResponseDefaultTypeInternal _FocusOutStartResponse_default_instance_;
class FocusRangeRequest;
struct FocusRangeRequestDefaultTypeInternal;
extern FocusRangeRequestDefaultTypeInternal _FocusRangeRequest_default_instance_;
class FocusRangeResponse;
struct FocusRangeResponseDefaultTypeInternal;
extern FocusRangeResponseDefaultTypeInternal _FocusRangeResponse_default_instance_;
class FocusStopRequest;
struct FocusStopRequestDefaultTypeInternal;
extern FocusStopRequestDefaultTypeInternal _FocusStopRequest_default_instance_;
class FocusStopResponse;
struct FocusStopResponseDefaultTypeInternal;
extern FocusStopResponseDefaultTypeInternal _FocusStopResponse_default_instance_;
class FormatStorageRequest;
struct FormatStorageRequestDefaultTypeInternal;
extern FormatStorageRequestDefaultTypeInternal _FormatStorageRequest_default_instance_;
class FormatStorageResponse;
struct FormatStorageResponseDefaultTypeInternal;
extern FormatStorageResponseDefaultTypeInternal _FormatStorageResponse_default_instance_;
class GetCurrentSettingsRequest;
struct GetCurrentSettingsRequestDefaultTypeInternal;
extern GetCurrentSettingsRequestDefaultTypeInternal _GetCurrentSettingsRequest_default_instance_;
class GetCurrentSettingsResponse;
struct GetCurrentSettingsResponseDefaultTypeInternal;
extern GetCurrentSettingsResponseDefaultTypeInternal _GetCurrentSettingsResponse_default_instance_;
class GetModeRequest;
struct GetModeRequestDefaultTypeInternal;
extern GetModeRequestDefaultTypeInternal _GetModeRequest_default_instance_;
class GetModeResponse;
struct GetModeResponseDefaultTypeInternal;
extern GetModeResponseDefaultTypeInternal _GetModeResponse_default_instance_;
class GetPossibleSettingOptionsRequest;
struct GetPossibleSettingOptionsRequestDefaultTypeInternal;
extern GetPossibleSettingOptionsRequestDefaultTypeInternal _GetPossibleSettingOptionsRequest_default_instance_;
class GetPossibleSettingOptionsResponse;
struct GetPossibleSettingOptionsResponseDefaultTypeInternal;
extern GetPossibleSettingOptionsResponseDefaultTypeInternal _GetPossibleSettingOptionsResponse_default_instance_;
class GetSettingRequest;
struct GetSettingRequestDefaultTypeInternal;
extern GetSettingRequestDefaultTypeInternal _GetSettingRequest_default_instance_;
class GetSettingResponse;
struct GetSettingResponseDefaultTypeInternal;
extern GetSettingResponseDefaultTypeInternal _GetSettingResponse_default_instance_;
class GetStorageRequest;
struct GetStorageRequestDefaultTypeInternal;
extern GetStorageRequestDefaultTypeInternal _GetStorageRequest_default_instance_;
class GetStorageResponse;
struct GetStorageResponseDefaultTypeInternal;
extern GetStorageResponseDefaultTypeInternal _GetStorageResponse_default_instance_;
class GetVideoStreamInfoRequest;
struct GetVideoStreamInfoRequestDefaultTypeInternal;
extern GetVideoStreamInfoRequestDefaultTypeInternal _GetVideoStreamInfoRequest_default_instance_;
class GetVideoStreamInfoResponse;
struct GetVideoStreamInfoResponseDefaultTypeInternal;
extern GetVideoStreamInfoResponseDefaultTypeInternal _GetVideoStreamInfoResponse_default_instance_;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class ListPhotosRequest;
struct ListPhotosRequestDefaultTypeInternal;
extern ListPhotosRequestDefaultTypeInternal _ListPhotosRequest_default_instance_;
class ListPhotosResponse;
struct ListPhotosResponseDefaultTypeInternal;
extern ListPhotosResponseDefaultTypeInternal _ListPhotosResponse_default_instance_;
class ModeResponse;
struct ModeResponseDefaultTypeInternal;
extern ModeResponseDefaultTypeInternal _ModeResponse_default_instance_;
class ModeUpdate;
struct ModeUpdateDefaultTypeInternal;
extern ModeUpdateDefaultTypeInternal _ModeUpdate_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PossibleSettingOptionsResponse;
struct PossibleSettingOptionsResponseDefaultTypeInternal;
extern PossibleSettingOptionsResponseDefaultTypeInternal _PossibleSettingOptionsResponse_default_instance_;
class PossibleSettingOptionsUpdate;
struct PossibleSettingOptionsUpdateDefaultTypeInternal;
extern PossibleSettingOptionsUpdateDefaultTypeInternal _PossibleSettingOptionsUpdate_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class ResetSettingsRequest;
struct ResetSettingsRequestDefaultTypeInternal;
extern ResetSettingsRequestDefaultTypeInternal _ResetSettingsRequest_default_instance_;
class ResetSettingsResponse;
struct ResetSettingsResponseDefaultTypeInternal;
extern ResetSettingsResponseDefaultTypeInternal _ResetSettingsResponse_default_instance_;
class SetModeRequest;
struct SetModeRequestDefaultTypeInternal;
extern SetModeRequestDefaultTypeInternal _SetModeRequest_default_instance_;
class SetModeResponse;
struct SetModeResponseDefaultTypeInternal;
extern SetModeResponseDefaultTypeInternal _SetModeResponse_default_instance_;
class SetSettingRequest;
struct SetSettingRequestDefaultTypeInternal;
extern SetSettingRequestDefaultTypeInternal _SetSettingRequest_default_instance_;
class SetSettingResponse;
struct SetSettingResponseDefaultTypeInternal;
extern SetSettingResponseDefaultTypeInternal _SetSettingResponse_default_instance_;
class Setting;
struct SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class SettingOptions;
struct SettingOptionsDefaultTypeInternal;
extern SettingOptionsDefaultTypeInternal _SettingOptions_default_instance_;
class StartPhotoIntervalRequest;
struct StartPhotoIntervalRequestDefaultTypeInternal;
extern StartPhotoIntervalRequestDefaultTypeInternal _StartPhotoIntervalRequest_default_instance_;
class StartPhotoIntervalResponse;
struct StartPhotoIntervalResponseDefaultTypeInternal;
extern StartPhotoIntervalResponseDefaultTypeInternal _StartPhotoIntervalResponse_default_instance_;
class StartVideoRequest;
struct StartVideoRequestDefaultTypeInternal;
extern StartVideoRequestDefaultTypeInternal _StartVideoRequest_default_instance_;
class StartVideoResponse;
struct StartVideoResponseDefaultTypeInternal;
extern StartVideoResponseDefaultTypeInternal _StartVideoResponse_default_instance_;
class StartVideoStreamingRequest;
struct StartVideoStreamingRequestDefaultTypeInternal;
extern StartVideoStreamingRequestDefaultTypeInternal _StartVideoStreamingRequest_default_instance_;
class StartVideoStreamingResponse;
struct StartVideoStreamingResponseDefaultTypeInternal;
extern StartVideoStreamingResponseDefaultTypeInternal _StartVideoStreamingResponse_default_instance_;
class StopPhotoIntervalRequest;
struct StopPhotoIntervalRequestDefaultTypeInternal;
extern StopPhotoIntervalRequestDefaultTypeInternal _StopPhotoIntervalRequest_default_instance_;
class StopPhotoIntervalResponse;
struct StopPhotoIntervalResponseDefaultTypeInternal;
extern StopPhotoIntervalResponseDefaultTypeInternal _StopPhotoIntervalResponse_default_instance_;
class StopVideoRequest;
struct StopVideoRequestDefaultTypeInternal;
extern StopVideoRequestDefaultTypeInternal _StopVideoRequest_default_instance_;
class StopVideoResponse;
struct StopVideoResponseDefaultTypeInternal;
extern StopVideoResponseDefaultTypeInternal _StopVideoResponse_default_instance_;
class StopVideoStreamingRequest;
struct StopVideoStreamingRequestDefaultTypeInternal;
extern StopVideoStreamingRequestDefaultTypeInternal _StopVideoStreamingRequest_default_instance_;
class StopVideoStreamingResponse;
struct StopVideoStreamingResponseDefaultTypeInternal;
extern StopVideoStreamingResponseDefaultTypeInternal _StopVideoStreamingResponse_default_instance_;
class Storage;
struct StorageDefaultTypeInternal;
extern StorageDefaultTypeInternal _Storage_default_instance_;
class StorageResponse;
struct StorageResponseDefaultTypeInternal;
extern StorageResponseDefaultTypeInternal _StorageResponse_default_instance_;
class StorageUpdate;
struct StorageUpdateDefaultTypeInternal;
extern StorageUpdateDefaultTypeInternal _StorageUpdate_default_instance_;
class SubscribeCameraListRequest;
struct SubscribeCameraListRequestDefaultTypeInternal;
extern SubscribeCameraListRequestDefaultTypeInternal _SubscribeCameraListRequest_default_instance_;
class SubscribeCaptureInfoRequest;
struct SubscribeCaptureInfoRequestDefaultTypeInternal;
extern SubscribeCaptureInfoRequestDefaultTypeInternal _SubscribeCaptureInfoRequest_default_instance_;
class SubscribeCurrentSettingsRequest;
struct SubscribeCurrentSettingsRequestDefaultTypeInternal;
extern SubscribeCurrentSettingsRequestDefaultTypeInternal _SubscribeCurrentSettingsRequest_default_instance_;
class SubscribeModeRequest;
struct SubscribeModeRequestDefaultTypeInternal;
extern SubscribeModeRequestDefaultTypeInternal _SubscribeModeRequest_default_instance_;
class SubscribePossibleSettingOptionsRequest;
struct SubscribePossibleSettingOptionsRequestDefaultTypeInternal;
extern SubscribePossibleSettingOptionsRequestDefaultTypeInternal _SubscribePossibleSettingOptionsRequest_default_instance_;
class SubscribeStorageRequest;
struct SubscribeStorageRequestDefaultTypeInternal;
extern SubscribeStorageRequestDefaultTypeInternal _SubscribeStorageRequest_default_instance_;
class SubscribeVideoStreamInfoRequest;
struct SubscribeVideoStreamInfoRequestDefaultTypeInternal;
extern SubscribeVideoStreamInfoRequestDefaultTypeInternal _SubscribeVideoStreamInfoRequest_default_instance_;
class TakePhotoRequest;
struct TakePhotoRequestDefaultTypeInternal;
extern TakePhotoRequestDefaultTypeInternal _TakePhotoRequest_default_instance_;
class TakePhotoResponse;
struct TakePhotoResponseDefaultTypeInternal;
extern TakePhotoResponseDefaultTypeInternal _TakePhotoResponse_default_instance_;
class TrackPointRequest;
struct TrackPointRequestDefaultTypeInternal;
extern TrackPointRequestDefaultTypeInternal _TrackPointRequest_default_instance_;
class TrackPointResponse;
struct TrackPointResponseDefaultTypeInternal;
extern TrackPointResponseDefaultTypeInternal _TrackPointResponse_default_instance_;
class TrackRectangleRequest;
struct TrackRectangleRequestDefaultTypeInternal;
extern TrackRectangleRequestDefaultTypeInternal _TrackRectangleRequest_default_instance_;
class TrackRectangleResponse;
struct TrackRectangleResponseDefaultTypeInternal;
extern TrackRectangleResponseDefaultTypeInternal _TrackRectangleResponse_default_instance_;
class TrackStopRequest;
struct TrackStopRequestDefaultTypeInternal;
extern TrackStopRequestDefaultTypeInternal _TrackStopRequest_default_instance_;
class TrackStopResponse;
struct TrackStopResponseDefaultTypeInternal;
extern TrackStopResponseDefaultTypeInternal _TrackStopResponse_default_instance_;
class VideoStreamInfo;
struct VideoStreamInfoDefaultTypeInternal;
extern VideoStreamInfoDefaultTypeInternal _VideoStreamInfo_default_instance_;
class VideoStreamInfoResponse;
struct VideoStreamInfoResponseDefaultTypeInternal;
extern VideoStreamInfoResponseDefaultTypeInternal _VideoStreamInfoResponse_default_instance_;
class VideoStreamSettings;
struct VideoStreamSettingsDefaultTypeInternal;
extern VideoStreamSettingsDefaultTypeInternal _VideoStreamSettings_default_instance_;
class VideoStreamUpdate;
struct VideoStreamUpdateDefaultTypeInternal;
extern VideoStreamUpdateDefaultTypeInternal _VideoStreamUpdate_default_instance_;
class ZoomInStartRequest;
struct ZoomInStartRequestDefaultTypeInternal;
extern ZoomInStartRequestDefaultTypeInternal _ZoomInStartRequest_default_instance_;
class ZoomInStartResponse;
struct ZoomInStartResponseDefaultTypeInternal;
extern ZoomInStartResponseDefaultTypeInternal _ZoomInStartResponse_default_instance_;
class ZoomOutStartRequest;
struct ZoomOutStartRequestDefaultTypeInternal;
extern ZoomOutStartRequestDefaultTypeInternal _ZoomOutStartRequest_default_instance_;
class ZoomOutStartResponse;
struct ZoomOutStartResponseDefaultTypeInternal;
extern ZoomOutStartResponseDefaultTypeInternal _ZoomOutStartResponse_default_instance_;
class ZoomRangeRequest;
struct ZoomRangeRequestDefaultTypeInternal;
extern ZoomRangeRequestDefaultTypeInternal _ZoomRangeRequest_default_instance_;
class ZoomRangeResponse;
struct ZoomRangeResponseDefaultTypeInternal;
extern ZoomRangeResponseDefaultTypeInternal _ZoomRangeResponse_default_instance_;
class ZoomStopRequest;
struct ZoomStopRequestDefaultTypeInternal;
extern ZoomStopRequestDefaultTypeInternal _ZoomStopRequest_default_instance_;
class ZoomStopResponse;
struct ZoomStopResponseDefaultTypeInternal;
extern ZoomStopResponseDefaultTypeInternal _ZoomStopResponse_default_instance_;
}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::camera::CameraList* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraList>(Arena*);
template<> ::mavsdk::rpc::camera::CameraListResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraListResponse>(Arena*);
template<> ::mavsdk::rpc::camera::CameraResult* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(Arena*);
template<> ::mavsdk::rpc::camera::CaptureInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfo>(Arena*);
template<> ::mavsdk::rpc::camera::CaptureInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::CurrentSettingsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CurrentSettingsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::CurrentSettingsUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CurrentSettingsUpdate>(Arena*);
template<> ::mavsdk::rpc::camera::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::camera::FocusInStartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusInStartRequest>(Arena*);
template<> ::mavsdk::rpc::camera::FocusInStartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusInStartResponse>(Arena*);
template<> ::mavsdk::rpc::camera::FocusOutStartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusOutStartRequest>(Arena*);
template<> ::mavsdk::rpc::camera::FocusOutStartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusOutStartResponse>(Arena*);
template<> ::mavsdk::rpc::camera::FocusRangeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusRangeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::FocusRangeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusRangeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::FocusStopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusStopRequest>(Arena*);
template<> ::mavsdk::rpc::camera::FocusStopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FocusStopResponse>(Arena*);
template<> ::mavsdk::rpc::camera::FormatStorageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FormatStorageRequest>(Arena*);
template<> ::mavsdk::rpc::camera::FormatStorageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::FormatStorageResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetCurrentSettingsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetCurrentSettingsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetCurrentSettingsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetCurrentSettingsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetPossibleSettingOptionsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetPossibleSettingOptionsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetPossibleSettingOptionsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetPossibleSettingOptionsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetSettingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetSettingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetSettingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetSettingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetStorageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetStorageRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetStorageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetStorageResponse>(Arena*);
template<> ::mavsdk::rpc::camera::GetVideoStreamInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetVideoStreamInfoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::GetVideoStreamInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::GetVideoStreamInfoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Information* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Information>(Arena*);
template<> ::mavsdk::rpc::camera::ListPhotosRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ListPhotosRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ListPhotosResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ListPhotosResponse>(Arena*);
template<> ::mavsdk::rpc::camera::ModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::ModeUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ModeUpdate>(Arena*);
template<> ::mavsdk::rpc::camera::Option* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Option>(Arena*);
template<> ::mavsdk::rpc::camera::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Position>(Arena*);
template<> ::mavsdk::rpc::camera::PossibleSettingOptionsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::PossibleSettingOptionsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::PossibleSettingOptionsUpdate>(Arena*);
template<> ::mavsdk::rpc::camera::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Quaternion>(Arena*);
template<> ::mavsdk::rpc::camera::ResetSettingsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ResetSettingsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ResetSettingsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ResetSettingsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::SetModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SetModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::SetSettingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetSettingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SetSettingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetSettingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Setting* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(Arena*);
template<> ::mavsdk::rpc::camera::SettingOptions* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SettingOptions>(Arena*);
template<> ::mavsdk::rpc::camera::StartPhotoIntervalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartPhotoIntervalRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartPhotoIntervalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartPhotoIntervalResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopPhotoIntervalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopPhotoIntervalRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopPhotoIntervalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopPhotoIntervalResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Storage* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Storage>(Arena*);
template<> ::mavsdk::rpc::camera::StorageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StorageResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StorageUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StorageUpdate>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCameraListRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCameraListRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCaptureInfoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeStorageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeStorageRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TakePhotoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TakePhotoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TakePhotoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TakePhotoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::TrackPointRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackPointRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TrackPointResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackPointResponse>(Arena*);
template<> ::mavsdk::rpc::camera::TrackRectangleRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackRectangleRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TrackRectangleResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackRectangleResponse>(Arena*);
template<> ::mavsdk::rpc::camera::TrackStopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackStopRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TrackStopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TrackStopResponse>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfo>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamSettings* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamSettings>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamUpdate>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomInStartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomInStartRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomInStartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomInStartResponse>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomOutStartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomOutStartRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomOutStartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomOutStartResponse>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomRangeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomRangeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomRangeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomRangeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomStopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomStopRequest>(Arena*);
template<> ::mavsdk::rpc::camera::ZoomStopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ZoomStopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace camera {

enum VideoStreamInfo_VideoStreamStatus : int {
  VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_NOT_RUNNING = 0,
  VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_IN_PROGRESS = 1,
  VideoStreamInfo_VideoStreamStatus_VideoStreamInfo_VideoStreamStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VideoStreamInfo_VideoStreamStatus_VideoStreamInfo_VideoStreamStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VideoStreamInfo_VideoStreamStatus_IsValid(int value);
constexpr VideoStreamInfo_VideoStreamStatus VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MIN = VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_NOT_RUNNING;
constexpr VideoStreamInfo_VideoStreamStatus VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX = VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_IN_PROGRESS;
constexpr int VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_ARRAYSIZE = VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoStreamInfo_VideoStreamStatus_descriptor();
template<typename T>
inline const std::string& VideoStreamInfo_VideoStreamStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoStreamInfo_VideoStreamStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoStreamInfo_VideoStreamStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoStreamInfo_VideoStreamStatus_descriptor(), enum_t_value);
}
inline bool VideoStreamInfo_VideoStreamStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoStreamInfo_VideoStreamStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoStreamInfo_VideoStreamStatus>(
    VideoStreamInfo_VideoStreamStatus_descriptor(), name, value);
}
enum VideoStreamInfo_VideoStreamSpectrum : int {
  VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_UNKNOWN = 0,
  VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT = 1,
  VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_INFRARED = 2,
  VideoStreamInfo_VideoStreamSpectrum_VideoStreamInfo_VideoStreamSpectrum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VideoStreamInfo_VideoStreamSpectrum_VideoStreamInfo_VideoStreamSpectrum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VideoStreamInfo_VideoStreamSpectrum_IsValid(int value);
constexpr VideoStreamInfo_VideoStreamSpectrum VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_MIN = VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_UNKNOWN;
constexpr VideoStreamInfo_VideoStreamSpectrum VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_MAX = VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_INFRARED;
constexpr int VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_ARRAYSIZE = VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoStreamInfo_VideoStreamSpectrum_descriptor();
template<typename T>
inline const std::string& VideoStreamInfo_VideoStreamSpectrum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoStreamInfo_VideoStreamSpectrum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoStreamInfo_VideoStreamSpectrum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoStreamInfo_VideoStreamSpectrum_descriptor(), enum_t_value);
}
inline bool VideoStreamInfo_VideoStreamSpectrum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoStreamInfo_VideoStreamSpectrum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoStreamInfo_VideoStreamSpectrum>(
    VideoStreamInfo_VideoStreamSpectrum_descriptor(), name, value);
}
enum Storage_StorageStatus : int {
  Storage_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE = 0,
  Storage_StorageStatus_STORAGE_STATUS_UNFORMATTED = 1,
  Storage_StorageStatus_STORAGE_STATUS_FORMATTED = 2,
  Storage_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED = 3,
  Storage_StorageStatus_Storage_StorageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Storage_StorageStatus_Storage_StorageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Storage_StorageStatus_IsValid(int value);
constexpr Storage_StorageStatus Storage_StorageStatus_StorageStatus_MIN = Storage_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE;
constexpr Storage_StorageStatus Storage_StorageStatus_StorageStatus_MAX = Storage_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED;
constexpr int Storage_StorageStatus_StorageStatus_ARRAYSIZE = Storage_StorageStatus_StorageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Storage_StorageStatus_descriptor();
template<typename T>
inline const std::string& Storage_StorageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Storage_StorageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Storage_StorageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Storage_StorageStatus_descriptor(), enum_t_value);
}
inline bool Storage_StorageStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Storage_StorageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Storage_StorageStatus>(
    Storage_StorageStatus_descriptor(), name, value);
}
enum Storage_StorageType : int {
  Storage_StorageType_STORAGE_TYPE_UNKNOWN = 0,
  Storage_StorageType_STORAGE_TYPE_USB_STICK = 1,
  Storage_StorageType_STORAGE_TYPE_SD = 2,
  Storage_StorageType_STORAGE_TYPE_MICROSD = 3,
  Storage_StorageType_STORAGE_TYPE_HD = 7,
  Storage_StorageType_STORAGE_TYPE_OTHER = 254,
  Storage_StorageType_Storage_StorageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Storage_StorageType_Storage_StorageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Storage_StorageType_IsValid(int value);
constexpr Storage_StorageType Storage_StorageType_StorageType_MIN = Storage_StorageType_STORAGE_TYPE_UNKNOWN;
constexpr Storage_StorageType Storage_StorageType_StorageType_MAX = Storage_StorageType_STORAGE_TYPE_OTHER;
constexpr int Storage_StorageType_StorageType_ARRAYSIZE = Storage_StorageType_StorageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Storage_StorageType_descriptor();
template<typename T>
inline const std::string& Storage_StorageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Storage_StorageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Storage_StorageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Storage_StorageType_descriptor(), enum_t_value);
}
inline bool Storage_StorageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Storage_StorageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Storage_StorageType>(
    Storage_StorageType_descriptor(), name, value);
}
enum CameraResult_Result : int {
  CameraResult_Result_RESULT_UNKNOWN = 0,
  CameraResult_Result_RESULT_SUCCESS = 1,
  CameraResult_Result_RESULT_IN_PROGRESS = 2,
  CameraResult_Result_RESULT_BUSY = 3,
  CameraResult_Result_RESULT_DENIED = 4,
  CameraResult_Result_RESULT_ERROR = 5,
  CameraResult_Result_RESULT_TIMEOUT = 6,
  CameraResult_Result_RESULT_WRONG_ARGUMENT = 7,
  CameraResult_Result_RESULT_NO_SYSTEM = 8,
  CameraResult_Result_RESULT_PROTOCOL_UNSUPPORTED = 9,
  CameraResult_Result_RESULT_UNAVAILABLE = 10,
  CameraResult_Result_RESULT_CAMERA_ID_INVALID = 11,
  CameraResult_Result_RESULT_ACTION_UNSUPPORTED = 12,
  CameraResult_Result_CameraResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CameraResult_Result_CameraResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CameraResult_Result_IsValid(int value);
constexpr CameraResult_Result CameraResult_Result_Result_MIN = CameraResult_Result_RESULT_UNKNOWN;
constexpr CameraResult_Result CameraResult_Result_Result_MAX = CameraResult_Result_RESULT_ACTION_UNSUPPORTED;
constexpr int CameraResult_Result_Result_ARRAYSIZE = CameraResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraResult_Result_descriptor();
template<typename T>
inline const std::string& CameraResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraResult_Result_descriptor(), enum_t_value);
}
inline bool CameraResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraResult_Result>(
    CameraResult_Result_descriptor(), name, value);
}
enum Mode : int {
  MODE_UNKNOWN = 0,
  MODE_PHOTO = 1,
  MODE_VIDEO = 2,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = MODE_UNKNOWN;
constexpr Mode Mode_MAX = MODE_VIDEO;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
enum PhotosRange : int {
  PHOTOS_RANGE_ALL = 0,
  PHOTOS_RANGE_SINCE_CONNECTION = 1,
  PhotosRange_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PhotosRange_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PhotosRange_IsValid(int value);
constexpr PhotosRange PhotosRange_MIN = PHOTOS_RANGE_ALL;
constexpr PhotosRange PhotosRange_MAX = PHOTOS_RANGE_SINCE_CONNECTION;
constexpr int PhotosRange_ARRAYSIZE = PhotosRange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhotosRange_descriptor();
template<typename T>
inline const std::string& PhotosRange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhotosRange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhotosRange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhotosRange_descriptor(), enum_t_value);
}
inline bool PhotosRange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhotosRange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhotosRange>(
    PhotosRange_descriptor(), name, value);
}
// ===================================================================

class Option final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  explicit PROTOBUF_CONSTEXPR Option(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Option& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Option& from) {
    Option::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Option";
  }
  protected:
  explicit Option(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionIdFieldNumber = 1,
    kOptionDescriptionFieldNumber = 2,
  };
  // string option_id = 1;
  void clear_option_id();
  const std::string& option_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_option_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_option_id();
  PROTOBUF_NODISCARD std::string* release_option_id();
  void set_allocated_option_id(std::string* option_id);
  private:
  const std::string& _internal_option_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_option_id(const std::string& value);
  std::string* _internal_mutable_option_id();
  public:

  // string option_description = 2;
  void clear_option_description();
  const std::string& option_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_option_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_option_description();
  PROTOBUF_NODISCARD std::string* release_option_description();
  void set_allocated_option_description(std::string* option_description);
  private:
  const std::string& _internal_option_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_option_description(const std::string& value);
  std::string* _internal_mutable_option_description();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Option)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Setting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Setting) */ {
 public:
  inline Setting() : Setting(nullptr) {}
  ~Setting() override;
  explicit PROTOBUF_CONSTEXPR Setting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Setting(const Setting& from);
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting& operator=(Setting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Setting& default_instance() {
    return *internal_default_instance();
  }
  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Setting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Setting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Setting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Setting& from) {
    Setting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Setting";
  }
  protected:
  explicit Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingIdFieldNumber = 1,
    kSettingDescriptionFieldNumber = 2,
    kOptionFieldNumber = 3,
    kIsRangeFieldNumber = 4,
  };
  // string setting_id = 1;
  void clear_setting_id();
  const std::string& setting_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting_id();
  PROTOBUF_NODISCARD std::string* release_setting_id();
  void set_allocated_setting_id(std::string* setting_id);
  private:
  const std::string& _internal_setting_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting_id(const std::string& value);
  std::string* _internal_mutable_setting_id();
  public:

  // string setting_description = 2;
  void clear_setting_description();
  const std::string& setting_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting_description();
  PROTOBUF_NODISCARD std::string* release_setting_description();
  void set_allocated_setting_description(std::string* setting_description);
  private:
  const std::string& _internal_setting_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting_description(const std::string& value);
  std::string* _internal_mutable_setting_description();
  public:

  // .mavsdk.rpc.camera.Option option = 3;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const ::mavsdk::rpc::camera::Option& option() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Option* release_option();
  ::mavsdk::rpc::camera::Option* mutable_option();
  void set_allocated_option(::mavsdk::rpc::camera::Option* option);
  private:
  const ::mavsdk::rpc::camera::Option& _internal_option() const;
  ::mavsdk::rpc::camera::Option* _internal_mutable_option();
  public:
  void unsafe_arena_set_allocated_option(
      ::mavsdk::rpc::camera::Option* option);
  ::mavsdk::rpc::camera::Option* unsafe_arena_release_option();

  // bool is_range = 4;
  void clear_is_range();
  bool is_range() const;
  void set_is_range(bool value);
  private:
  bool _internal_is_range() const;
  void _internal_set_is_range(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Setting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_description_;
    ::mavsdk::rpc::camera::Option* option_;
    bool is_range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SettingOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SettingOptions) */ {
 public:
  inline SettingOptions() : SettingOptions(nullptr) {}
  ~SettingOptions() override;
  explicit PROTOBUF_CONSTEXPR SettingOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SettingOptions(const SettingOptions& from);
  SettingOptions(SettingOptions&& from) noexcept
    : SettingOptions() {
    *this = ::std::move(from);
  }

  inline SettingOptions& operator=(const SettingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingOptions& operator=(SettingOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SettingOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SettingOptions* internal_default_instance() {
    return reinterpret_cast<const SettingOptions*>(
               &_SettingOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SettingOptions& a, SettingOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettingOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SettingOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SettingOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SettingOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SettingOptions& from) {
    SettingOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SettingOptions";
  }
  protected:
  explicit SettingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 4,
    kSettingIdFieldNumber = 2,
    kSettingDescriptionFieldNumber = 3,
    kComponentIdFieldNumber = 1,
    kIsRangeFieldNumber = 5,
  };
  // repeated .mavsdk.rpc.camera.Option options = 4;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::mavsdk::rpc::camera::Option* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >*
      mutable_options();
  private:
  const ::mavsdk::rpc::camera::Option& _internal_options(int index) const;
  ::mavsdk::rpc::camera::Option* _internal_add_options();
  public:
  const ::mavsdk::rpc::camera::Option& options(int index) const;
  ::mavsdk::rpc::camera::Option* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >&
      options() const;

  // string setting_id = 2;
  void clear_setting_id();
  const std::string& setting_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting_id();
  PROTOBUF_NODISCARD std::string* release_setting_id();
  void set_allocated_setting_id(std::string* setting_id);
  private:
  const std::string& _internal_setting_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting_id(const std::string& value);
  std::string* _internal_mutable_setting_id();
  public:

  // string setting_description = 3;
  void clear_setting_description();
  const std::string& setting_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting_description();
  PROTOBUF_NODISCARD std::string* release_setting_description();
  void set_allocated_setting_description(std::string* setting_description);
  private:
  const std::string& _internal_setting_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting_description(const std::string& value);
  std::string* _internal_mutable_setting_description();
  public:

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // bool is_range = 5;
  void clear_is_range();
  bool is_range() const;
  void set_is_range(bool value);
  private:
  bool _internal_is_range() const;
  void _internal_set_is_range(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SettingOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option > options_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_description_;
    int32_t component_id_;
    bool is_range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamSettings) */ {
 public:
  inline VideoStreamSettings() : VideoStreamSettings(nullptr) {}
  ~VideoStreamSettings() override;
  explicit PROTOBUF_CONSTEXPR VideoStreamSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoStreamSettings(const VideoStreamSettings& from);
  VideoStreamSettings(VideoStreamSettings&& from) noexcept
    : VideoStreamSettings() {
    *this = ::std::move(from);
  }

  inline VideoStreamSettings& operator=(const VideoStreamSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamSettings& operator=(VideoStreamSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoStreamSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoStreamSettings* internal_default_instance() {
    return reinterpret_cast<const VideoStreamSettings*>(
               &_VideoStreamSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VideoStreamSettings& a, VideoStreamSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStreamSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoStreamSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoStreamSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoStreamSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoStreamSettings& from) {
    VideoStreamSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamSettings";
  }
  protected:
  explicit VideoStreamSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 6,
    kFrameRateHzFieldNumber = 1,
    kHorizontalResolutionPixFieldNumber = 2,
    kVerticalResolutionPixFieldNumber = 3,
    kBitRateBSFieldNumber = 4,
    kRotationDegFieldNumber = 5,
    kHorizontalFovDegFieldNumber = 7,
  };
  // string uri = 6;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // float frame_rate_hz = 1;
  void clear_frame_rate_hz();
  float frame_rate_hz() const;
  void set_frame_rate_hz(float value);
  private:
  float _internal_frame_rate_hz() const;
  void _internal_set_frame_rate_hz(float value);
  public:

  // uint32 horizontal_resolution_pix = 2;
  void clear_horizontal_resolution_pix();
  uint32_t horizontal_resolution_pix() const;
  void set_horizontal_resolution_pix(uint32_t value);
  private:
  uint32_t _internal_horizontal_resolution_pix() const;
  void _internal_set_horizontal_resolution_pix(uint32_t value);
  public:

  // uint32 vertical_resolution_pix = 3;
  void clear_vertical_resolution_pix();
  uint32_t vertical_resolution_pix() const;
  void set_vertical_resolution_pix(uint32_t value);
  private:
  uint32_t _internal_vertical_resolution_pix() const;
  void _internal_set_vertical_resolution_pix(uint32_t value);
  public:

  // uint32 bit_rate_b_s = 4;
  void clear_bit_rate_b_s();
  uint32_t bit_rate_b_s() const;
  void set_bit_rate_b_s(uint32_t value);
  private:
  uint32_t _internal_bit_rate_b_s() const;
  void _internal_set_bit_rate_b_s(uint32_t value);
  public:

  // uint32 rotation_deg = 5;
  void clear_rotation_deg();
  uint32_t rotation_deg() const;
  void set_rotation_deg(uint32_t value);
  private:
  uint32_t _internal_rotation_deg() const;
  void _internal_set_rotation_deg(uint32_t value);
  public:

  // float horizontal_fov_deg = 7;
  void clear_horizontal_fov_deg();
  float horizontal_fov_deg() const;
  void set_horizontal_fov_deg(float value);
  private:
  float _internal_horizontal_fov_deg() const;
  void _internal_set_horizontal_fov_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    float frame_rate_hz_;
    uint32_t horizontal_resolution_pix_;
    uint32_t vertical_resolution_pix_;
    uint32_t bit_rate_b_s_;
    uint32_t rotation_deg_;
    float horizontal_fov_deg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamInfo) */ {
 public:
  inline VideoStreamInfo() : VideoStreamInfo(nullptr) {}
  ~VideoStreamInfo() override;
  explicit PROTOBUF_CONSTEXPR VideoStreamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoStreamInfo(const VideoStreamInfo& from);
  VideoStreamInfo(VideoStreamInfo&& from) noexcept
    : VideoStreamInfo() {
    *this = ::std::move(from);
  }

  inline VideoStreamInfo& operator=(const VideoStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamInfo& operator=(VideoStreamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoStreamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoStreamInfo* internal_default_instance() {
    return reinterpret_cast<const VideoStreamInfo*>(
               &_VideoStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VideoStreamInfo& a, VideoStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoStreamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoStreamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoStreamInfo& from) {
    VideoStreamInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamInfo";
  }
  protected:
  explicit VideoStreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VideoStreamInfo_VideoStreamStatus VideoStreamStatus;
  static constexpr VideoStreamStatus VIDEO_STREAM_STATUS_NOT_RUNNING =
    VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_NOT_RUNNING;
  static constexpr VideoStreamStatus VIDEO_STREAM_STATUS_IN_PROGRESS =
    VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_IN_PROGRESS;
  static inline bool VideoStreamStatus_IsValid(int value) {
    return VideoStreamInfo_VideoStreamStatus_IsValid(value);
  }
  static constexpr VideoStreamStatus VideoStreamStatus_MIN =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MIN;
  static constexpr VideoStreamStatus VideoStreamStatus_MAX =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX;
  static constexpr int VideoStreamStatus_ARRAYSIZE =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoStreamStatus_descriptor() {
    return VideoStreamInfo_VideoStreamStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoStreamStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoStreamStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoStreamStatus_Name.");
    return VideoStreamInfo_VideoStreamStatus_Name(enum_t_value);
  }
  static inline bool VideoStreamStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VideoStreamStatus* value) {
    return VideoStreamInfo_VideoStreamStatus_Parse(name, value);
  }

  typedef VideoStreamInfo_VideoStreamSpectrum VideoStreamSpectrum;
  static constexpr VideoStreamSpectrum VIDEO_STREAM_SPECTRUM_UNKNOWN =
    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_UNKNOWN;
  static constexpr VideoStreamSpectrum VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT =
    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT;
  static constexpr VideoStreamSpectrum VIDEO_STREAM_SPECTRUM_INFRARED =
    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_INFRARED;
  static inline bool VideoStreamSpectrum_IsValid(int value) {
    return VideoStreamInfo_VideoStreamSpectrum_IsValid(value);
  }
  static constexpr VideoStreamSpectrum VideoStreamSpectrum_MIN =
    VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_MIN;
  static constexpr VideoStreamSpectrum VideoStreamSpectrum_MAX =
    VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_MAX;
  static constexpr int VideoStreamSpectrum_ARRAYSIZE =
    VideoStreamInfo_VideoStreamSpectrum_VideoStreamSpectrum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoStreamSpectrum_descriptor() {
    return VideoStreamInfo_VideoStreamSpectrum_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoStreamSpectrum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoStreamSpectrum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoStreamSpectrum_Name.");
    return VideoStreamInfo_VideoStreamSpectrum_Name(enum_t_value);
  }
  static inline bool VideoStreamSpectrum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VideoStreamSpectrum* value) {
    return VideoStreamInfo_VideoStreamSpectrum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 2,
    kStreamIdFieldNumber = 1,
    kStatusFieldNumber = 3,
    kSpectrumFieldNumber = 4,
  };
  // .mavsdk.rpc.camera.VideoStreamSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::mavsdk::rpc::camera::VideoStreamSettings& settings() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::VideoStreamSettings* release_settings();
  ::mavsdk::rpc::camera::VideoStreamSettings* mutable_settings();
  void set_allocated_settings(::mavsdk::rpc::camera::VideoStreamSettings* settings);
  private:
  const ::mavsdk::rpc::camera::VideoStreamSettings& _internal_settings() const;
  ::mavsdk::rpc::camera::VideoStreamSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::mavsdk::rpc::camera::VideoStreamSettings* settings);
  ::mavsdk::rpc::camera::VideoStreamSettings* unsafe_arena_release_settings();

  // int32 stream_id = 1;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus status = 3;
  void clear_status();
  ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus status() const;
  void set_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value);
  private:
  ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus _internal_status() const;
  void _internal_set_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value);
  public:

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamSpectrum spectrum = 4;
  void clear_spectrum();
  ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum spectrum() const;
  void set_spectrum(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum value);
  private:
  ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum _internal_spectrum() const;
  void _internal_set_spectrum(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::VideoStreamSettings* settings_;
    int32_t stream_id_;
    int status_;
    int spectrum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TakePhotoRequest) */ {
 public:
  inline TakePhotoRequest() : TakePhotoRequest(nullptr) {}
  ~TakePhotoRequest() override;
  explicit PROTOBUF_CONSTEXPR TakePhotoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakePhotoRequest(const TakePhotoRequest& from);
  TakePhotoRequest(TakePhotoRequest&& from) noexcept
    : TakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline TakePhotoRequest& operator=(const TakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoRequest& operator=(TakePhotoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const TakePhotoRequest*>(
               &_TakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TakePhotoRequest& a, TakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakePhotoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TakePhotoRequest& from) {
    TakePhotoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TakePhotoRequest";
  }
  protected:
  explicit TakePhotoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TakePhotoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TakePhotoResponse) */ {
 public:
  inline TakePhotoResponse() : TakePhotoResponse(nullptr) {}
  ~TakePhotoResponse() override;
  explicit PROTOBUF_CONSTEXPR TakePhotoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakePhotoResponse(const TakePhotoResponse& from);
  TakePhotoResponse(TakePhotoResponse&& from) noexcept
    : TakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline TakePhotoResponse& operator=(const TakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoResponse& operator=(TakePhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const TakePhotoResponse*>(
               &_TakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TakePhotoResponse& a, TakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakePhotoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TakePhotoResponse& from) {
    TakePhotoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TakePhotoResponse";
  }
  protected:
  explicit TakePhotoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TakePhotoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartPhotoIntervalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartPhotoIntervalRequest) */ {
 public:
  inline StartPhotoIntervalRequest() : StartPhotoIntervalRequest(nullptr) {}
  ~StartPhotoIntervalRequest() override;
  explicit PROTOBUF_CONSTEXPR StartPhotoIntervalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPhotoIntervalRequest(const StartPhotoIntervalRequest& from);
  StartPhotoIntervalRequest(StartPhotoIntervalRequest&& from) noexcept
    : StartPhotoIntervalRequest() {
    *this = ::std::move(from);
  }

  inline StartPhotoIntervalRequest& operator=(const StartPhotoIntervalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPhotoIntervalRequest& operator=(StartPhotoIntervalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPhotoIntervalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPhotoIntervalRequest* internal_default_instance() {
    return reinterpret_cast<const StartPhotoIntervalRequest*>(
               &_StartPhotoIntervalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartPhotoIntervalRequest& a, StartPhotoIntervalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPhotoIntervalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPhotoIntervalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartPhotoIntervalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartPhotoIntervalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPhotoIntervalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartPhotoIntervalRequest& from) {
    StartPhotoIntervalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPhotoIntervalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartPhotoIntervalRequest";
  }
  protected:
  explicit StartPhotoIntervalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kIntervalSFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float interval_s = 2;
  void clear_interval_s();
  float interval_s() const;
  void set_interval_s(float value);
  private:
  float _internal_interval_s() const;
  void _internal_set_interval_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartPhotoIntervalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    float interval_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartPhotoIntervalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartPhotoIntervalResponse) */ {
 public:
  inline StartPhotoIntervalResponse() : StartPhotoIntervalResponse(nullptr) {}
  ~StartPhotoIntervalResponse() override;
  explicit PROTOBUF_CONSTEXPR StartPhotoIntervalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPhotoIntervalResponse(const StartPhotoIntervalResponse& from);
  StartPhotoIntervalResponse(StartPhotoIntervalResponse&& from) noexcept
    : StartPhotoIntervalResponse() {
    *this = ::std::move(from);
  }

  inline StartPhotoIntervalResponse& operator=(const StartPhotoIntervalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPhotoIntervalResponse& operator=(StartPhotoIntervalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPhotoIntervalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPhotoIntervalResponse* internal_default_instance() {
    return reinterpret_cast<const StartPhotoIntervalResponse*>(
               &_StartPhotoIntervalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartPhotoIntervalResponse& a, StartPhotoIntervalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPhotoIntervalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPhotoIntervalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartPhotoIntervalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartPhotoIntervalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPhotoIntervalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartPhotoIntervalResponse& from) {
    StartPhotoIntervalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPhotoIntervalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartPhotoIntervalResponse";
  }
  protected:
  explicit StartPhotoIntervalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartPhotoIntervalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopPhotoIntervalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopPhotoIntervalRequest) */ {
 public:
  inline StopPhotoIntervalRequest() : StopPhotoIntervalRequest(nullptr) {}
  ~StopPhotoIntervalRequest() override;
  explicit PROTOBUF_CONSTEXPR StopPhotoIntervalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopPhotoIntervalRequest(const StopPhotoIntervalRequest& from);
  StopPhotoIntervalRequest(StopPhotoIntervalRequest&& from) noexcept
    : StopPhotoIntervalRequest() {
    *this = ::std::move(from);
  }

  inline StopPhotoIntervalRequest& operator=(const StopPhotoIntervalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPhotoIntervalRequest& operator=(StopPhotoIntervalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPhotoIntervalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPhotoIntervalRequest* internal_default_instance() {
    return reinterpret_cast<const StopPhotoIntervalRequest*>(
               &_StopPhotoIntervalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopPhotoIntervalRequest& a, StopPhotoIntervalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPhotoIntervalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPhotoIntervalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopPhotoIntervalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopPhotoIntervalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopPhotoIntervalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopPhotoIntervalRequest& from) {
    StopPhotoIntervalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPhotoIntervalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopPhotoIntervalRequest";
  }
  protected:
  explicit StopPhotoIntervalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopPhotoIntervalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopPhotoIntervalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopPhotoIntervalResponse) */ {
 public:
  inline StopPhotoIntervalResponse() : StopPhotoIntervalResponse(nullptr) {}
  ~StopPhotoIntervalResponse() override;
  explicit PROTOBUF_CONSTEXPR StopPhotoIntervalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopPhotoIntervalResponse(const StopPhotoIntervalResponse& from);
  StopPhotoIntervalResponse(StopPhotoIntervalResponse&& from) noexcept
    : StopPhotoIntervalResponse() {
    *this = ::std::move(from);
  }

  inline StopPhotoIntervalResponse& operator=(const StopPhotoIntervalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPhotoIntervalResponse& operator=(StopPhotoIntervalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPhotoIntervalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPhotoIntervalResponse* internal_default_instance() {
    return reinterpret_cast<const StopPhotoIntervalResponse*>(
               &_StopPhotoIntervalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopPhotoIntervalResponse& a, StopPhotoIntervalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPhotoIntervalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPhotoIntervalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopPhotoIntervalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopPhotoIntervalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopPhotoIntervalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopPhotoIntervalResponse& from) {
    StopPhotoIntervalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPhotoIntervalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopPhotoIntervalResponse";
  }
  protected:
  explicit StopPhotoIntervalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopPhotoIntervalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoRequest) */ {
 public:
  inline StartVideoRequest() : StartVideoRequest(nullptr) {}
  ~StartVideoRequest() override;
  explicit PROTOBUF_CONSTEXPR StartVideoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoRequest(const StartVideoRequest& from);
  StartVideoRequest(StartVideoRequest&& from) noexcept
    : StartVideoRequest() {
    *this = ::std::move(from);
  }

  inline StartVideoRequest& operator=(const StartVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoRequest& operator=(StartVideoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoRequest* internal_default_instance() {
    return reinterpret_cast<const StartVideoRequest*>(
               &_StartVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StartVideoRequest& a, StartVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartVideoRequest& from) {
    StartVideoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoRequest";
  }
  protected:
  explicit StartVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoResponse) */ {
 public:
  inline StartVideoResponse() : StartVideoResponse(nullptr) {}
  ~StartVideoResponse() override;
  explicit PROTOBUF_CONSTEXPR StartVideoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoResponse(const StartVideoResponse& from);
  StartVideoResponse(StartVideoResponse&& from) noexcept
    : StartVideoResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoResponse& operator=(const StartVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoResponse& operator=(StartVideoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoResponse*>(
               &_StartVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StartVideoResponse& a, StartVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartVideoResponse& from) {
    StartVideoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoResponse";
  }
  protected:
  explicit StartVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoRequest) */ {
 public:
  inline StopVideoRequest() : StopVideoRequest(nullptr) {}
  ~StopVideoRequest() override;
  explicit PROTOBUF_CONSTEXPR StopVideoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoRequest(const StopVideoRequest& from);
  StopVideoRequest(StopVideoRequest&& from) noexcept
    : StopVideoRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoRequest& operator=(const StopVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoRequest& operator=(StopVideoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoRequest*>(
               &_StopVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StopVideoRequest& a, StopVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVideoRequest& from) {
    StopVideoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoRequest";
  }
  protected:
  explicit StopVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoResponse) */ {
 public:
  inline StopVideoResponse() : StopVideoResponse(nullptr) {}
  ~StopVideoResponse() override;
  explicit PROTOBUF_CONSTEXPR StopVideoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoResponse(const StopVideoResponse& from);
  StopVideoResponse(StopVideoResponse&& from) noexcept
    : StopVideoResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoResponse& operator=(const StopVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoResponse& operator=(StopVideoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoResponse*>(
               &_StopVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StopVideoResponse& a, StopVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVideoResponse& from) {
    StopVideoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoResponse";
  }
  protected:
  explicit StopVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoStreamingRequest) */ {
 public:
  inline StartVideoStreamingRequest() : StartVideoStreamingRequest(nullptr) {}
  ~StartVideoStreamingRequest() override;
  explicit PROTOBUF_CONSTEXPR StartVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoStreamingRequest(const StartVideoStreamingRequest& from);
  StartVideoStreamingRequest(StartVideoStreamingRequest&& from) noexcept
    : StartVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StartVideoStreamingRequest& operator=(const StartVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoStreamingRequest& operator=(StartVideoStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StartVideoStreamingRequest*>(
               &_StartVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StartVideoStreamingRequest& a, StartVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoStreamingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartVideoStreamingRequest& from) {
    StartVideoStreamingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoStreamingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoStreamingRequest";
  }
  protected:
  explicit StartVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // int32 stream_id = 2;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int32_t stream_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoStreamingResponse) */ {
 public:
  inline StartVideoStreamingResponse() : StartVideoStreamingResponse(nullptr) {}
  ~StartVideoStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StartVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoStreamingResponse(const StartVideoStreamingResponse& from);
  StartVideoStreamingResponse(StartVideoStreamingResponse&& from) noexcept
    : StartVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoStreamingResponse& operator=(const StartVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoStreamingResponse& operator=(StartVideoStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoStreamingResponse*>(
               &_StartVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StartVideoStreamingResponse& a, StartVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartVideoStreamingResponse& from) {
    StartVideoStreamingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoStreamingResponse";
  }
  protected:
  explicit StartVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoStreamingRequest) */ {
 public:
  inline StopVideoStreamingRequest() : StopVideoStreamingRequest(nullptr) {}
  ~StopVideoStreamingRequest() override;
  explicit PROTOBUF_CONSTEXPR StopVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoStreamingRequest(const StopVideoStreamingRequest& from);
  StopVideoStreamingRequest(StopVideoStreamingRequest&& from) noexcept
    : StopVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoStreamingRequest& operator=(const StopVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoStreamingRequest& operator=(StopVideoStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoStreamingRequest*>(
               &_StopVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StopVideoStreamingRequest& a, StopVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoStreamingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVideoStreamingRequest& from) {
    StopVideoStreamingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoStreamingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoStreamingRequest";
  }
  protected:
  explicit StopVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // int32 stream_id = 2;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int32_t stream_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoStreamingResponse) */ {
 public:
  inline StopVideoStreamingResponse() : StopVideoStreamingResponse(nullptr) {}
  ~StopVideoStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StopVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoStreamingResponse(const StopVideoStreamingResponse& from);
  StopVideoStreamingResponse(StopVideoStreamingResponse&& from) noexcept
    : StopVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoStreamingResponse& operator=(const StopVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoStreamingResponse& operator=(StopVideoStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoStreamingResponse*>(
               &_StopVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StopVideoStreamingResponse& a, StopVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVideoStreamingResponse& from) {
    StopVideoStreamingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoStreamingResponse";
  }
  protected:
  explicit StopVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetModeRequest) */ {
 public:
  inline SetModeRequest() : SetModeRequest(nullptr) {}
  ~SetModeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetModeRequest(const SetModeRequest& from);
  SetModeRequest(SetModeRequest&& from) noexcept
    : SetModeRequest() {
    *this = ::std::move(from);
  }

  inline SetModeRequest& operator=(const SetModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModeRequest& operator=(SetModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetModeRequest* internal_default_instance() {
    return reinterpret_cast<const SetModeRequest*>(
               &_SetModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetModeRequest& a, SetModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetModeRequest& from) {
    SetModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetModeRequest";
  }
  protected:
  explicit SetModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // .mavsdk.rpc.camera.Mode mode = 2;
  void clear_mode();
  ::mavsdk::rpc::camera::Mode mode() const;
  void set_mode(::mavsdk::rpc::camera::Mode value);
  private:
  ::mavsdk::rpc::camera::Mode _internal_mode() const;
  void _internal_set_mode(::mavsdk::rpc::camera::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetModeResponse) */ {
 public:
  inline SetModeResponse() : SetModeResponse(nullptr) {}
  ~SetModeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetModeResponse(const SetModeResponse& from);
  SetModeResponse(SetModeResponse&& from) noexcept
    : SetModeResponse() {
    *this = ::std::move(from);
  }

  inline SetModeResponse& operator=(const SetModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModeResponse& operator=(SetModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetModeResponse* internal_default_instance() {
    return reinterpret_cast<const SetModeResponse*>(
               &_SetModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetModeResponse& a, SetModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetModeResponse& from) {
    SetModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetModeResponse";
  }
  protected:
  explicit SetModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ListPhotosRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ListPhotosRequest) */ {
 public:
  inline ListPhotosRequest() : ListPhotosRequest(nullptr) {}
  ~ListPhotosRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPhotosRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhotosRequest(const ListPhotosRequest& from);
  ListPhotosRequest(ListPhotosRequest&& from) noexcept
    : ListPhotosRequest() {
    *this = ::std::move(from);
  }

  inline ListPhotosRequest& operator=(const ListPhotosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhotosRequest& operator=(ListPhotosRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhotosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhotosRequest* internal_default_instance() {
    return reinterpret_cast<const ListPhotosRequest*>(
               &_ListPhotosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListPhotosRequest& a, ListPhotosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhotosRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhotosRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhotosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhotosRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhotosRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhotosRequest& from) {
    ListPhotosRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhotosRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ListPhotosRequest";
  }
  protected:
  explicit ListPhotosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kPhotosRangeFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // .mavsdk.rpc.camera.PhotosRange photos_range = 2;
  void clear_photos_range();
  ::mavsdk::rpc::camera::PhotosRange photos_range() const;
  void set_photos_range(::mavsdk::rpc::camera::PhotosRange value);
  private:
  ::mavsdk::rpc::camera::PhotosRange _internal_photos_range() const;
  void _internal_set_photos_range(::mavsdk::rpc::camera::PhotosRange value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ListPhotosRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int photos_range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ListPhotosResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ListPhotosResponse) */ {
 public:
  inline ListPhotosResponse() : ListPhotosResponse(nullptr) {}
  ~ListPhotosResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPhotosResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhotosResponse(const ListPhotosResponse& from);
  ListPhotosResponse(ListPhotosResponse&& from) noexcept
    : ListPhotosResponse() {
    *this = ::std::move(from);
  }

  inline ListPhotosResponse& operator=(const ListPhotosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhotosResponse& operator=(ListPhotosResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhotosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhotosResponse* internal_default_instance() {
    return reinterpret_cast<const ListPhotosResponse*>(
               &_ListPhotosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListPhotosResponse& a, ListPhotosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhotosResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhotosResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhotosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhotosResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhotosResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhotosResponse& from) {
    ListPhotosResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhotosResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ListPhotosResponse";
  }
  protected:
  explicit ListPhotosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfosFieldNumber = 2,
    kCameraResultFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.CaptureInfo capture_infos = 2;
  int capture_infos_size() const;
  private:
  int _internal_capture_infos_size() const;
  public:
  void clear_capture_infos();
  ::mavsdk::rpc::camera::CaptureInfo* mutable_capture_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::CaptureInfo >*
      mutable_capture_infos();
  private:
  const ::mavsdk::rpc::camera::CaptureInfo& _internal_capture_infos(int index) const;
  ::mavsdk::rpc::camera::CaptureInfo* _internal_add_capture_infos();
  public:
  const ::mavsdk::rpc::camera::CaptureInfo& capture_infos(int index) const;
  ::mavsdk::rpc::camera::CaptureInfo* add_capture_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::CaptureInfo >&
      capture_infos() const;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ListPhotosResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::CaptureInfo > capture_infos_;
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCameraListRequest) */ {
 public:
  inline SubscribeCameraListRequest() : SubscribeCameraListRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCameraListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCameraListRequest(const SubscribeCameraListRequest& from);
  SubscribeCameraListRequest(SubscribeCameraListRequest&& from) noexcept
    : SubscribeCameraListRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraListRequest& operator=(const SubscribeCameraListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraListRequest& operator=(SubscribeCameraListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCameraListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCameraListRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraListRequest*>(
               &_SubscribeCameraListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SubscribeCameraListRequest& a, SubscribeCameraListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCameraListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCameraListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCameraListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCameraListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCameraListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCameraListRequest";
  }
  protected:
  explicit SubscribeCameraListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCameraListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraListResponse) */ {
 public:
  inline CameraListResponse() : CameraListResponse(nullptr) {}
  ~CameraListResponse() override;
  explicit PROTOBUF_CONSTEXPR CameraListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraListResponse(const CameraListResponse& from);
  CameraListResponse(CameraListResponse&& from) noexcept
    : CameraListResponse() {
    *this = ::std::move(from);
  }

  inline CameraListResponse& operator=(const CameraListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraListResponse& operator=(CameraListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraListResponse* internal_default_instance() {
    return reinterpret_cast<const CameraListResponse*>(
               &_CameraListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CameraListResponse& a, CameraListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraListResponse& from) {
    CameraListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraListResponse";
  }
  protected:
  explicit CameraListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraListFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraList camera_list = 1;
  bool has_camera_list() const;
  private:
  bool _internal_has_camera_list() const;
  public:
  void clear_camera_list();
  const ::mavsdk::rpc::camera::CameraList& camera_list() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraList* release_camera_list();
  ::mavsdk::rpc::camera::CameraList* mutable_camera_list();
  void set_allocated_camera_list(::mavsdk::rpc::camera::CameraList* camera_list);
  private:
  const ::mavsdk::rpc::camera::CameraList& _internal_camera_list() const;
  ::mavsdk::rpc::camera::CameraList* _internal_mutable_camera_list();
  public:
  void unsafe_arena_set_allocated_camera_list(
      ::mavsdk::rpc::camera::CameraList* camera_list);
  ::mavsdk::rpc::camera::CameraList* unsafe_arena_release_camera_list();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraList* camera_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ModeUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ModeUpdate) */ {
 public:
  inline ModeUpdate() : ModeUpdate(nullptr) {}
  ~ModeUpdate() override;
  explicit PROTOBUF_CONSTEXPR ModeUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeUpdate(const ModeUpdate& from);
  ModeUpdate(ModeUpdate&& from) noexcept
    : ModeUpdate() {
    *this = ::std::move(from);
  }

  inline ModeUpdate& operator=(const ModeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeUpdate& operator=(ModeUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeUpdate* internal_default_instance() {
    return reinterpret_cast<const ModeUpdate*>(
               &_ModeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ModeUpdate& a, ModeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeUpdate& from) {
    ModeUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ModeUpdate";
  }
  protected:
  explicit ModeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // .mavsdk.rpc.camera.Mode mode = 2;
  void clear_mode();
  ::mavsdk::rpc::camera::Mode mode() const;
  void set_mode(::mavsdk::rpc::camera::Mode value);
  private:
  ::mavsdk::rpc::camera::Mode _internal_mode() const;
  void _internal_set_mode(::mavsdk::rpc::camera::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ModeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeModeRequest) */ {
 public:
  inline SubscribeModeRequest() : SubscribeModeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeModeRequest(const SubscribeModeRequest& from);
  SubscribeModeRequest(SubscribeModeRequest&& from) noexcept
    : SubscribeModeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeModeRequest& operator=(const SubscribeModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeModeRequest& operator=(SubscribeModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeModeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeModeRequest*>(
               &_SubscribeModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SubscribeModeRequest& a, SubscribeModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeModeRequest";
  }
  protected:
  explicit SubscribeModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ModeResponse) */ {
 public:
  inline ModeResponse() : ModeResponse(nullptr) {}
  ~ModeResponse() override;
  explicit PROTOBUF_CONSTEXPR ModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeResponse(const ModeResponse& from);
  ModeResponse(ModeResponse&& from) noexcept
    : ModeResponse() {
    *this = ::std::move(from);
  }

  inline ModeResponse& operator=(const ModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeResponse& operator=(ModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeResponse* internal_default_instance() {
    return reinterpret_cast<const ModeResponse*>(
               &_ModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ModeResponse& a, ModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeResponse& from) {
    ModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ModeResponse";
  }
  protected:
  explicit ModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.ModeUpdate update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::mavsdk::rpc::camera::ModeUpdate& update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::ModeUpdate* release_update();
  ::mavsdk::rpc::camera::ModeUpdate* mutable_update();
  void set_allocated_update(::mavsdk::rpc::camera::ModeUpdate* update);
  private:
  const ::mavsdk::rpc::camera::ModeUpdate& _internal_update() const;
  ::mavsdk::rpc::camera::ModeUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::mavsdk::rpc::camera::ModeUpdate* update);
  ::mavsdk::rpc::camera::ModeUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::ModeUpdate* update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamUpdate) */ {
 public:
  inline VideoStreamUpdate() : VideoStreamUpdate(nullptr) {}
  ~VideoStreamUpdate() override;
  explicit PROTOBUF_CONSTEXPR VideoStreamUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoStreamUpdate(const VideoStreamUpdate& from);
  VideoStreamUpdate(VideoStreamUpdate&& from) noexcept
    : VideoStreamUpdate() {
    *this = ::std::move(from);
  }

  inline VideoStreamUpdate& operator=(const VideoStreamUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamUpdate& operator=(VideoStreamUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoStreamUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoStreamUpdate* internal_default_instance() {
    return reinterpret_cast<const VideoStreamUpdate*>(
               &_VideoStreamUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VideoStreamUpdate& a, VideoStreamUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStreamUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoStreamUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoStreamUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoStreamUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoStreamUpdate& from) {
    VideoStreamUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamUpdate";
  }
  protected:
  explicit VideoStreamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoStreamInfoFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 2;
  bool has_video_stream_info() const;
  private:
  bool _internal_has_video_stream_info() const;
  public:
  void clear_video_stream_info();
  const ::mavsdk::rpc::camera::VideoStreamInfo& video_stream_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::VideoStreamInfo* release_video_stream_info();
  ::mavsdk::rpc::camera::VideoStreamInfo* mutable_video_stream_info();
  void set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info);
  private:
  const ::mavsdk::rpc::camera::VideoStreamInfo& _internal_video_stream_info() const;
  ::mavsdk::rpc::camera::VideoStreamInfo* _internal_mutable_video_stream_info();
  public:
  void unsafe_arena_set_allocated_video_stream_info(
      ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info);
  ::mavsdk::rpc::camera::VideoStreamInfo* unsafe_arena_release_video_stream_info();

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeVideoStreamInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest) */ {
 public:
  inline SubscribeVideoStreamInfoRequest() : SubscribeVideoStreamInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeVideoStreamInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeVideoStreamInfoRequest(const SubscribeVideoStreamInfoRequest& from);
  SubscribeVideoStreamInfoRequest(SubscribeVideoStreamInfoRequest&& from) noexcept
    : SubscribeVideoStreamInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeVideoStreamInfoRequest& operator=(const SubscribeVideoStreamInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeVideoStreamInfoRequest& operator=(SubscribeVideoStreamInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeVideoStreamInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeVideoStreamInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeVideoStreamInfoRequest*>(
               &_SubscribeVideoStreamInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SubscribeVideoStreamInfoRequest& a, SubscribeVideoStreamInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeVideoStreamInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeVideoStreamInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeVideoStreamInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeVideoStreamInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeVideoStreamInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeVideoStreamInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest";
  }
  protected:
  explicit SubscribeVideoStreamInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamInfoResponse) */ {
 public:
  inline VideoStreamInfoResponse() : VideoStreamInfoResponse(nullptr) {}
  ~VideoStreamInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR VideoStreamInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoStreamInfoResponse(const VideoStreamInfoResponse& from);
  VideoStreamInfoResponse(VideoStreamInfoResponse&& from) noexcept
    : VideoStreamInfoResponse() {
    *this = ::std::move(from);
  }

  inline VideoStreamInfoResponse& operator=(const VideoStreamInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamInfoResponse& operator=(VideoStreamInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoStreamInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoStreamInfoResponse* internal_default_instance() {
    return reinterpret_cast<const VideoStreamInfoResponse*>(
               &_VideoStreamInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(VideoStreamInfoResponse& a, VideoStreamInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStreamInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoStreamInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoStreamInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoStreamInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoStreamInfoResponse& from) {
    VideoStreamInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamInfoResponse";
  }
  protected:
  explicit VideoStreamInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.VideoStreamUpdate update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::mavsdk::rpc::camera::VideoStreamUpdate& update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::VideoStreamUpdate* release_update();
  ::mavsdk::rpc::camera::VideoStreamUpdate* mutable_update();
  void set_allocated_update(::mavsdk::rpc::camera::VideoStreamUpdate* update);
  private:
  const ::mavsdk::rpc::camera::VideoStreamUpdate& _internal_update() const;
  ::mavsdk::rpc::camera::VideoStreamUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::mavsdk::rpc::camera::VideoStreamUpdate* update);
  ::mavsdk::rpc::camera::VideoStreamUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::VideoStreamUpdate* update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCaptureInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCaptureInfoRequest) */ {
 public:
  inline SubscribeCaptureInfoRequest() : SubscribeCaptureInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCaptureInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCaptureInfoRequest(const SubscribeCaptureInfoRequest& from);
  SubscribeCaptureInfoRequest(SubscribeCaptureInfoRequest&& from) noexcept
    : SubscribeCaptureInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCaptureInfoRequest& operator=(const SubscribeCaptureInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCaptureInfoRequest& operator=(SubscribeCaptureInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCaptureInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCaptureInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCaptureInfoRequest*>(
               &_SubscribeCaptureInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubscribeCaptureInfoRequest& a, SubscribeCaptureInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCaptureInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCaptureInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCaptureInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCaptureInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCaptureInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCaptureInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCaptureInfoRequest";
  }
  protected:
  explicit SubscribeCaptureInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CaptureInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CaptureInfoResponse) */ {
 public:
  inline CaptureInfoResponse() : CaptureInfoResponse(nullptr) {}
  ~CaptureInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR CaptureInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureInfoResponse(const CaptureInfoResponse& from);
  CaptureInfoResponse(CaptureInfoResponse&& from) noexcept
    : CaptureInfoResponse() {
    *this = ::std::move(from);
  }

  inline CaptureInfoResponse& operator=(const CaptureInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfoResponse& operator=(CaptureInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CaptureInfoResponse*>(
               &_CaptureInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CaptureInfoResponse& a, CaptureInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptureInfoResponse& from) {
    CaptureInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CaptureInfoResponse";
  }
  protected:
  explicit CaptureInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
  bool has_capture_info() const;
  private:
  bool _internal_has_capture_info() const;
  public:
  void clear_capture_info();
  const ::mavsdk::rpc::camera::CaptureInfo& capture_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CaptureInfo* release_capture_info();
  ::mavsdk::rpc::camera::CaptureInfo* mutable_capture_info();
  void set_allocated_capture_info(::mavsdk::rpc::camera::CaptureInfo* capture_info);
  private:
  const ::mavsdk::rpc::camera::CaptureInfo& _internal_capture_info() const;
  ::mavsdk::rpc::camera::CaptureInfo* _internal_mutable_capture_info();
  public:
  void unsafe_arena_set_allocated_capture_info(
      ::mavsdk::rpc::camera::CaptureInfo* capture_info);
  ::mavsdk::rpc::camera::CaptureInfo* unsafe_arena_release_capture_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CaptureInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CaptureInfo* capture_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Storage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Storage) */ {
 public:
  inline Storage() : Storage(nullptr) {}
  ~Storage() override;
  explicit PROTOBUF_CONSTEXPR Storage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Storage(const Storage& from);
  Storage(Storage&& from) noexcept
    : Storage() {
    *this = ::std::move(from);
  }

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Storage& operator=(Storage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Storage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Storage* internal_default_instance() {
    return reinterpret_cast<const Storage*>(
               &_Storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Storage& a, Storage& b) {
    a.Swap(&b);
  }
  inline void Swap(Storage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Storage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Storage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Storage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Storage& from) {
    Storage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Storage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Storage";
  }
  protected:
  explicit Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Storage_StorageStatus StorageStatus;
  static constexpr StorageStatus STORAGE_STATUS_NOT_AVAILABLE =
    Storage_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE;
  static constexpr StorageStatus STORAGE_STATUS_UNFORMATTED =
    Storage_StorageStatus_STORAGE_STATUS_UNFORMATTED;
  static constexpr StorageStatus STORAGE_STATUS_FORMATTED =
    Storage_StorageStatus_STORAGE_STATUS_FORMATTED;
  static constexpr StorageStatus STORAGE_STATUS_NOT_SUPPORTED =
    Storage_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED;
  static inline bool StorageStatus_IsValid(int value) {
    return Storage_StorageStatus_IsValid(value);
  }
  static constexpr StorageStatus StorageStatus_MIN =
    Storage_StorageStatus_StorageStatus_MIN;
  static constexpr StorageStatus StorageStatus_MAX =
    Storage_StorageStatus_StorageStatus_MAX;
  static constexpr int StorageStatus_ARRAYSIZE =
    Storage_StorageStatus_StorageStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageStatus_descriptor() {
    return Storage_StorageStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageStatus_Name.");
    return Storage_StorageStatus_Name(enum_t_value);
  }
  static inline bool StorageStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageStatus* value) {
    return Storage_StorageStatus_Parse(name, value);
  }

  typedef Storage_StorageType StorageType;
  static constexpr StorageType STORAGE_TYPE_UNKNOWN =
    Storage_StorageType_STORAGE_TYPE_UNKNOWN;
  static constexpr StorageType STORAGE_TYPE_USB_STICK =
    Storage_StorageType_STORAGE_TYPE_USB_STICK;
  static constexpr StorageType STORAGE_TYPE_SD =
    Storage_StorageType_STORAGE_TYPE_SD;
  static constexpr StorageType STORAGE_TYPE_MICROSD =
    Storage_StorageType_STORAGE_TYPE_MICROSD;
  static constexpr StorageType STORAGE_TYPE_HD =
    Storage_StorageType_STORAGE_TYPE_HD;
  static constexpr StorageType STORAGE_TYPE_OTHER =
    Storage_StorageType_STORAGE_TYPE_OTHER;
  static inline bool StorageType_IsValid(int value) {
    return Storage_StorageType_IsValid(value);
  }
  static constexpr StorageType StorageType_MIN =
    Storage_StorageType_StorageType_MIN;
  static constexpr StorageType StorageType_MAX =
    Storage_StorageType_StorageType_MAX;
  static constexpr int StorageType_ARRAYSIZE =
    Storage_StorageType_StorageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageType_descriptor() {
    return Storage_StorageType_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageType_Name.");
    return Storage_StorageType_Name(enum_t_value);
  }
  static inline bool StorageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageType* value) {
    return Storage_StorageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMediaFolderNameFieldNumber = 8,
    kComponentIdFieldNumber = 1,
    kVideoOnFieldNumber = 2,
    kPhotoIntervalOnFieldNumber = 3,
    kUsedStorageMibFieldNumber = 4,
    kAvailableStorageMibFieldNumber = 5,
    kTotalStorageMibFieldNumber = 6,
    kRecordingTimeSFieldNumber = 7,
    kStorageStatusFieldNumber = 9,
    kStorageIdFieldNumber = 10,
    kStorageTypeFieldNumber = 11,
  };
  // string media_folder_name = 8;
  void clear_media_folder_name();
  const std::string& media_folder_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_folder_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_folder_name();
  PROTOBUF_NODISCARD std::string* release_media_folder_name();
  void set_allocated_media_folder_name(std::string* media_folder_name);
  private:
  const std::string& _internal_media_folder_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_folder_name(const std::string& value);
  std::string* _internal_mutable_media_folder_name();
  public:

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // bool video_on = 2;
  void clear_video_on();
  bool video_on() const;
  void set_video_on(bool value);
  private:
  bool _internal_video_on() const;
  void _internal_set_video_on(bool value);
  public:

  // bool photo_interval_on = 3;
  void clear_photo_interval_on();
  bool photo_interval_on() const;
  void set_photo_interval_on(bool value);
  private:
  bool _internal_photo_interval_on() const;
  void _internal_set_photo_interval_on(bool value);
  public:

  // float used_storage_mib = 4;
  void clear_used_storage_mib();
  float used_storage_mib() const;
  void set_used_storage_mib(float value);
  private:
  float _internal_used_storage_mib() const;
  void _internal_set_used_storage_mib(float value);
  public:

  // float available_storage_mib = 5;
  void clear_available_storage_mib();
  float available_storage_mib() const;
  void set_available_storage_mib(float value);
  private:
  float _internal_available_storage_mib() const;
  void _internal_set_available_storage_mib(float value);
  public:

  // float total_storage_mib = 6;
  void clear_total_storage_mib();
  float total_storage_mib() const;
  void set_total_storage_mib(float value);
  private:
  float _internal_total_storage_mib() const;
  void _internal_set_total_storage_mib(float value);
  public:

  // float recording_time_s = 7;
  void clear_recording_time_s();
  float recording_time_s() const;
  void set_recording_time_s(float value);
  private:
  float _internal_recording_time_s() const;
  void _internal_set_recording_time_s(float value);
  public:

  // .mavsdk.rpc.camera.Storage.StorageStatus storage_status = 9;
  void clear_storage_status();
  ::mavsdk::rpc::camera::Storage_StorageStatus storage_status() const;
  void set_storage_status(::mavsdk::rpc::camera::Storage_StorageStatus value);
  private:
  ::mavsdk::rpc::camera::Storage_StorageStatus _internal_storage_status() const;
  void _internal_set_storage_status(::mavsdk::rpc::camera::Storage_StorageStatus value);
  public:

  // uint32 storage_id = 10;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // .mavsdk.rpc.camera.Storage.StorageType storage_type = 11;
  void clear_storage_type();
  ::mavsdk::rpc::camera::Storage_StorageType storage_type() const;
  void set_storage_type(::mavsdk::rpc::camera::Storage_StorageType value);
  private:
  ::mavsdk::rpc::camera::Storage_StorageType _internal_storage_type() const;
  void _internal_set_storage_type(::mavsdk::rpc::camera::Storage_StorageType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Storage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_folder_name_;
    int32_t component_id_;
    bool video_on_;
    bool photo_interval_on_;
    float used_storage_mib_;
    float available_storage_mib_;
    float total_storage_mib_;
    float recording_time_s_;
    int storage_status_;
    uint32_t storage_id_;
    int storage_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StorageUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StorageUpdate) */ {
 public:
  inline StorageUpdate() : StorageUpdate(nullptr) {}
  ~StorageUpdate() override;
  explicit PROTOBUF_CONSTEXPR StorageUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageUpdate(const StorageUpdate& from);
  StorageUpdate(StorageUpdate&& from) noexcept
    : StorageUpdate() {
    *this = ::std::move(from);
  }

  inline StorageUpdate& operator=(const StorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageUpdate& operator=(StorageUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageUpdate* internal_default_instance() {
    return reinterpret_cast<const StorageUpdate*>(
               &_StorageUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(StorageUpdate& a, StorageUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageUpdate& from) {
    StorageUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StorageUpdate";
  }
  protected:
  explicit StorageUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.Storage storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::mavsdk::rpc::camera::Storage& storage() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Storage* release_storage();
  ::mavsdk::rpc::camera::Storage* mutable_storage();
  void set_allocated_storage(::mavsdk::rpc::camera::Storage* storage);
  private:
  const ::mavsdk::rpc::camera::Storage& _internal_storage() const;
  ::mavsdk::rpc::camera::Storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::mavsdk::rpc::camera::Storage* storage);
  ::mavsdk::rpc::camera::Storage* unsafe_arena_release_storage();

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StorageUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::Storage* storage_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStorageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeStorageRequest) */ {
 public:
  inline SubscribeStorageRequest() : SubscribeStorageRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStorageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStorageRequest(const SubscribeStorageRequest& from);
  SubscribeStorageRequest(SubscribeStorageRequest&& from) noexcept
    : SubscribeStorageRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStorageRequest& operator=(const SubscribeStorageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStorageRequest& operator=(SubscribeStorageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStorageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStorageRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStorageRequest*>(
               &_SubscribeStorageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SubscribeStorageRequest& a, SubscribeStorageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStorageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStorageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStorageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStorageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStorageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStorageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeStorageRequest";
  }
  protected:
  explicit SubscribeStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeStorageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StorageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StorageResponse) */ {
 public:
  inline StorageResponse() : StorageResponse(nullptr) {}
  ~StorageResponse() override;
  explicit PROTOBUF_CONSTEXPR StorageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageResponse(const StorageResponse& from);
  StorageResponse(StorageResponse&& from) noexcept
    : StorageResponse() {
    *this = ::std::move(from);
  }

  inline StorageResponse& operator=(const StorageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageResponse& operator=(StorageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageResponse* internal_default_instance() {
    return reinterpret_cast<const StorageResponse*>(
               &_StorageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(StorageResponse& a, StorageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageResponse& from) {
    StorageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StorageResponse";
  }
  protected:
  explicit StorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.StorageUpdate update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::mavsdk::rpc::camera::StorageUpdate& update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::StorageUpdate* release_update();
  ::mavsdk::rpc::camera::StorageUpdate* mutable_update();
  void set_allocated_update(::mavsdk::rpc::camera::StorageUpdate* update);
  private:
  const ::mavsdk::rpc::camera::StorageUpdate& _internal_update() const;
  ::mavsdk::rpc::camera::StorageUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::mavsdk::rpc::camera::StorageUpdate* update);
  ::mavsdk::rpc::camera::StorageUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StorageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::StorageUpdate* update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CurrentSettingsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CurrentSettingsUpdate) */ {
 public:
  inline CurrentSettingsUpdate() : CurrentSettingsUpdate(nullptr) {}
  ~CurrentSettingsUpdate() override;
  explicit PROTOBUF_CONSTEXPR CurrentSettingsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentSettingsUpdate(const CurrentSettingsUpdate& from);
  CurrentSettingsUpdate(CurrentSettingsUpdate&& from) noexcept
    : CurrentSettingsUpdate() {
    *this = ::std::move(from);
  }

  inline CurrentSettingsUpdate& operator=(const CurrentSettingsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentSettingsUpdate& operator=(CurrentSettingsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentSettingsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentSettingsUpdate* internal_default_instance() {
    return reinterpret_cast<const CurrentSettingsUpdate*>(
               &_CurrentSettingsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CurrentSettingsUpdate& a, CurrentSettingsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentSettingsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentSettingsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentSettingsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentSettingsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentSettingsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrentSettingsUpdate& from) {
    CurrentSettingsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentSettingsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CurrentSettingsUpdate";
  }
  protected:
  explicit CurrentSettingsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSettingsFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.Setting current_settings = 2;
  int current_settings_size() const;
  private:
  int _internal_current_settings_size() const;
  public:
  void clear_current_settings();
  ::mavsdk::rpc::camera::Setting* mutable_current_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
      mutable_current_settings();
  private:
  const ::mavsdk::rpc::camera::Setting& _internal_current_settings(int index) const;
  ::mavsdk::rpc::camera::Setting* _internal_add_current_settings();
  public:
  const ::mavsdk::rpc::camera::Setting& current_settings(int index) const;
  ::mavsdk::rpc::camera::Setting* add_current_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
      current_settings() const;

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CurrentSettingsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting > current_settings_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCurrentSettingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest) */ {
 public:
  inline SubscribeCurrentSettingsRequest() : SubscribeCurrentSettingsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCurrentSettingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCurrentSettingsRequest(const SubscribeCurrentSettingsRequest& from);
  SubscribeCurrentSettingsRequest(SubscribeCurrentSettingsRequest&& from) noexcept
    : SubscribeCurrentSettingsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCurrentSettingsRequest& operator=(const SubscribeCurrentSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCurrentSettingsRequest& operator=(SubscribeCurrentSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCurrentSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCurrentSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCurrentSettingsRequest*>(
               &_SubscribeCurrentSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SubscribeCurrentSettingsRequest& a, SubscribeCurrentSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCurrentSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCurrentSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCurrentSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCurrentSettingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCurrentSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCurrentSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCurrentSettingsRequest";
  }
  protected:
  explicit SubscribeCurrentSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CurrentSettingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CurrentSettingsResponse) */ {
 public:
  inline CurrentSettingsResponse() : CurrentSettingsResponse(nullptr) {}
  ~CurrentSettingsResponse() override;
  explicit PROTOBUF_CONSTEXPR CurrentSettingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentSettingsResponse(const CurrentSettingsResponse& from);
  CurrentSettingsResponse(CurrentSettingsResponse&& from) noexcept
    : CurrentSettingsResponse() {
    *this = ::std::move(from);
  }

  inline CurrentSettingsResponse& operator=(const CurrentSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentSettingsResponse& operator=(CurrentSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const CurrentSettingsResponse*>(
               &_CurrentSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CurrentSettingsResponse& a, CurrentSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentSettingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentSettingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentSettingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrentSettingsResponse& from) {
    CurrentSettingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentSettingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CurrentSettingsResponse";
  }
  protected:
  explicit CurrentSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CurrentSettingsUpdate update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::mavsdk::rpc::camera::CurrentSettingsUpdate& update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CurrentSettingsUpdate* release_update();
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* mutable_update();
  void set_allocated_update(::mavsdk::rpc::camera::CurrentSettingsUpdate* update);
  private:
  const ::mavsdk::rpc::camera::CurrentSettingsUpdate& _internal_update() const;
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::mavsdk::rpc::camera::CurrentSettingsUpdate* update);
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CurrentSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CurrentSettingsUpdate* update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class PossibleSettingOptionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.PossibleSettingOptionsUpdate) */ {
 public:
  inline PossibleSettingOptionsUpdate() : PossibleSettingOptionsUpdate(nullptr) {}
  ~PossibleSettingOptionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR PossibleSettingOptionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PossibleSettingOptionsUpdate(const PossibleSettingOptionsUpdate& from);
  PossibleSettingOptionsUpdate(PossibleSettingOptionsUpdate&& from) noexcept
    : PossibleSettingOptionsUpdate() {
    *this = ::std::move(from);
  }

  inline PossibleSettingOptionsUpdate& operator=(const PossibleSettingOptionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PossibleSettingOptionsUpdate& operator=(PossibleSettingOptionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PossibleSettingOptionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PossibleSettingOptionsUpdate* internal_default_instance() {
    return reinterpret_cast<const PossibleSettingOptionsUpdate*>(
               &_PossibleSettingOptionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PossibleSettingOptionsUpdate& a, PossibleSettingOptionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PossibleSettingOptionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PossibleSettingOptionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PossibleSettingOptionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PossibleSettingOptionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PossibleSettingOptionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PossibleSettingOptionsUpdate& from) {
    PossibleSettingOptionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PossibleSettingOptionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.PossibleSettingOptionsUpdate";
  }
  protected:
  explicit PossibleSettingOptionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingOptionsFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 2;
  int setting_options_size() const;
  private:
  int _internal_setting_options_size() const;
  public:
  void clear_setting_options();
  ::mavsdk::rpc::camera::SettingOptions* mutable_setting_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
      mutable_setting_options();
  private:
  const ::mavsdk::rpc::camera::SettingOptions& _internal_setting_options(int index) const;
  ::mavsdk::rpc::camera::SettingOptions* _internal_add_setting_options();
  public:
  const ::mavsdk::rpc::camera::SettingOptions& setting_options(int index) const;
  ::mavsdk::rpc::camera::SettingOptions* add_setting_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
      setting_options() const;

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.PossibleSettingOptionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions > setting_options_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribePossibleSettingOptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest) */ {
 public:
  inline SubscribePossibleSettingOptionsRequest() : SubscribePossibleSettingOptionsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribePossibleSettingOptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribePossibleSettingOptionsRequest(const SubscribePossibleSettingOptionsRequest& from);
  SubscribePossibleSettingOptionsRequest(SubscribePossibleSettingOptionsRequest&& from) noexcept
    : SubscribePossibleSettingOptionsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribePossibleSettingOptionsRequest& operator=(const SubscribePossibleSettingOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribePossibleSettingOptionsRequest& operator=(SubscribePossibleSettingOptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribePossibleSettingOptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribePossibleSettingOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribePossibleSettingOptionsRequest*>(
               &_SubscribePossibleSettingOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SubscribePossibleSettingOptionsRequest& a, SubscribePossibleSettingOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribePossibleSettingOptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribePossibleSettingOptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribePossibleSettingOptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribePossibleSettingOptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribePossibleSettingOptionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribePossibleSettingOptionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest";
  }
  protected:
  explicit SubscribePossibleSettingOptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class PossibleSettingOptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.PossibleSettingOptionsResponse) */ {
 public:
  inline PossibleSettingOptionsResponse() : PossibleSettingOptionsResponse(nullptr) {}
  ~PossibleSettingOptionsResponse() override;
  explicit PROTOBUF_CONSTEXPR PossibleSettingOptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PossibleSettingOptionsResponse(const PossibleSettingOptionsResponse& from);
  PossibleSettingOptionsResponse(PossibleSettingOptionsResponse&& from) noexcept
    : PossibleSettingOptionsResponse() {
    *this = ::std::move(from);
  }

  inline PossibleSettingOptionsResponse& operator=(const PossibleSettingOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PossibleSettingOptionsResponse& operator=(PossibleSettingOptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PossibleSettingOptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PossibleSettingOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const PossibleSettingOptionsResponse*>(
               &_PossibleSettingOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PossibleSettingOptionsResponse& a, PossibleSettingOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PossibleSettingOptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PossibleSettingOptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PossibleSettingOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PossibleSettingOptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PossibleSettingOptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PossibleSettingOptionsResponse& from) {
    PossibleSettingOptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PossibleSettingOptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.PossibleSettingOptionsResponse";
  }
  protected:
  explicit PossibleSettingOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.PossibleSettingOptionsUpdate update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate& update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* release_update();
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* mutable_update();
  void set_allocated_update(::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* update);
  private:
  const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate& _internal_update() const;
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* update);
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetSettingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetSettingRequest) */ {
 public:
  inline SetSettingRequest() : SetSettingRequest(nullptr) {}
  ~SetSettingRequest() override;
  explicit PROTOBUF_CONSTEXPR SetSettingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSettingRequest(const SetSettingRequest& from);
  SetSettingRequest(SetSettingRequest&& from) noexcept
    : SetSettingRequest() {
    *this = ::std::move(from);
  }

  inline SetSettingRequest& operator=(const SetSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSettingRequest& operator=(SetSettingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSettingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSettingRequest* internal_default_instance() {
    return reinterpret_cast<const SetSettingRequest*>(
               &_SetSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SetSettingRequest& a, SetSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSettingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSettingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSettingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetSettingRequest& from) {
    SetSettingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSettingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetSettingRequest";
  }
  protected:
  explicit SetSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.Setting setting = 2;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::mavsdk::rpc::camera::Setting& setting() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Setting* release_setting();
  ::mavsdk::rpc::camera::Setting* mutable_setting();
  void set_allocated_setting(::mavsdk::rpc::camera::Setting* setting);
  private:
  const ::mavsdk::rpc::camera::Setting& _internal_setting() const;
  ::mavsdk::rpc::camera::Setting* _internal_mutable_setting();
  public:
  void unsafe_arena_set_allocated_setting(
      ::mavsdk::rpc::camera::Setting* setting);
  ::mavsdk::rpc::camera::Setting* unsafe_arena_release_setting();

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetSettingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::Setting* setting_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetSettingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetSettingResponse) */ {
 public:
  inline SetSettingResponse() : SetSettingResponse(nullptr) {}
  ~SetSettingResponse() override;
  explicit PROTOBUF_CONSTEXPR SetSettingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSettingResponse(const SetSettingResponse& from);
  SetSettingResponse(SetSettingResponse&& from) noexcept
    : SetSettingResponse() {
    *this = ::std::move(from);
  }

  inline SetSettingResponse& operator=(const SetSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSettingResponse& operator=(SetSettingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSettingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSettingResponse* internal_default_instance() {
    return reinterpret_cast<const SetSettingResponse*>(
               &_SetSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SetSettingResponse& a, SetSettingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSettingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSettingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSettingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSettingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetSettingResponse& from) {
    SetSettingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSettingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetSettingResponse";
  }
  protected:
  explicit SetSettingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetSettingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetModeRequest) */ {
 public:
  inline GetModeRequest() : GetModeRequest(nullptr) {}
  ~GetModeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModeRequest(const GetModeRequest& from);
  GetModeRequest(GetModeRequest&& from) noexcept
    : GetModeRequest() {
    *this = ::std::move(from);
  }

  inline GetModeRequest& operator=(const GetModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModeRequest& operator=(GetModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModeRequest* internal_default_instance() {
    return reinterpret_cast<const GetModeRequest*>(
               &_GetModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetModeRequest& a, GetModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModeRequest& from) {
    GetModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetModeRequest";
  }
  protected:
  explicit GetModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetModeResponse) */ {
 public:
  inline GetModeResponse() : GetModeResponse(nullptr) {}
  ~GetModeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModeResponse(const GetModeResponse& from);
  GetModeResponse(GetModeResponse&& from) noexcept
    : GetModeResponse() {
    *this = ::std::move(from);
  }

  inline GetModeResponse& operator=(const GetModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModeResponse& operator=(GetModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModeResponse* internal_default_instance() {
    return reinterpret_cast<const GetModeResponse*>(
               &_GetModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetModeResponse& a, GetModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModeResponse& from) {
    GetModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetModeResponse";
  }
  protected:
  explicit GetModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // .mavsdk.rpc.camera.Mode mode = 2;
  void clear_mode();
  ::mavsdk::rpc::camera::Mode mode() const;
  void set_mode(::mavsdk::rpc::camera::Mode value);
  private:
  ::mavsdk::rpc::camera::Mode _internal_mode() const;
  void _internal_set_mode(::mavsdk::rpc::camera::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetVideoStreamInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetVideoStreamInfoRequest) */ {
 public:
  inline GetVideoStreamInfoRequest() : GetVideoStreamInfoRequest(nullptr) {}
  ~GetVideoStreamInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVideoStreamInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVideoStreamInfoRequest(const GetVideoStreamInfoRequest& from);
  GetVideoStreamInfoRequest(GetVideoStreamInfoRequest&& from) noexcept
    : GetVideoStreamInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetVideoStreamInfoRequest& operator=(const GetVideoStreamInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoStreamInfoRequest& operator=(GetVideoStreamInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVideoStreamInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVideoStreamInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetVideoStreamInfoRequest*>(
               &_GetVideoStreamInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetVideoStreamInfoRequest& a, GetVideoStreamInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVideoStreamInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVideoStreamInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVideoStreamInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVideoStreamInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVideoStreamInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVideoStreamInfoRequest& from) {
    GetVideoStreamInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoStreamInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetVideoStreamInfoRequest";
  }
  protected:
  explicit GetVideoStreamInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetVideoStreamInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetVideoStreamInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetVideoStreamInfoResponse) */ {
 public:
  inline GetVideoStreamInfoResponse() : GetVideoStreamInfoResponse(nullptr) {}
  ~GetVideoStreamInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVideoStreamInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVideoStreamInfoResponse(const GetVideoStreamInfoResponse& from);
  GetVideoStreamInfoResponse(GetVideoStreamInfoResponse&& from) noexcept
    : GetVideoStreamInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetVideoStreamInfoResponse& operator=(const GetVideoStreamInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoStreamInfoResponse& operator=(GetVideoStreamInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVideoStreamInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVideoStreamInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetVideoStreamInfoResponse*>(
               &_GetVideoStreamInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetVideoStreamInfoResponse& a, GetVideoStreamInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVideoStreamInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVideoStreamInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVideoStreamInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVideoStreamInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVideoStreamInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVideoStreamInfoResponse& from) {
    GetVideoStreamInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoStreamInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetVideoStreamInfoResponse";
  }
  protected:
  explicit GetVideoStreamInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
    kVideoStreamInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 2;
  bool has_video_stream_info() const;
  private:
  bool _internal_has_video_stream_info() const;
  public:
  void clear_video_stream_info();
  const ::mavsdk::rpc::camera::VideoStreamInfo& video_stream_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::VideoStreamInfo* release_video_stream_info();
  ::mavsdk::rpc::camera::VideoStreamInfo* mutable_video_stream_info();
  void set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info);
  private:
  const ::mavsdk::rpc::camera::VideoStreamInfo& _internal_video_stream_info() const;
  ::mavsdk::rpc::camera::VideoStreamInfo* _internal_mutable_video_stream_info();
  public:
  void unsafe_arena_set_allocated_video_stream_info(
      ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info);
  ::mavsdk::rpc::camera::VideoStreamInfo* unsafe_arena_release_video_stream_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetVideoStreamInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetStorageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetStorageRequest) */ {
 public:
  inline GetStorageRequest() : GetStorageRequest(nullptr) {}
  ~GetStorageRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStorageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStorageRequest(const GetStorageRequest& from);
  GetStorageRequest(GetStorageRequest&& from) noexcept
    : GetStorageRequest() {
    *this = ::std::move(from);
  }

  inline GetStorageRequest& operator=(const GetStorageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStorageRequest& operator=(GetStorageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStorageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStorageRequest* internal_default_instance() {
    return reinterpret_cast<const GetStorageRequest*>(
               &_GetStorageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetStorageRequest& a, GetStorageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStorageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStorageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStorageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStorageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStorageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStorageRequest& from) {
    GetStorageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStorageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetStorageRequest";
  }
  protected:
  explicit GetStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetStorageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetStorageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetStorageResponse) */ {
 public:
  inline GetStorageResponse() : GetStorageResponse(nullptr) {}
  ~GetStorageResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStorageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStorageResponse(const GetStorageResponse& from);
  GetStorageResponse(GetStorageResponse&& from) noexcept
    : GetStorageResponse() {
    *this = ::std::move(from);
  }

  inline GetStorageResponse& operator=(const GetStorageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStorageResponse& operator=(GetStorageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStorageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStorageResponse* internal_default_instance() {
    return reinterpret_cast<const GetStorageResponse*>(
               &_GetStorageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetStorageResponse& a, GetStorageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStorageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStorageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStorageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStorageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStorageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStorageResponse& from) {
    GetStorageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStorageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetStorageResponse";
  }
  protected:
  explicit GetStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
    kStorageFieldNumber = 2,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // .mavsdk.rpc.camera.Storage storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::mavsdk::rpc::camera::Storage& storage() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Storage* release_storage();
  ::mavsdk::rpc::camera::Storage* mutable_storage();
  void set_allocated_storage(::mavsdk::rpc::camera::Storage* storage);
  private:
  const ::mavsdk::rpc::camera::Storage& _internal_storage() const;
  ::mavsdk::rpc::camera::Storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::mavsdk::rpc::camera::Storage* storage);
  ::mavsdk::rpc::camera::Storage* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetStorageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    ::mavsdk::rpc::camera::Storage* storage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentSettingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetCurrentSettingsRequest) */ {
 public:
  inline GetCurrentSettingsRequest() : GetCurrentSettingsRequest(nullptr) {}
  ~GetCurrentSettingsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCurrentSettingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentSettingsRequest(const GetCurrentSettingsRequest& from);
  GetCurrentSettingsRequest(GetCurrentSettingsRequest&& from) noexcept
    : GetCurrentSettingsRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentSettingsRequest& operator=(const GetCurrentSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentSettingsRequest& operator=(GetCurrentSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentSettingsRequest*>(
               &_GetCurrentSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetCurrentSettingsRequest& a, GetCurrentSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentSettingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentSettingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCurrentSettingsRequest& from) {
    GetCurrentSettingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentSettingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetCurrentSettingsRequest";
  }
  protected:
  explicit GetCurrentSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetCurrentSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentSettingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetCurrentSettingsResponse) */ {
 public:
  inline GetCurrentSettingsResponse() : GetCurrentSettingsResponse(nullptr) {}
  ~GetCurrentSettingsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCurrentSettingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentSettingsResponse(const GetCurrentSettingsResponse& from);
  GetCurrentSettingsResponse(GetCurrentSettingsResponse&& from) noexcept
    : GetCurrentSettingsResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentSettingsResponse& operator=(const GetCurrentSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentSettingsResponse& operator=(GetCurrentSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentSettingsResponse*>(
               &_GetCurrentSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetCurrentSettingsResponse& a, GetCurrentSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentSettingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentSettingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentSettingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCurrentSettingsResponse& from) {
    GetCurrentSettingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentSettingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetCurrentSettingsResponse";
  }
  protected:
  explicit GetCurrentSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSettingsFieldNumber = 2,
    kCameraResultFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.Setting current_settings = 2;
  int current_settings_size() const;
  private:
  int _internal_current_settings_size() const;
  public:
  void clear_current_settings();
  ::mavsdk::rpc::camera::Setting* mutable_current_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
      mutable_current_settings();
  private:
  const ::mavsdk::rpc::camera::Setting& _internal_current_settings(int index) const;
  ::mavsdk::rpc::camera::Setting* _internal_add_current_settings();
  public:
  const ::mavsdk::rpc::camera::Setting& current_settings(int index) const;
  ::mavsdk::rpc::camera::Setting* add_current_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
      current_settings() const;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetCurrentSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting > current_settings_;
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPossibleSettingOptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetPossibleSettingOptionsRequest) */ {
 public:
  inline GetPossibleSettingOptionsRequest() : GetPossibleSettingOptionsRequest(nullptr) {}
  ~GetPossibleSettingOptionsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPossibleSettingOptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPossibleSettingOptionsRequest(const GetPossibleSettingOptionsRequest& from);
  GetPossibleSettingOptionsRequest(GetPossibleSettingOptionsRequest&& from) noexcept
    : GetPossibleSettingOptionsRequest() {
    *this = ::std::move(from);
  }

  inline GetPossibleSettingOptionsRequest& operator=(const GetPossibleSettingOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPossibleSettingOptionsRequest& operator=(GetPossibleSettingOptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPossibleSettingOptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPossibleSettingOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPossibleSettingOptionsRequest*>(
               &_GetPossibleSettingOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetPossibleSettingOptionsRequest& a, GetPossibleSettingOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPossibleSettingOptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPossibleSettingOptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPossibleSettingOptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPossibleSettingOptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPossibleSettingOptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPossibleSettingOptionsRequest& from) {
    GetPossibleSettingOptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPossibleSettingOptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetPossibleSettingOptionsRequest";
  }
  protected:
  explicit GetPossibleSettingOptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetPossibleSettingOptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPossibleSettingOptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse) */ {
 public:
  inline GetPossibleSettingOptionsResponse() : GetPossibleSettingOptionsResponse(nullptr) {}
  ~GetPossibleSettingOptionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPossibleSettingOptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPossibleSettingOptionsResponse(const GetPossibleSettingOptionsResponse& from);
  GetPossibleSettingOptionsResponse(GetPossibleSettingOptionsResponse&& from) noexcept
    : GetPossibleSettingOptionsResponse() {
    *this = ::std::move(from);
  }

  inline GetPossibleSettingOptionsResponse& operator=(const GetPossibleSettingOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPossibleSettingOptionsResponse& operator=(GetPossibleSettingOptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPossibleSettingOptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPossibleSettingOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPossibleSettingOptionsResponse*>(
               &_GetPossibleSettingOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetPossibleSettingOptionsResponse& a, GetPossibleSettingOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPossibleSettingOptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPossibleSettingOptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPossibleSettingOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPossibleSettingOptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPossibleSettingOptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPossibleSettingOptionsResponse& from) {
    GetPossibleSettingOptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPossibleSettingOptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetPossibleSettingOptionsResponse";
  }
  protected:
  explicit GetPossibleSettingOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingOptionsFieldNumber = 2,
    kCameraResultFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 2;
  int setting_options_size() const;
  private:
  int _internal_setting_options_size() const;
  public:
  void clear_setting_options();
  ::mavsdk::rpc::camera::SettingOptions* mutable_setting_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
      mutable_setting_options();
  private:
  const ::mavsdk::rpc::camera::SettingOptions& _internal_setting_options(int index) const;
  ::mavsdk::rpc::camera::SettingOptions* _internal_add_setting_options();
  public:
  const ::mavsdk::rpc::camera::SettingOptions& setting_options(int index) const;
  ::mavsdk::rpc::camera::SettingOptions* add_setting_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
      setting_options() const;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions > setting_options_;
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetSettingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetSettingRequest) */ {
 public:
  inline GetSettingRequest() : GetSettingRequest(nullptr) {}
  ~GetSettingRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSettingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSettingRequest(const GetSettingRequest& from);
  GetSettingRequest(GetSettingRequest&& from) noexcept
    : GetSettingRequest() {
    *this = ::std::move(from);
  }

  inline GetSettingRequest& operator=(const GetSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSettingRequest& operator=(GetSettingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSettingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSettingRequest* internal_default_instance() {
    return reinterpret_cast<const GetSettingRequest*>(
               &_GetSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetSettingRequest& a, GetSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSettingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSettingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSettingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSettingRequest& from) {
    GetSettingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSettingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetSettingRequest";
  }
  protected:
  explicit GetSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingFieldNumber = 2,
    kComponentIdFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.Setting setting = 2;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::mavsdk::rpc::camera::Setting& setting() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Setting* release_setting();
  ::mavsdk::rpc::camera::Setting* mutable_setting();
  void set_allocated_setting(::mavsdk::rpc::camera::Setting* setting);
  private:
  const ::mavsdk::rpc::camera::Setting& _internal_setting() const;
  ::mavsdk::rpc::camera::Setting* _internal_mutable_setting();
  public:
  void unsafe_arena_set_allocated_setting(
      ::mavsdk::rpc::camera::Setting* setting);
  ::mavsdk::rpc::camera::Setting* unsafe_arena_release_setting();

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetSettingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::Setting* setting_;
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetSettingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.GetSettingResponse) */ {
 public:
  inline GetSettingResponse() : GetSettingResponse(nullptr) {}
  ~GetSettingResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSettingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSettingResponse(const GetSettingResponse& from);
  GetSettingResponse(GetSettingResponse&& from) noexcept
    : GetSettingResponse() {
    *this = ::std::move(from);
  }

  inline GetSettingResponse& operator=(const GetSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSettingResponse& operator=(GetSettingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSettingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSettingResponse* internal_default_instance() {
    return reinterpret_cast<const GetSettingResponse*>(
               &_GetSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetSettingResponse& a, GetSettingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSettingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSettingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSettingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSettingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSettingResponse& from) {
    GetSettingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSettingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.GetSettingResponse";
  }
  protected:
  explicit GetSettingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
    kSettingFieldNumber = 2,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // .mavsdk.rpc.camera.Setting setting = 2;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::mavsdk::rpc::camera::Setting& setting() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Setting* release_setting();
  ::mavsdk::rpc::camera::Setting* mutable_setting();
  void set_allocated_setting(::mavsdk::rpc::camera::Setting* setting);
  private:
  const ::mavsdk::rpc::camera::Setting& _internal_setting() const;
  ::mavsdk::rpc::camera::Setting* _internal_mutable_setting();
  public:
  void unsafe_arena_set_allocated_setting(
      ::mavsdk::rpc::camera::Setting* setting);
  ::mavsdk::rpc::camera::Setting* unsafe_arena_release_setting();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.GetSettingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    ::mavsdk::rpc::camera::Setting* setting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FormatStorageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FormatStorageRequest) */ {
 public:
  inline FormatStorageRequest() : FormatStorageRequest(nullptr) {}
  ~FormatStorageRequest() override;
  explicit PROTOBUF_CONSTEXPR FormatStorageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStorageRequest(const FormatStorageRequest& from);
  FormatStorageRequest(FormatStorageRequest&& from) noexcept
    : FormatStorageRequest() {
    *this = ::std::move(from);
  }

  inline FormatStorageRequest& operator=(const FormatStorageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStorageRequest& operator=(FormatStorageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStorageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStorageRequest* internal_default_instance() {
    return reinterpret_cast<const FormatStorageRequest*>(
               &_FormatStorageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FormatStorageRequest& a, FormatStorageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStorageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStorageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormatStorageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormatStorageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormatStorageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormatStorageRequest& from) {
    FormatStorageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStorageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FormatStorageRequest";
  }
  protected:
  explicit FormatStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kStorageIdFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // int32 storage_id = 2;
  void clear_storage_id();
  int32_t storage_id() const;
  void set_storage_id(int32_t value);
  private:
  int32_t _internal_storage_id() const;
  void _internal_set_storage_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FormatStorageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    int32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FormatStorageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FormatStorageResponse) */ {
 public:
  inline FormatStorageResponse() : FormatStorageResponse(nullptr) {}
  ~FormatStorageResponse() override;
  explicit PROTOBUF_CONSTEXPR FormatStorageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStorageResponse(const FormatStorageResponse& from);
  FormatStorageResponse(FormatStorageResponse&& from) noexcept
    : FormatStorageResponse() {
    *this = ::std::move(from);
  }

  inline FormatStorageResponse& operator=(const FormatStorageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStorageResponse& operator=(FormatStorageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStorageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStorageResponse* internal_default_instance() {
    return reinterpret_cast<const FormatStorageResponse*>(
               &_FormatStorageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(FormatStorageResponse& a, FormatStorageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStorageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStorageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormatStorageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormatStorageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormatStorageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormatStorageResponse& from) {
    FormatStorageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStorageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FormatStorageResponse";
  }
  protected:
  explicit FormatStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FormatStorageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ResetSettingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ResetSettingsRequest) */ {
 public:
  inline ResetSettingsRequest() : ResetSettingsRequest(nullptr) {}
  ~ResetSettingsRequest() override;
  explicit PROTOBUF_CONSTEXPR ResetSettingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetSettingsRequest(const ResetSettingsRequest& from);
  ResetSettingsRequest(ResetSettingsRequest&& from) noexcept
    : ResetSettingsRequest() {
    *this = ::std::move(from);
  }

  inline ResetSettingsRequest& operator=(const ResetSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetSettingsRequest& operator=(ResetSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const ResetSettingsRequest*>(
               &_ResetSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ResetSettingsRequest& a, ResetSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetSettingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetSettingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResetSettingsRequest& from) {
    ResetSettingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetSettingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ResetSettingsRequest";
  }
  protected:
  explicit ResetSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ResetSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ResetSettingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ResetSettingsResponse) */ {
 public:
  inline ResetSettingsResponse() : ResetSettingsResponse(nullptr) {}
  ~ResetSettingsResponse() override;
  explicit PROTOBUF_CONSTEXPR ResetSettingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetSettingsResponse(const ResetSettingsResponse& from);
  ResetSettingsResponse(ResetSettingsResponse&& from) noexcept
    : ResetSettingsResponse() {
    *this = ::std::move(from);
  }

  inline ResetSettingsResponse& operator=(const ResetSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetSettingsResponse& operator=(ResetSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const ResetSettingsResponse*>(
               &_ResetSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ResetSettingsResponse& a, ResetSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetSettingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetSettingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetSettingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResetSettingsResponse& from) {
    ResetSettingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetSettingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ResetSettingsResponse";
  }
  protected:
  explicit ResetSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ResetSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomInStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomInStartRequest) */ {
 public:
  inline ZoomInStartRequest() : ZoomInStartRequest(nullptr) {}
  ~ZoomInStartRequest() override;
  explicit PROTOBUF_CONSTEXPR ZoomInStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomInStartRequest(const ZoomInStartRequest& from);
  ZoomInStartRequest(ZoomInStartRequest&& from) noexcept
    : ZoomInStartRequest() {
    *this = ::std::move(from);
  }

  inline ZoomInStartRequest& operator=(const ZoomInStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomInStartRequest& operator=(ZoomInStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomInStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomInStartRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomInStartRequest*>(
               &_ZoomInStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ZoomInStartRequest& a, ZoomInStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomInStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomInStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomInStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomInStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomInStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomInStartRequest& from) {
    ZoomInStartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomInStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomInStartRequest";
  }
  protected:
  explicit ZoomInStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomInStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomInStartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomInStartResponse) */ {
 public:
  inline ZoomInStartResponse() : ZoomInStartResponse(nullptr) {}
  ~ZoomInStartResponse() override;
  explicit PROTOBUF_CONSTEXPR ZoomInStartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomInStartResponse(const ZoomInStartResponse& from);
  ZoomInStartResponse(ZoomInStartResponse&& from) noexcept
    : ZoomInStartResponse() {
    *this = ::std::move(from);
  }

  inline ZoomInStartResponse& operator=(const ZoomInStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomInStartResponse& operator=(ZoomInStartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomInStartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomInStartResponse* internal_default_instance() {
    return reinterpret_cast<const ZoomInStartResponse*>(
               &_ZoomInStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ZoomInStartResponse& a, ZoomInStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomInStartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomInStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomInStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomInStartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomInStartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomInStartResponse& from) {
    ZoomInStartResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomInStartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomInStartResponse";
  }
  protected:
  explicit ZoomInStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomInStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomOutStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomOutStartRequest) */ {
 public:
  inline ZoomOutStartRequest() : ZoomOutStartRequest(nullptr) {}
  ~ZoomOutStartRequest() override;
  explicit PROTOBUF_CONSTEXPR ZoomOutStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomOutStartRequest(const ZoomOutStartRequest& from);
  ZoomOutStartRequest(ZoomOutStartRequest&& from) noexcept
    : ZoomOutStartRequest() {
    *this = ::std::move(from);
  }

  inline ZoomOutStartRequest& operator=(const ZoomOutStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomOutStartRequest& operator=(ZoomOutStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomOutStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomOutStartRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomOutStartRequest*>(
               &_ZoomOutStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ZoomOutStartRequest& a, ZoomOutStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomOutStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomOutStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomOutStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomOutStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomOutStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomOutStartRequest& from) {
    ZoomOutStartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomOutStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomOutStartRequest";
  }
  protected:
  explicit ZoomOutStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomOutStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomOutStartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomOutStartResponse) */ {
 public:
  inline ZoomOutStartResponse() : ZoomOutStartResponse(nullptr) {}
  ~ZoomOutStartResponse() override;
  explicit PROTOBUF_CONSTEXPR ZoomOutStartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomOutStartResponse(const ZoomOutStartResponse& from);
  ZoomOutStartResponse(ZoomOutStartResponse&& from) noexcept
    : ZoomOutStartResponse() {
    *this = ::std::move(from);
  }

  inline ZoomOutStartResponse& operator=(const ZoomOutStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomOutStartResponse& operator=(ZoomOutStartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomOutStartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomOutStartResponse* internal_default_instance() {
    return reinterpret_cast<const ZoomOutStartResponse*>(
               &_ZoomOutStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ZoomOutStartResponse& a, ZoomOutStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomOutStartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomOutStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomOutStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomOutStartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomOutStartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomOutStartResponse& from) {
    ZoomOutStartResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomOutStartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomOutStartResponse";
  }
  protected:
  explicit ZoomOutStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomOutStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomStopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomStopRequest) */ {
 public:
  inline ZoomStopRequest() : ZoomStopRequest(nullptr) {}
  ~ZoomStopRequest() override;
  explicit PROTOBUF_CONSTEXPR ZoomStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomStopRequest(const ZoomStopRequest& from);
  ZoomStopRequest(ZoomStopRequest&& from) noexcept
    : ZoomStopRequest() {
    *this = ::std::move(from);
  }

  inline ZoomStopRequest& operator=(const ZoomStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomStopRequest& operator=(ZoomStopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomStopRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomStopRequest*>(
               &_ZoomStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ZoomStopRequest& a, ZoomStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomStopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomStopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomStopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomStopRequest& from) {
    ZoomStopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomStopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomStopRequest";
  }
  protected:
  explicit ZoomStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomStopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomStopResponse) */ {
 public:
  inline ZoomStopResponse() : ZoomStopResponse(nullptr) {}
  ~ZoomStopResponse() override;
  explicit PROTOBUF_CONSTEXPR ZoomStopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomStopResponse(const ZoomStopResponse& from);
  ZoomStopResponse(ZoomStopResponse&& from) noexcept
    : ZoomStopResponse() {
    *this = ::std::move(from);
  }

  inline ZoomStopResponse& operator=(const ZoomStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomStopResponse& operator=(ZoomStopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomStopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomStopResponse* internal_default_instance() {
    return reinterpret_cast<const ZoomStopResponse*>(
               &_ZoomStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ZoomStopResponse& a, ZoomStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomStopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomStopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomStopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomStopResponse& from) {
    ZoomStopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomStopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomStopResponse";
  }
  protected:
  explicit ZoomStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomRangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomRangeRequest) */ {
 public:
  inline ZoomRangeRequest() : ZoomRangeRequest(nullptr) {}
  ~ZoomRangeRequest() override;
  explicit PROTOBUF_CONSTEXPR ZoomRangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomRangeRequest(const ZoomRangeRequest& from);
  ZoomRangeRequest(ZoomRangeRequest&& from) noexcept
    : ZoomRangeRequest() {
    *this = ::std::move(from);
  }

  inline ZoomRangeRequest& operator=(const ZoomRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomRangeRequest& operator=(ZoomRangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomRangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomRangeRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomRangeRequest*>(
               &_ZoomRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ZoomRangeRequest& a, ZoomRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomRangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomRangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomRangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomRangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomRangeRequest& from) {
    ZoomRangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomRangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomRangeRequest";
  }
  protected:
  explicit ZoomRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float range = 2;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomRangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    float range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ZoomRangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ZoomRangeResponse) */ {
 public:
  inline ZoomRangeResponse() : ZoomRangeResponse(nullptr) {}
  ~ZoomRangeResponse() override;
  explicit PROTOBUF_CONSTEXPR ZoomRangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomRangeResponse(const ZoomRangeResponse& from);
  ZoomRangeResponse(ZoomRangeResponse&& from) noexcept
    : ZoomRangeResponse() {
    *this = ::std::move(from);
  }

  inline ZoomRangeResponse& operator=(const ZoomRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomRangeResponse& operator=(ZoomRangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomRangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomRangeResponse* internal_default_instance() {
    return reinterpret_cast<const ZoomRangeResponse*>(
               &_ZoomRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ZoomRangeResponse& a, ZoomRangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomRangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomRangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomRangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomRangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoomRangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoomRangeResponse& from) {
    ZoomRangeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomRangeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ZoomRangeResponse";
  }
  protected:
  explicit ZoomRangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ZoomRangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackPointRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackPointRequest) */ {
 public:
  inline TrackPointRequest() : TrackPointRequest(nullptr) {}
  ~TrackPointRequest() override;
  explicit PROTOBUF_CONSTEXPR TrackPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackPointRequest(const TrackPointRequest& from);
  TrackPointRequest(TrackPointRequest&& from) noexcept
    : TrackPointRequest() {
    *this = ::std::move(from);
  }

  inline TrackPointRequest& operator=(const TrackPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPointRequest& operator=(TrackPointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackPointRequest* internal_default_instance() {
    return reinterpret_cast<const TrackPointRequest*>(
               &_TrackPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TrackPointRequest& a, TrackPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackPointRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackPointRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackPointRequest& from) {
    TrackPointRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPointRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackPointRequest";
  }
  protected:
  explicit TrackPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kPointXFieldNumber = 2,
    kPointYFieldNumber = 3,
    kRadiusFieldNumber = 4,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float point_x = 2;
  void clear_point_x();
  float point_x() const;
  void set_point_x(float value);
  private:
  float _internal_point_x() const;
  void _internal_set_point_x(float value);
  public:

  // float point_y = 3;
  void clear_point_y();
  float point_y() const;
  void set_point_y(float value);
  private:
  float _internal_point_y() const;
  void _internal_set_point_y(float value);
  public:

  // float radius = 4;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    float point_x_;
    float point_y_;
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackPointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackPointResponse) */ {
 public:
  inline TrackPointResponse() : TrackPointResponse(nullptr) {}
  ~TrackPointResponse() override;
  explicit PROTOBUF_CONSTEXPR TrackPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackPointResponse(const TrackPointResponse& from);
  TrackPointResponse(TrackPointResponse&& from) noexcept
    : TrackPointResponse() {
    *this = ::std::move(from);
  }

  inline TrackPointResponse& operator=(const TrackPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPointResponse& operator=(TrackPointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackPointResponse* internal_default_instance() {
    return reinterpret_cast<const TrackPointResponse*>(
               &_TrackPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TrackPointResponse& a, TrackPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackPointResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackPointResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackPointResponse& from) {
    TrackPointResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackPointResponse";
  }
  protected:
  explicit TrackPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackRectangleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackRectangleRequest) */ {
 public:
  inline TrackRectangleRequest() : TrackRectangleRequest(nullptr) {}
  ~TrackRectangleRequest() override;
  explicit PROTOBUF_CONSTEXPR TrackRectangleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackRectangleRequest(const TrackRectangleRequest& from);
  TrackRectangleRequest(TrackRectangleRequest&& from) noexcept
    : TrackRectangleRequest() {
    *this = ::std::move(from);
  }

  inline TrackRectangleRequest& operator=(const TrackRectangleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackRectangleRequest& operator=(TrackRectangleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackRectangleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackRectangleRequest* internal_default_instance() {
    return reinterpret_cast<const TrackRectangleRequest*>(
               &_TrackRectangleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TrackRectangleRequest& a, TrackRectangleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackRectangleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackRectangleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackRectangleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackRectangleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackRectangleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackRectangleRequest& from) {
    TrackRectangleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackRectangleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackRectangleRequest";
  }
  protected:
  explicit TrackRectangleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kTopLeftXFieldNumber = 2,
    kTopLeftYFieldNumber = 3,
    kBottomRightXFieldNumber = 4,
    kBottomRightYFieldNumber = 5,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float top_left_x = 2;
  void clear_top_left_x();
  float top_left_x() const;
  void set_top_left_x(float value);
  private:
  float _internal_top_left_x() const;
  void _internal_set_top_left_x(float value);
  public:

  // float top_left_y = 3;
  void clear_top_left_y();
  float top_left_y() const;
  void set_top_left_y(float value);
  private:
  float _internal_top_left_y() const;
  void _internal_set_top_left_y(float value);
  public:

  // float bottom_right_x = 4;
  void clear_bottom_right_x();
  float bottom_right_x() const;
  void set_bottom_right_x(float value);
  private:
  float _internal_bottom_right_x() const;
  void _internal_set_bottom_right_x(float value);
  public:

  // float bottom_right_y = 5;
  void clear_bottom_right_y();
  float bottom_right_y() const;
  void set_bottom_right_y(float value);
  private:
  float _internal_bottom_right_y() const;
  void _internal_set_bottom_right_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackRectangleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    float top_left_x_;
    float top_left_y_;
    float bottom_right_x_;
    float bottom_right_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackRectangleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackRectangleResponse) */ {
 public:
  inline TrackRectangleResponse() : TrackRectangleResponse(nullptr) {}
  ~TrackRectangleResponse() override;
  explicit PROTOBUF_CONSTEXPR TrackRectangleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackRectangleResponse(const TrackRectangleResponse& from);
  TrackRectangleResponse(TrackRectangleResponse&& from) noexcept
    : TrackRectangleResponse() {
    *this = ::std::move(from);
  }

  inline TrackRectangleResponse& operator=(const TrackRectangleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackRectangleResponse& operator=(TrackRectangleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackRectangleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackRectangleResponse* internal_default_instance() {
    return reinterpret_cast<const TrackRectangleResponse*>(
               &_TrackRectangleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(TrackRectangleResponse& a, TrackRectangleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackRectangleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackRectangleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackRectangleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackRectangleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackRectangleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackRectangleResponse& from) {
    TrackRectangleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackRectangleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackRectangleResponse";
  }
  protected:
  explicit TrackRectangleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackRectangleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackStopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackStopRequest) */ {
 public:
  inline TrackStopRequest() : TrackStopRequest(nullptr) {}
  ~TrackStopRequest() override;
  explicit PROTOBUF_CONSTEXPR TrackStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStopRequest(const TrackStopRequest& from);
  TrackStopRequest(TrackStopRequest&& from) noexcept
    : TrackStopRequest() {
    *this = ::std::move(from);
  }

  inline TrackStopRequest& operator=(const TrackStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStopRequest& operator=(TrackStopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStopRequest* internal_default_instance() {
    return reinterpret_cast<const TrackStopRequest*>(
               &_TrackStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TrackStopRequest& a, TrackStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackStopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackStopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackStopRequest& from) {
    TrackStopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackStopRequest";
  }
  protected:
  explicit TrackStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackStopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TrackStopResponse) */ {
 public:
  inline TrackStopResponse() : TrackStopResponse(nullptr) {}
  ~TrackStopResponse() override;
  explicit PROTOBUF_CONSTEXPR TrackStopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStopResponse(const TrackStopResponse& from);
  TrackStopResponse(TrackStopResponse&& from) noexcept
    : TrackStopResponse() {
    *this = ::std::move(from);
  }

  inline TrackStopResponse& operator=(const TrackStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStopResponse& operator=(TrackStopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStopResponse* internal_default_instance() {
    return reinterpret_cast<const TrackStopResponse*>(
               &_TrackStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TrackStopResponse& a, TrackStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackStopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackStopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackStopResponse& from) {
    TrackStopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TrackStopResponse";
  }
  protected:
  explicit TrackStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TrackStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusInStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusInStartRequest) */ {
 public:
  inline FocusInStartRequest() : FocusInStartRequest(nullptr) {}
  ~FocusInStartRequest() override;
  explicit PROTOBUF_CONSTEXPR FocusInStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusInStartRequest(const FocusInStartRequest& from);
  FocusInStartRequest(FocusInStartRequest&& from) noexcept
    : FocusInStartRequest() {
    *this = ::std::move(from);
  }

  inline FocusInStartRequest& operator=(const FocusInStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusInStartRequest& operator=(FocusInStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusInStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusInStartRequest* internal_default_instance() {
    return reinterpret_cast<const FocusInStartRequest*>(
               &_FocusInStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(FocusInStartRequest& a, FocusInStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusInStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusInStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusInStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusInStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusInStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusInStartRequest& from) {
    FocusInStartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusInStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusInStartRequest";
  }
  protected:
  explicit FocusInStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusInStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusInStartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusInStartResponse) */ {
 public:
  inline FocusInStartResponse() : FocusInStartResponse(nullptr) {}
  ~FocusInStartResponse() override;
  explicit PROTOBUF_CONSTEXPR FocusInStartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusInStartResponse(const FocusInStartResponse& from);
  FocusInStartResponse(FocusInStartResponse&& from) noexcept
    : FocusInStartResponse() {
    *this = ::std::move(from);
  }

  inline FocusInStartResponse& operator=(const FocusInStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusInStartResponse& operator=(FocusInStartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusInStartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusInStartResponse* internal_default_instance() {
    return reinterpret_cast<const FocusInStartResponse*>(
               &_FocusInStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(FocusInStartResponse& a, FocusInStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusInStartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusInStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusInStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusInStartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusInStartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusInStartResponse& from) {
    FocusInStartResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusInStartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusInStartResponse";
  }
  protected:
  explicit FocusInStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusInStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusOutStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusOutStartRequest) */ {
 public:
  inline FocusOutStartRequest() : FocusOutStartRequest(nullptr) {}
  ~FocusOutStartRequest() override;
  explicit PROTOBUF_CONSTEXPR FocusOutStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusOutStartRequest(const FocusOutStartRequest& from);
  FocusOutStartRequest(FocusOutStartRequest&& from) noexcept
    : FocusOutStartRequest() {
    *this = ::std::move(from);
  }

  inline FocusOutStartRequest& operator=(const FocusOutStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusOutStartRequest& operator=(FocusOutStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusOutStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusOutStartRequest* internal_default_instance() {
    return reinterpret_cast<const FocusOutStartRequest*>(
               &_FocusOutStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(FocusOutStartRequest& a, FocusOutStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusOutStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusOutStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusOutStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusOutStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusOutStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusOutStartRequest& from) {
    FocusOutStartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusOutStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusOutStartRequest";
  }
  protected:
  explicit FocusOutStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusOutStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusOutStartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusOutStartResponse) */ {
 public:
  inline FocusOutStartResponse() : FocusOutStartResponse(nullptr) {}
  ~FocusOutStartResponse() override;
  explicit PROTOBUF_CONSTEXPR FocusOutStartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusOutStartResponse(const FocusOutStartResponse& from);
  FocusOutStartResponse(FocusOutStartResponse&& from) noexcept
    : FocusOutStartResponse() {
    *this = ::std::move(from);
  }

  inline FocusOutStartResponse& operator=(const FocusOutStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusOutStartResponse& operator=(FocusOutStartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusOutStartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusOutStartResponse* internal_default_instance() {
    return reinterpret_cast<const FocusOutStartResponse*>(
               &_FocusOutStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(FocusOutStartResponse& a, FocusOutStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusOutStartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusOutStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusOutStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusOutStartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusOutStartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusOutStartResponse& from) {
    FocusOutStartResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusOutStartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusOutStartResponse";
  }
  protected:
  explicit FocusOutStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusOutStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusStopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusStopRequest) */ {
 public:
  inline FocusStopRequest() : FocusStopRequest(nullptr) {}
  ~FocusStopRequest() override;
  explicit PROTOBUF_CONSTEXPR FocusStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusStopRequest(const FocusStopRequest& from);
  FocusStopRequest(FocusStopRequest&& from) noexcept
    : FocusStopRequest() {
    *this = ::std::move(from);
  }

  inline FocusStopRequest& operator=(const FocusStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusStopRequest& operator=(FocusStopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusStopRequest* internal_default_instance() {
    return reinterpret_cast<const FocusStopRequest*>(
               &_FocusStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FocusStopRequest& a, FocusStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusStopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusStopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusStopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusStopRequest& from) {
    FocusStopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusStopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusStopRequest";
  }
  protected:
  explicit FocusStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusStopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusStopResponse) */ {
 public:
  inline FocusStopResponse() : FocusStopResponse(nullptr) {}
  ~FocusStopResponse() override;
  explicit PROTOBUF_CONSTEXPR FocusStopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusStopResponse(const FocusStopResponse& from);
  FocusStopResponse(FocusStopResponse&& from) noexcept
    : FocusStopResponse() {
    *this = ::std::move(from);
  }

  inline FocusStopResponse& operator=(const FocusStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusStopResponse& operator=(FocusStopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusStopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusStopResponse* internal_default_instance() {
    return reinterpret_cast<const FocusStopResponse*>(
               &_FocusStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(FocusStopResponse& a, FocusStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusStopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusStopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusStopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusStopResponse& from) {
    FocusStopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusStopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusStopResponse";
  }
  protected:
  explicit FocusStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusRangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusRangeRequest) */ {
 public:
  inline FocusRangeRequest() : FocusRangeRequest(nullptr) {}
  ~FocusRangeRequest() override;
  explicit PROTOBUF_CONSTEXPR FocusRangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusRangeRequest(const FocusRangeRequest& from);
  FocusRangeRequest(FocusRangeRequest&& from) noexcept
    : FocusRangeRequest() {
    *this = ::std::move(from);
  }

  inline FocusRangeRequest& operator=(const FocusRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusRangeRequest& operator=(FocusRangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusRangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusRangeRequest* internal_default_instance() {
    return reinterpret_cast<const FocusRangeRequest*>(
               &_FocusRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(FocusRangeRequest& a, FocusRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusRangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusRangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusRangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusRangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusRangeRequest& from) {
    FocusRangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusRangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusRangeRequest";
  }
  protected:
  explicit FocusRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float range = 2;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusRangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t component_id_;
    float range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusRangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.FocusRangeResponse) */ {
 public:
  inline FocusRangeResponse() : FocusRangeResponse(nullptr) {}
  ~FocusRangeResponse() override;
  explicit PROTOBUF_CONSTEXPR FocusRangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusRangeResponse(const FocusRangeResponse& from);
  FocusRangeResponse(FocusRangeResponse&& from) noexcept
    : FocusRangeResponse() {
    *this = ::std::move(from);
  }

  inline FocusRangeResponse& operator=(const FocusRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusRangeResponse& operator=(FocusRangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusRangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusRangeResponse* internal_default_instance() {
    return reinterpret_cast<const FocusRangeResponse*>(
               &_FocusRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(FocusRangeResponse& a, FocusRangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusRangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusRangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusRangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusRangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusRangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FocusRangeResponse& from) {
    FocusRangeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusRangeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.FocusRangeResponse";
  }
  protected:
  explicit FocusRangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);
  private:
  const ::mavsdk::rpc::camera::CameraResult& _internal_camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* _internal_mutable_camera_result();
  public:
  void unsafe_arena_set_allocated_camera_result(
      ::mavsdk::rpc::camera::CameraResult* camera_result);
  ::mavsdk::rpc::camera::CameraResult* unsafe_arena_release_camera_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.FocusRangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::camera::CameraResult* camera_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraResult) */ {
 public:
  inline CameraResult() : CameraResult(nullptr) {}
  ~CameraResult() override;
  explicit PROTOBUF_CONSTEXPR CameraResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraResult(const CameraResult& from);
  CameraResult(CameraResult&& from) noexcept
    : CameraResult() {
    *this = ::std::move(from);
  }

  inline CameraResult& operator=(const CameraResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraResult& operator=(CameraResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraResult* internal_default_instance() {
    return reinterpret_cast<const CameraResult*>(
               &_CameraResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CameraResult& a, CameraResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraResult& from) {
    CameraResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraResult";
  }
  protected:
  explicit CameraResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    CameraResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    CameraResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_IN_PROGRESS =
    CameraResult_Result_RESULT_IN_PROGRESS;
  static constexpr Result RESULT_BUSY =
    CameraResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_DENIED =
    CameraResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_ERROR =
    CameraResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT =
    CameraResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_WRONG_ARGUMENT =
    CameraResult_Result_RESULT_WRONG_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM =
    CameraResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_PROTOCOL_UNSUPPORTED =
    CameraResult_Result_RESULT_PROTOCOL_UNSUPPORTED;
  static constexpr Result RESULT_UNAVAILABLE =
    CameraResult_Result_RESULT_UNAVAILABLE;
  static constexpr Result RESULT_CAMERA_ID_INVALID =
    CameraResult_Result_RESULT_CAMERA_ID_INVALID;
  static constexpr Result RESULT_ACTION_UNSUPPORTED =
    CameraResult_Result_RESULT_ACTION_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return CameraResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CameraResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CameraResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CameraResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CameraResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CameraResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CameraResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.camera.CameraResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::camera::CameraResult_Result result() const;
  void set_result(::mavsdk::rpc::camera::CameraResult_Result value);
  private:
  ::mavsdk::rpc::camera::CameraResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::camera::CameraResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float relative_altitude_m = 4;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_deg_;
    double longitude_deg_;
    float absolute_altitude_m_;
    float relative_altitude_m_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() override;
  explicit PROTOBUF_CONSTEXPR EulerAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EulerAngle& from) {
    EulerAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.EulerAngle";
  }
  protected:
  explicit EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.EulerAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_deg_;
    float pitch_deg_;
    float yaw_deg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CaptureInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CaptureInfo) */ {
 public:
  inline CaptureInfo() : CaptureInfo(nullptr) {}
  ~CaptureInfo() override;
  explicit PROTOBUF_CONSTEXPR CaptureInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureInfo(const CaptureInfo& from);
  CaptureInfo(CaptureInfo&& from) noexcept
    : CaptureInfo() {
    *this = ::std::move(from);
  }

  inline CaptureInfo& operator=(const CaptureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfo& operator=(CaptureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInfo* internal_default_instance() {
    return reinterpret_cast<const CaptureInfo*>(
               &_CaptureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CaptureInfo& a, CaptureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptureInfo& from) {
    CaptureInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CaptureInfo";
  }
  protected:
  explicit CaptureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileUrlFieldNumber = 8,
    kPositionFieldNumber = 2,
    kAttitudeQuaternionFieldNumber = 3,
    kAttitudeEulerAngleFieldNumber = 4,
    kComponentIdFieldNumber = 1,
    kIsSuccessFieldNumber = 6,
    kTimeUtcUsFieldNumber = 5,
    kIndexFieldNumber = 7,
  };
  // string file_url = 8;
  void clear_file_url();
  const std::string& file_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_url();
  PROTOBUF_NODISCARD std::string* release_file_url();
  void set_allocated_file_url(std::string* file_url);
  private:
  const std::string& _internal_file_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_url(const std::string& value);
  std::string* _internal_mutable_file_url();
  public:

  // .mavsdk.rpc.camera.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::camera::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Position* release_position();
  ::mavsdk::rpc::camera::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::camera::Position* position);
  private:
  const ::mavsdk::rpc::camera::Position& _internal_position() const;
  ::mavsdk::rpc::camera::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::camera::Position* position);
  ::mavsdk::rpc::camera::Position* unsafe_arena_release_position();

  // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 3;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::camera::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::camera::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::camera::Quaternion* attitude_quaternion);
  private:
  const ::mavsdk::rpc::camera::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::camera::Quaternion* _internal_mutable_attitude_quaternion();
  public:
  void unsafe_arena_set_allocated_attitude_quaternion(
      ::mavsdk::rpc::camera::Quaternion* attitude_quaternion);
  ::mavsdk::rpc::camera::Quaternion* unsafe_arena_release_attitude_quaternion();

  // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 4;
  bool has_attitude_euler_angle() const;
  private:
  bool _internal_has_attitude_euler_angle() const;
  public:
  void clear_attitude_euler_angle();
  const ::mavsdk::rpc::camera::EulerAngle& attitude_euler_angle() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera::EulerAngle* release_attitude_euler_angle();
  ::mavsdk::rpc::camera::EulerAngle* mutable_attitude_euler_angle();
  void set_allocated_attitude_euler_angle(::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle);
  private:
  const ::mavsdk::rpc::camera::EulerAngle& _internal_attitude_euler_angle() const;
  ::mavsdk::rpc::camera::EulerAngle* _internal_mutable_attitude_euler_angle();
  public:
  void unsafe_arena_set_allocated_attitude_euler_angle(
      ::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle);
  ::mavsdk::rpc::camera::EulerAngle* unsafe_arena_release_attitude_euler_angle();

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // bool is_success = 6;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // uint64 time_utc_us = 5;
  void clear_time_utc_us();
  uint64_t time_utc_us() const;
  void set_time_utc_us(uint64_t value);
  private:
  uint64_t _internal_time_utc_us() const;
  void _internal_set_time_utc_us(uint64_t value);
  public:

  // int32 index = 7;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CaptureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_url_;
    ::mavsdk::rpc::camera::Position* position_;
    ::mavsdk::rpc::camera::Quaternion* attitude_quaternion_;
    ::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle_;
    int32_t component_id_;
    bool is_success_;
    uint64_t time_utc_us_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Information final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  ~Information() override;
  explicit PROTOBUF_CONSTEXPR Information(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Information& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Information& from) {
    Information::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 2,
    kModelNameFieldNumber = 3,
    kComponentIdFieldNumber = 1,
    kFocalLengthMmFieldNumber = 4,
    kHorizontalSensorSizeMmFieldNumber = 5,
    kVerticalSensorSizeMmFieldNumber = 6,
    kHorizontalResolutionPxFieldNumber = 7,
    kVerticalResolutionPxFieldNumber = 8,
  };
  // string vendor_name = 2;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_name();
  PROTOBUF_NODISCARD std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string model_name = 3;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // int32 component_id = 1;
  void clear_component_id();
  int32_t component_id() const;
  void set_component_id(int32_t value);
  private:
  int32_t _internal_component_id() const;
  void _internal_set_component_id(int32_t value);
  public:

  // float focal_length_mm = 4;
  void clear_focal_length_mm();
  float focal_length_mm() const;
  void set_focal_length_mm(float value);
  private:
  float _internal_focal_length_mm() const;
  void _internal_set_focal_length_mm(float value);
  public:

  // float horizontal_sensor_size_mm = 5;
  void clear_horizontal_sensor_size_mm();
  float horizontal_sensor_size_mm() const;
  void set_horizontal_sensor_size_mm(float value);
  private:
  float _internal_horizontal_sensor_size_mm() const;
  void _internal_set_horizontal_sensor_size_mm(float value);
  public:

  // float vertical_sensor_size_mm = 6;
  void clear_vertical_sensor_size_mm();
  float vertical_sensor_size_mm() const;
  void set_vertical_sensor_size_mm(float value);
  private:
  float _internal_vertical_sensor_size_mm() const;
  void _internal_set_vertical_sensor_size_mm(float value);
  public:

  // uint32 horizontal_resolution_px = 7;
  void clear_horizontal_resolution_px();
  uint32_t horizontal_resolution_px() const;
  void set_horizontal_resolution_px(uint32_t value);
  private:
  uint32_t _internal_horizontal_resolution_px() const;
  void _internal_set_horizontal_resolution_px(uint32_t value);
  public:

  // uint32 vertical_resolution_px = 8;
  void clear_vertical_resolution_px();
  uint32_t vertical_resolution_px() const;
  void set_vertical_resolution_px(uint32_t value);
  private:
  uint32_t _internal_vertical_resolution_px() const;
  void _internal_set_vertical_resolution_px(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Information)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    int32_t component_id_;
    float focal_length_mm_;
    float horizontal_sensor_size_mm_;
    float vertical_sensor_size_mm_;
    uint32_t horizontal_resolution_px_;
    uint32_t vertical_resolution_px_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraList) */ {
 public:
  inline CameraList() : CameraList(nullptr) {}
  ~CameraList() override;
  explicit PROTOBUF_CONSTEXPR CameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraList(const CameraList& from);
  CameraList(CameraList&& from) noexcept
    : CameraList() {
    *this = ::std::move(from);
  }

  inline CameraList& operator=(const CameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraList& operator=(CameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraList* internal_default_instance() {
    return reinterpret_cast<const CameraList*>(
               &_CameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CameraList& a, CameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraList& from) {
    CameraList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraList";
  }
  protected:
  explicit CameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.Information cameras = 1;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::mavsdk::rpc::camera::Information* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Information >*
      mutable_cameras();
  private:
  const ::mavsdk::rpc::camera::Information& _internal_cameras(int index) const;
  ::mavsdk::rpc::camera::Information* _internal_add_cameras();
  public:
  const ::mavsdk::rpc::camera::Information& cameras(int index) const;
  ::mavsdk::rpc::camera::Information* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Information >&
      cameras() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Information > cameras_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Option

// string option_id = 1;
inline void Option::clear_option_id() {
  _impl_.option_id_.ClearToEmpty();
}
inline const std::string& Option::option_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Option.option_id)
  return _internal_option_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Option::set_option_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.option_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Option.option_id)
}
inline std::string* Option::mutable_option_id() {
  std::string* _s = _internal_mutable_option_id();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Option.option_id)
  return _s;
}
inline const std::string& Option::_internal_option_id() const {
  return _impl_.option_id_.Get();
}
inline void Option::_internal_set_option_id(const std::string& value) {
  
  _impl_.option_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Option::_internal_mutable_option_id() {
  
  return _impl_.option_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Option::release_option_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Option.option_id)
  return _impl_.option_id_.Release();
}
inline void Option::set_allocated_option_id(std::string* option_id) {
  if (option_id != nullptr) {
    
  } else {
    
  }
  _impl_.option_id_.SetAllocated(option_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.option_id_.IsDefault()) {
    _impl_.option_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Option.option_id)
}

// string option_description = 2;
inline void Option::clear_option_description() {
  _impl_.option_description_.ClearToEmpty();
}
inline const std::string& Option::option_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Option.option_description)
  return _internal_option_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Option::set_option_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.option_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Option.option_description)
}
inline std::string* Option::mutable_option_description() {
  std::string* _s = _internal_mutable_option_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Option.option_description)
  return _s;
}
inline const std::string& Option::_internal_option_description() const {
  return _impl_.option_description_.Get();
}
inline void Option::_internal_set_option_description(const std::string& value) {
  
  _impl_.option_description_.Set(value, GetArenaForAllocation());
}
inline std::string* Option::_internal_mutable_option_description() {
  
  return _impl_.option_description_.Mutable(GetArenaForAllocation());
}
inline std::string* Option::release_option_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Option.option_description)
  return _impl_.option_description_.Release();
}
inline void Option::set_allocated_option_description(std::string* option_description) {
  if (option_description != nullptr) {
    
  } else {
    
  }
  _impl_.option_description_.SetAllocated(option_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.option_description_.IsDefault()) {
    _impl_.option_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Option.option_description)
}

// -------------------------------------------------------------------

// Setting

// string setting_id = 1;
inline void Setting::clear_setting_id() {
  _impl_.setting_id_.ClearToEmpty();
}
inline const std::string& Setting::setting_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.setting_id)
  return _internal_setting_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Setting::set_setting_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Setting.setting_id)
}
inline std::string* Setting::mutable_setting_id() {
  std::string* _s = _internal_mutable_setting_id();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.setting_id)
  return _s;
}
inline const std::string& Setting::_internal_setting_id() const {
  return _impl_.setting_id_.Get();
}
inline void Setting::_internal_set_setting_id(const std::string& value) {
  
  _impl_.setting_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Setting::_internal_mutable_setting_id() {
  
  return _impl_.setting_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Setting::release_setting_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.setting_id)
  return _impl_.setting_id_.Release();
}
inline void Setting::set_allocated_setting_id(std::string* setting_id) {
  if (setting_id != nullptr) {
    
  } else {
    
  }
  _impl_.setting_id_.SetAllocated(setting_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_id_.IsDefault()) {
    _impl_.setting_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.setting_id)
}

// string setting_description = 2;
inline void Setting::clear_setting_description() {
  _impl_.setting_description_.ClearToEmpty();
}
inline const std::string& Setting::setting_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.setting_description)
  return _internal_setting_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Setting::set_setting_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Setting.setting_description)
}
inline std::string* Setting::mutable_setting_description() {
  std::string* _s = _internal_mutable_setting_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.setting_description)
  return _s;
}
inline const std::string& Setting::_internal_setting_description() const {
  return _impl_.setting_description_.Get();
}
inline void Setting::_internal_set_setting_description(const std::string& value) {
  
  _impl_.setting_description_.Set(value, GetArenaForAllocation());
}
inline std::string* Setting::_internal_mutable_setting_description() {
  
  return _impl_.setting_description_.Mutable(GetArenaForAllocation());
}
inline std::string* Setting::release_setting_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.setting_description)
  return _impl_.setting_description_.Release();
}
inline void Setting::set_allocated_setting_description(std::string* setting_description) {
  if (setting_description != nullptr) {
    
  } else {
    
  }
  _impl_.setting_description_.SetAllocated(setting_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_description_.IsDefault()) {
    _impl_.setting_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.setting_description)
}

// .mavsdk.rpc.camera.Option option = 3;
inline bool Setting::_internal_has_option() const {
  return this != internal_default_instance() && _impl_.option_ != nullptr;
}
inline bool Setting::has_option() const {
  return _internal_has_option();
}
inline void Setting::clear_option() {
  if (GetArenaForAllocation() == nullptr && _impl_.option_ != nullptr) {
    delete _impl_.option_;
  }
  _impl_.option_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Option& Setting::_internal_option() const {
  const ::mavsdk::rpc::camera::Option* p = _impl_.option_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Option&>(
      ::mavsdk::rpc::camera::_Option_default_instance_);
}
inline const ::mavsdk::rpc::camera::Option& Setting::option() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.option)
  return _internal_option();
}
inline void Setting::unsafe_arena_set_allocated_option(
    ::mavsdk::rpc::camera::Option* option) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.option_);
  }
  _impl_.option_ = option;
  if (option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.Setting.option)
}
inline ::mavsdk::rpc::camera::Option* Setting::release_option() {
  
  ::mavsdk::rpc::camera::Option* temp = _impl_.option_;
  _impl_.option_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Option* Setting::unsafe_arena_release_option() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.option)
  
  ::mavsdk::rpc::camera::Option* temp = _impl_.option_;
  _impl_.option_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Option* Setting::_internal_mutable_option() {
  
  if (_impl_.option_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Option>(GetArenaForAllocation());
    _impl_.option_ = p;
  }
  return _impl_.option_;
}
inline ::mavsdk::rpc::camera::Option* Setting::mutable_option() {
  ::mavsdk::rpc::camera::Option* _msg = _internal_mutable_option();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.option)
  return _msg;
}
inline void Setting::set_allocated_option(::mavsdk::rpc::camera::Option* option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.option_;
  }
  if (option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(option);
    if (message_arena != submessage_arena) {
      option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, option, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.option_ = option;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.option)
}

// bool is_range = 4;
inline void Setting::clear_is_range() {
  _impl_.is_range_ = false;
}
inline bool Setting::_internal_is_range() const {
  return _impl_.is_range_;
}
inline bool Setting::is_range() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.is_range)
  return _internal_is_range();
}
inline void Setting::_internal_set_is_range(bool value) {
  
  _impl_.is_range_ = value;
}
inline void Setting::set_is_range(bool value) {
  _internal_set_is_range(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Setting.is_range)
}

// -------------------------------------------------------------------

// SettingOptions

// int32 component_id = 1;
inline void SettingOptions::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t SettingOptions::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t SettingOptions::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.component_id)
  return _internal_component_id();
}
inline void SettingOptions::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void SettingOptions::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.component_id)
}

// string setting_id = 2;
inline void SettingOptions::clear_setting_id() {
  _impl_.setting_id_.ClearToEmpty();
}
inline const std::string& SettingOptions::setting_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.setting_id)
  return _internal_setting_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingOptions::set_setting_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.setting_id)
}
inline std::string* SettingOptions::mutable_setting_id() {
  std::string* _s = _internal_mutable_setting_id();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.setting_id)
  return _s;
}
inline const std::string& SettingOptions::_internal_setting_id() const {
  return _impl_.setting_id_.Get();
}
inline void SettingOptions::_internal_set_setting_id(const std::string& value) {
  
  _impl_.setting_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingOptions::_internal_mutable_setting_id() {
  
  return _impl_.setting_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingOptions::release_setting_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SettingOptions.setting_id)
  return _impl_.setting_id_.Release();
}
inline void SettingOptions::set_allocated_setting_id(std::string* setting_id) {
  if (setting_id != nullptr) {
    
  } else {
    
  }
  _impl_.setting_id_.SetAllocated(setting_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_id_.IsDefault()) {
    _impl_.setting_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SettingOptions.setting_id)
}

// string setting_description = 3;
inline void SettingOptions::clear_setting_description() {
  _impl_.setting_description_.ClearToEmpty();
}
inline const std::string& SettingOptions::setting_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.setting_description)
  return _internal_setting_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingOptions::set_setting_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.setting_description)
}
inline std::string* SettingOptions::mutable_setting_description() {
  std::string* _s = _internal_mutable_setting_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.setting_description)
  return _s;
}
inline const std::string& SettingOptions::_internal_setting_description() const {
  return _impl_.setting_description_.Get();
}
inline void SettingOptions::_internal_set_setting_description(const std::string& value) {
  
  _impl_.setting_description_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingOptions::_internal_mutable_setting_description() {
  
  return _impl_.setting_description_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingOptions::release_setting_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SettingOptions.setting_description)
  return _impl_.setting_description_.Release();
}
inline void SettingOptions::set_allocated_setting_description(std::string* setting_description) {
  if (setting_description != nullptr) {
    
  } else {
    
  }
  _impl_.setting_description_.SetAllocated(setting_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_description_.IsDefault()) {
    _impl_.setting_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SettingOptions.setting_description)
}

// repeated .mavsdk.rpc.camera.Option options = 4;
inline int SettingOptions::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int SettingOptions::options_size() const {
  return _internal_options_size();
}
inline void SettingOptions::clear_options() {
  _impl_.options_.Clear();
}
inline ::mavsdk::rpc::camera::Option* SettingOptions::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.options)
  return _impl_.options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >*
SettingOptions::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.SettingOptions.options)
  return &_impl_.options_;
}
inline const ::mavsdk::rpc::camera::Option& SettingOptions::_internal_options(int index) const {
  return _impl_.options_.Get(index);
}
inline const ::mavsdk::rpc::camera::Option& SettingOptions::options(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.options)
  return _internal_options(index);
}
inline ::mavsdk::rpc::camera::Option* SettingOptions::_internal_add_options() {
  return _impl_.options_.Add();
}
inline ::mavsdk::rpc::camera::Option* SettingOptions::add_options() {
  ::mavsdk::rpc::camera::Option* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.SettingOptions.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >&
SettingOptions::options() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.SettingOptions.options)
  return _impl_.options_;
}

// bool is_range = 5;
inline void SettingOptions::clear_is_range() {
  _impl_.is_range_ = false;
}
inline bool SettingOptions::_internal_is_range() const {
  return _impl_.is_range_;
}
inline bool SettingOptions::is_range() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.is_range)
  return _internal_is_range();
}
inline void SettingOptions::_internal_set_is_range(bool value) {
  
  _impl_.is_range_ = value;
}
inline void SettingOptions::set_is_range(bool value) {
  _internal_set_is_range(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.is_range)
}

// -------------------------------------------------------------------

// VideoStreamSettings

// float frame_rate_hz = 1;
inline void VideoStreamSettings::clear_frame_rate_hz() {
  _impl_.frame_rate_hz_ = 0;
}
inline float VideoStreamSettings::_internal_frame_rate_hz() const {
  return _impl_.frame_rate_hz_;
}
inline float VideoStreamSettings::frame_rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.frame_rate_hz)
  return _internal_frame_rate_hz();
}
inline void VideoStreamSettings::_internal_set_frame_rate_hz(float value) {
  
  _impl_.frame_rate_hz_ = value;
}
inline void VideoStreamSettings::set_frame_rate_hz(float value) {
  _internal_set_frame_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.frame_rate_hz)
}

// uint32 horizontal_resolution_pix = 2;
inline void VideoStreamSettings::clear_horizontal_resolution_pix() {
  _impl_.horizontal_resolution_pix_ = 0u;
}
inline uint32_t VideoStreamSettings::_internal_horizontal_resolution_pix() const {
  return _impl_.horizontal_resolution_pix_;
}
inline uint32_t VideoStreamSettings::horizontal_resolution_pix() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.horizontal_resolution_pix)
  return _internal_horizontal_resolution_pix();
}
inline void VideoStreamSettings::_internal_set_horizontal_resolution_pix(uint32_t value) {
  
  _impl_.horizontal_resolution_pix_ = value;
}
inline void VideoStreamSettings::set_horizontal_resolution_pix(uint32_t value) {
  _internal_set_horizontal_resolution_pix(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.horizontal_resolution_pix)
}

// uint32 vertical_resolution_pix = 3;
inline void VideoStreamSettings::clear_vertical_resolution_pix() {
  _impl_.vertical_resolution_pix_ = 0u;
}
inline uint32_t VideoStreamSettings::_internal_vertical_resolution_pix() const {
  return _impl_.vertical_resolution_pix_;
}
inline uint32_t VideoStreamSettings::vertical_resolution_pix() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.vertical_resolution_pix)
  return _internal_vertical_resolution_pix();
}
inline void VideoStreamSettings::_internal_set_vertical_resolution_pix(uint32_t value) {
  
  _impl_.vertical_resolution_pix_ = value;
}
inline void VideoStreamSettings::set_vertical_resolution_pix(uint32_t value) {
  _internal_set_vertical_resolution_pix(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.vertical_resolution_pix)
}

// uint32 bit_rate_b_s = 4;
inline void VideoStreamSettings::clear_bit_rate_b_s() {
  _impl_.bit_rate_b_s_ = 0u;
}
inline uint32_t VideoStreamSettings::_internal_bit_rate_b_s() const {
  return _impl_.bit_rate_b_s_;
}
inline uint32_t VideoStreamSettings::bit_rate_b_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.bit_rate_b_s)
  return _internal_bit_rate_b_s();
}
inline void VideoStreamSettings::_internal_set_bit_rate_b_s(uint32_t value) {
  
  _impl_.bit_rate_b_s_ = value;
}
inline void VideoStreamSettings::set_bit_rate_b_s(uint32_t value) {
  _internal_set_bit_rate_b_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.bit_rate_b_s)
}

// uint32 rotation_deg = 5;
inline void VideoStreamSettings::clear_rotation_deg() {
  _impl_.rotation_deg_ = 0u;
}
inline uint32_t VideoStreamSettings::_internal_rotation_deg() const {
  return _impl_.rotation_deg_;
}
inline uint32_t VideoStreamSettings::rotation_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.rotation_deg)
  return _internal_rotation_deg();
}
inline void VideoStreamSettings::_internal_set_rotation_deg(uint32_t value) {
  
  _impl_.rotation_deg_ = value;
}
inline void VideoStreamSettings::set_rotation_deg(uint32_t value) {
  _internal_set_rotation_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.rotation_deg)
}

// string uri = 6;
inline void VideoStreamSettings::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& VideoStreamSettings::uri() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoStreamSettings::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.uri)
}
inline std::string* VideoStreamSettings::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamSettings.uri)
  return _s;
}
inline const std::string& VideoStreamSettings::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void VideoStreamSettings::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStreamSettings::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoStreamSettings::release_uri() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamSettings.uri)
  return _impl_.uri_.Release();
}
inline void VideoStreamSettings::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamSettings.uri)
}

// float horizontal_fov_deg = 7;
inline void VideoStreamSettings::clear_horizontal_fov_deg() {
  _impl_.horizontal_fov_deg_ = 0;
}
inline float VideoStreamSettings::_internal_horizontal_fov_deg() const {
  return _impl_.horizontal_fov_deg_;
}
inline float VideoStreamSettings::horizontal_fov_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.horizontal_fov_deg)
  return _internal_horizontal_fov_deg();
}
inline void VideoStreamSettings::_internal_set_horizontal_fov_deg(float value) {
  
  _impl_.horizontal_fov_deg_ = value;
}
inline void VideoStreamSettings::set_horizontal_fov_deg(float value) {
  _internal_set_horizontal_fov_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.horizontal_fov_deg)
}

// -------------------------------------------------------------------

// VideoStreamInfo

// int32 stream_id = 1;
inline void VideoStreamInfo::clear_stream_id() {
  _impl_.stream_id_ = 0;
}
inline int32_t VideoStreamInfo::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline int32_t VideoStreamInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.stream_id)
  return _internal_stream_id();
}
inline void VideoStreamInfo::_internal_set_stream_id(int32_t value) {
  
  _impl_.stream_id_ = value;
}
inline void VideoStreamInfo::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamInfo.stream_id)
}

// .mavsdk.rpc.camera.VideoStreamSettings settings = 2;
inline bool VideoStreamInfo::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool VideoStreamInfo::has_settings() const {
  return _internal_has_settings();
}
inline void VideoStreamInfo::clear_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamSettings& VideoStreamInfo::_internal_settings() const {
  const ::mavsdk::rpc::camera::VideoStreamSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamSettings&>(
      ::mavsdk::rpc::camera::_VideoStreamSettings_default_instance_);
}
inline const ::mavsdk::rpc::camera::VideoStreamSettings& VideoStreamInfo::settings() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.settings)
  return _internal_settings();
}
inline void VideoStreamInfo::unsafe_arena_set_allocated_settings(
    ::mavsdk::rpc::camera::VideoStreamSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.VideoStreamInfo.settings)
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::release_settings() {
  
  ::mavsdk::rpc::camera::VideoStreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamInfo.settings)
  
  ::mavsdk::rpc::camera::VideoStreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::mutable_settings() {
  ::mavsdk::rpc::camera::VideoStreamSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamInfo.settings)
  return _msg;
}
inline void VideoStreamInfo::set_allocated_settings(::mavsdk::rpc::camera::VideoStreamSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamInfo.settings)
}

// .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus status = 3;
inline void VideoStreamInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus VideoStreamInfo::_internal_status() const {
  return static_cast< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus >(_impl_.status_);
}
inline ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus VideoStreamInfo::status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.status)
  return _internal_status();
}
inline void VideoStreamInfo::_internal_set_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value) {
  
  _impl_.status_ = value;
}
inline void VideoStreamInfo::set_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamInfo.status)
}

// .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamSpectrum spectrum = 4;
inline void VideoStreamInfo::clear_spectrum() {
  _impl_.spectrum_ = 0;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum VideoStreamInfo::_internal_spectrum() const {
  return static_cast< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum >(_impl_.spectrum_);
}
inline ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum VideoStreamInfo::spectrum() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.spectrum)
  return _internal_spectrum();
}
inline void VideoStreamInfo::_internal_set_spectrum(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum value) {
  
  _impl_.spectrum_ = value;
}
inline void VideoStreamInfo::set_spectrum(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum value) {
  _internal_set_spectrum(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamInfo.spectrum)
}

// -------------------------------------------------------------------

// TakePhotoRequest

// int32 component_id = 1;
inline void TakePhotoRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t TakePhotoRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t TakePhotoRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TakePhotoRequest.component_id)
  return _internal_component_id();
}
inline void TakePhotoRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void TakePhotoRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TakePhotoRequest.component_id)
}

// -------------------------------------------------------------------

// TakePhotoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool TakePhotoResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool TakePhotoResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void TakePhotoResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& TakePhotoResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& TakePhotoResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  return _internal_camera_result();
}
inline void TakePhotoResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  return _msg;
}
inline void TakePhotoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
}

// -------------------------------------------------------------------

// StartPhotoIntervalRequest

// int32 component_id = 1;
inline void StartPhotoIntervalRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StartPhotoIntervalRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StartPhotoIntervalRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartPhotoIntervalRequest.component_id)
  return _internal_component_id();
}
inline void StartPhotoIntervalRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StartPhotoIntervalRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartPhotoIntervalRequest.component_id)
}

// float interval_s = 2;
inline void StartPhotoIntervalRequest::clear_interval_s() {
  _impl_.interval_s_ = 0;
}
inline float StartPhotoIntervalRequest::_internal_interval_s() const {
  return _impl_.interval_s_;
}
inline float StartPhotoIntervalRequest::interval_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartPhotoIntervalRequest.interval_s)
  return _internal_interval_s();
}
inline void StartPhotoIntervalRequest::_internal_set_interval_s(float value) {
  
  _impl_.interval_s_ = value;
}
inline void StartPhotoIntervalRequest::set_interval_s(float value) {
  _internal_set_interval_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartPhotoIntervalRequest.interval_s)
}

// -------------------------------------------------------------------

// StartPhotoIntervalResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartPhotoIntervalResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StartPhotoIntervalResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StartPhotoIntervalResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartPhotoIntervalResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StartPhotoIntervalResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  return _internal_camera_result();
}
inline void StartPhotoIntervalResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  return _msg;
}
inline void StartPhotoIntervalResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
}

// -------------------------------------------------------------------

// StopPhotoIntervalRequest

// int32 component_id = 1;
inline void StopPhotoIntervalRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StopPhotoIntervalRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StopPhotoIntervalRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopPhotoIntervalRequest.component_id)
  return _internal_component_id();
}
inline void StopPhotoIntervalRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StopPhotoIntervalRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StopPhotoIntervalRequest.component_id)
}

// -------------------------------------------------------------------

// StopPhotoIntervalResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopPhotoIntervalResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StopPhotoIntervalResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StopPhotoIntervalResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopPhotoIntervalResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StopPhotoIntervalResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  return _internal_camera_result();
}
inline void StopPhotoIntervalResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  return _msg;
}
inline void StopPhotoIntervalResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
}

// -------------------------------------------------------------------

// StartVideoRequest

// int32 component_id = 1;
inline void StartVideoRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StartVideoRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StartVideoRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoRequest.component_id)
  return _internal_component_id();
}
inline void StartVideoRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StartVideoRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartVideoRequest.component_id)
}

// -------------------------------------------------------------------

// StartVideoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartVideoResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StartVideoResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StartVideoResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  return _internal_camera_result();
}
inline void StartVideoResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StartVideoResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  return _msg;
}
inline void StartVideoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartVideoResponse.camera_result)
}

// -------------------------------------------------------------------

// StopVideoRequest

// int32 component_id = 1;
inline void StopVideoRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StopVideoRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StopVideoRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoRequest.component_id)
  return _internal_component_id();
}
inline void StopVideoRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StopVideoRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StopVideoRequest.component_id)
}

// -------------------------------------------------------------------

// StopVideoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopVideoResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StopVideoResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StopVideoResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  return _internal_camera_result();
}
inline void StopVideoResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StopVideoResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  return _msg;
}
inline void StopVideoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopVideoResponse.camera_result)
}

// -------------------------------------------------------------------

// StartVideoStreamingRequest

// int32 component_id = 1;
inline void StartVideoStreamingRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StartVideoStreamingRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StartVideoStreamingRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoStreamingRequest.component_id)
  return _internal_component_id();
}
inline void StartVideoStreamingRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StartVideoStreamingRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartVideoStreamingRequest.component_id)
}

// int32 stream_id = 2;
inline void StartVideoStreamingRequest::clear_stream_id() {
  _impl_.stream_id_ = 0;
}
inline int32_t StartVideoStreamingRequest::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline int32_t StartVideoStreamingRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoStreamingRequest.stream_id)
  return _internal_stream_id();
}
inline void StartVideoStreamingRequest::_internal_set_stream_id(int32_t value) {
  
  _impl_.stream_id_ = value;
}
inline void StartVideoStreamingRequest::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartVideoStreamingRequest.stream_id)
}

// -------------------------------------------------------------------

// StartVideoStreamingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartVideoStreamingResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StartVideoStreamingResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StartVideoStreamingResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoStreamingResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoStreamingResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  return _internal_camera_result();
}
inline void StartVideoStreamingResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  return _msg;
}
inline void StartVideoStreamingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
}

// -------------------------------------------------------------------

// StopVideoStreamingRequest

// int32 component_id = 1;
inline void StopVideoStreamingRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StopVideoStreamingRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StopVideoStreamingRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoStreamingRequest.component_id)
  return _internal_component_id();
}
inline void StopVideoStreamingRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StopVideoStreamingRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StopVideoStreamingRequest.component_id)
}

// int32 stream_id = 2;
inline void StopVideoStreamingRequest::clear_stream_id() {
  _impl_.stream_id_ = 0;
}
inline int32_t StopVideoStreamingRequest::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline int32_t StopVideoStreamingRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoStreamingRequest.stream_id)
  return _internal_stream_id();
}
inline void StopVideoStreamingRequest::_internal_set_stream_id(int32_t value) {
  
  _impl_.stream_id_ = value;
}
inline void StopVideoStreamingRequest::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StopVideoStreamingRequest.stream_id)
}

// -------------------------------------------------------------------

// StopVideoStreamingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopVideoStreamingResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool StopVideoStreamingResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void StopVideoStreamingResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoStreamingResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoStreamingResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  return _internal_camera_result();
}
inline void StopVideoStreamingResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  return _msg;
}
inline void StopVideoStreamingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
}

// -------------------------------------------------------------------

// SetModeRequest

// int32 component_id = 1;
inline void SetModeRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t SetModeRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t SetModeRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetModeRequest.component_id)
  return _internal_component_id();
}
inline void SetModeRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void SetModeRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SetModeRequest.component_id)
}

// .mavsdk.rpc.camera.Mode mode = 2;
inline void SetModeRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::mavsdk::rpc::camera::Mode SetModeRequest::_internal_mode() const {
  return static_cast< ::mavsdk::rpc::camera::Mode >(_impl_.mode_);
}
inline ::mavsdk::rpc::camera::Mode SetModeRequest::mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetModeRequest.mode)
  return _internal_mode();
}
inline void SetModeRequest::_internal_set_mode(::mavsdk::rpc::camera::Mode value) {
  
  _impl_.mode_ = value;
}
inline void SetModeRequest::set_mode(::mavsdk::rpc::camera::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SetModeRequest.mode)
}

// -------------------------------------------------------------------

// SetModeResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool SetModeResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool SetModeResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void SetModeResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& SetModeResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& SetModeResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetModeResponse.camera_result)
  return _internal_camera_result();
}
inline void SetModeResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.SetModeResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetModeResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetModeResponse.camera_result)
  return _msg;
}
inline void SetModeResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetModeResponse.camera_result)
}

// -------------------------------------------------------------------

// ListPhotosRequest

// int32 component_id = 1;
inline void ListPhotosRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ListPhotosRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ListPhotosRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ListPhotosRequest.component_id)
  return _internal_component_id();
}
inline void ListPhotosRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ListPhotosRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ListPhotosRequest.component_id)
}

// .mavsdk.rpc.camera.PhotosRange photos_range = 2;
inline void ListPhotosRequest::clear_photos_range() {
  _impl_.photos_range_ = 0;
}
inline ::mavsdk::rpc::camera::PhotosRange ListPhotosRequest::_internal_photos_range() const {
  return static_cast< ::mavsdk::rpc::camera::PhotosRange >(_impl_.photos_range_);
}
inline ::mavsdk::rpc::camera::PhotosRange ListPhotosRequest::photos_range() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ListPhotosRequest.photos_range)
  return _internal_photos_range();
}
inline void ListPhotosRequest::_internal_set_photos_range(::mavsdk::rpc::camera::PhotosRange value) {
  
  _impl_.photos_range_ = value;
}
inline void ListPhotosRequest::set_photos_range(::mavsdk::rpc::camera::PhotosRange value) {
  _internal_set_photos_range(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ListPhotosRequest.photos_range)
}

// -------------------------------------------------------------------

// ListPhotosResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ListPhotosResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ListPhotosResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ListPhotosResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ListPhotosResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ListPhotosResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ListPhotosResponse.camera_result)
  return _internal_camera_result();
}
inline void ListPhotosResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ListPhotosResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ListPhotosResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ListPhotosResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ListPhotosResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ListPhotosResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ListPhotosResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ListPhotosResponse.camera_result)
  return _msg;
}
inline void ListPhotosResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ListPhotosResponse.camera_result)
}

// repeated .mavsdk.rpc.camera.CaptureInfo capture_infos = 2;
inline int ListPhotosResponse::_internal_capture_infos_size() const {
  return _impl_.capture_infos_.size();
}
inline int ListPhotosResponse::capture_infos_size() const {
  return _internal_capture_infos_size();
}
inline void ListPhotosResponse::clear_capture_infos() {
  _impl_.capture_infos_.Clear();
}
inline ::mavsdk::rpc::camera::CaptureInfo* ListPhotosResponse::mutable_capture_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ListPhotosResponse.capture_infos)
  return _impl_.capture_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::CaptureInfo >*
ListPhotosResponse::mutable_capture_infos() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.ListPhotosResponse.capture_infos)
  return &_impl_.capture_infos_;
}
inline const ::mavsdk::rpc::camera::CaptureInfo& ListPhotosResponse::_internal_capture_infos(int index) const {
  return _impl_.capture_infos_.Get(index);
}
inline const ::mavsdk::rpc::camera::CaptureInfo& ListPhotosResponse::capture_infos(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ListPhotosResponse.capture_infos)
  return _internal_capture_infos(index);
}
inline ::mavsdk::rpc::camera::CaptureInfo* ListPhotosResponse::_internal_add_capture_infos() {
  return _impl_.capture_infos_.Add();
}
inline ::mavsdk::rpc::camera::CaptureInfo* ListPhotosResponse::add_capture_infos() {
  ::mavsdk::rpc::camera::CaptureInfo* _add = _internal_add_capture_infos();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.ListPhotosResponse.capture_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::CaptureInfo >&
ListPhotosResponse::capture_infos() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.ListPhotosResponse.capture_infos)
  return _impl_.capture_infos_;
}

// -------------------------------------------------------------------

// SubscribeCameraListRequest

// -------------------------------------------------------------------

// CameraListResponse

// .mavsdk.rpc.camera.CameraList camera_list = 1;
inline bool CameraListResponse::_internal_has_camera_list() const {
  return this != internal_default_instance() && _impl_.camera_list_ != nullptr;
}
inline bool CameraListResponse::has_camera_list() const {
  return _internal_has_camera_list();
}
inline void CameraListResponse::clear_camera_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_list_ != nullptr) {
    delete _impl_.camera_list_;
  }
  _impl_.camera_list_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraList& CameraListResponse::_internal_camera_list() const {
  const ::mavsdk::rpc::camera::CameraList* p = _impl_.camera_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraList&>(
      ::mavsdk::rpc::camera::_CameraList_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraList& CameraListResponse::camera_list() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraListResponse.camera_list)
  return _internal_camera_list();
}
inline void CameraListResponse::unsafe_arena_set_allocated_camera_list(
    ::mavsdk::rpc::camera::CameraList* camera_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_list_);
  }
  _impl_.camera_list_ = camera_list;
  if (camera_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CameraListResponse.camera_list)
}
inline ::mavsdk::rpc::camera::CameraList* CameraListResponse::release_camera_list() {
  
  ::mavsdk::rpc::camera::CameraList* temp = _impl_.camera_list_;
  _impl_.camera_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraList* CameraListResponse::unsafe_arena_release_camera_list() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CameraListResponse.camera_list)
  
  ::mavsdk::rpc::camera::CameraList* temp = _impl_.camera_list_;
  _impl_.camera_list_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraList* CameraListResponse::_internal_mutable_camera_list() {
  
  if (_impl_.camera_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraList>(GetArenaForAllocation());
    _impl_.camera_list_ = p;
  }
  return _impl_.camera_list_;
}
inline ::mavsdk::rpc::camera::CameraList* CameraListResponse::mutable_camera_list() {
  ::mavsdk::rpc::camera::CameraList* _msg = _internal_mutable_camera_list();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraListResponse.camera_list)
  return _msg;
}
inline void CameraListResponse::set_allocated_camera_list(::mavsdk::rpc::camera::CameraList* camera_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_list_;
  }
  if (camera_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_list);
    if (message_arena != submessage_arena) {
      camera_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_list_ = camera_list;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CameraListResponse.camera_list)
}

// -------------------------------------------------------------------

// ModeUpdate

// int32 component_id = 1;
inline void ModeUpdate::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ModeUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ModeUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ModeUpdate.component_id)
  return _internal_component_id();
}
inline void ModeUpdate::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ModeUpdate::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ModeUpdate.component_id)
}

// .mavsdk.rpc.camera.Mode mode = 2;
inline void ModeUpdate::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::mavsdk::rpc::camera::Mode ModeUpdate::_internal_mode() const {
  return static_cast< ::mavsdk::rpc::camera::Mode >(_impl_.mode_);
}
inline ::mavsdk::rpc::camera::Mode ModeUpdate::mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ModeUpdate.mode)
  return _internal_mode();
}
inline void ModeUpdate::_internal_set_mode(::mavsdk::rpc::camera::Mode value) {
  
  _impl_.mode_ = value;
}
inline void ModeUpdate::set_mode(::mavsdk::rpc::camera::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ModeUpdate.mode)
}

// -------------------------------------------------------------------

// SubscribeModeRequest

// -------------------------------------------------------------------

// ModeResponse

// .mavsdk.rpc.camera.ModeUpdate update = 1;
inline bool ModeResponse::_internal_has_update() const {
  return this != internal_default_instance() && _impl_.update_ != nullptr;
}
inline bool ModeResponse::has_update() const {
  return _internal_has_update();
}
inline void ModeResponse::clear_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_ != nullptr) {
    delete _impl_.update_;
  }
  _impl_.update_ = nullptr;
}
inline const ::mavsdk::rpc::camera::ModeUpdate& ModeResponse::_internal_update() const {
  const ::mavsdk::rpc::camera::ModeUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::ModeUpdate&>(
      ::mavsdk::rpc::camera::_ModeUpdate_default_instance_);
}
inline const ::mavsdk::rpc::camera::ModeUpdate& ModeResponse::update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ModeResponse.update)
  return _internal_update();
}
inline void ModeResponse::unsafe_arena_set_allocated_update(
    ::mavsdk::rpc::camera::ModeUpdate* update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ModeResponse.update)
}
inline ::mavsdk::rpc::camera::ModeUpdate* ModeResponse::release_update() {
  
  ::mavsdk::rpc::camera::ModeUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::ModeUpdate* ModeResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ModeResponse.update)
  
  ::mavsdk::rpc::camera::ModeUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::ModeUpdate* ModeResponse::_internal_mutable_update() {
  
  if (_impl_.update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::ModeUpdate>(GetArenaForAllocation());
    _impl_.update_ = p;
  }
  return _impl_.update_;
}
inline ::mavsdk::rpc::camera::ModeUpdate* ModeResponse::mutable_update() {
  ::mavsdk::rpc::camera::ModeUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ModeResponse.update)
  return _msg;
}
inline void ModeResponse::set_allocated_update(::mavsdk::rpc::camera::ModeUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ModeResponse.update)
}

// -------------------------------------------------------------------

// VideoStreamUpdate

// int32 component_id = 1;
inline void VideoStreamUpdate::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t VideoStreamUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t VideoStreamUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamUpdate.component_id)
  return _internal_component_id();
}
inline void VideoStreamUpdate::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void VideoStreamUpdate::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamUpdate.component_id)
}

// .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 2;
inline bool VideoStreamUpdate::_internal_has_video_stream_info() const {
  return this != internal_default_instance() && _impl_.video_stream_info_ != nullptr;
}
inline bool VideoStreamUpdate::has_video_stream_info() const {
  return _internal_has_video_stream_info();
}
inline void VideoStreamUpdate::clear_video_stream_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_stream_info_ != nullptr) {
    delete _impl_.video_stream_info_;
  }
  _impl_.video_stream_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamInfo& VideoStreamUpdate::_internal_video_stream_info() const {
  const ::mavsdk::rpc::camera::VideoStreamInfo* p = _impl_.video_stream_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamInfo&>(
      ::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_);
}
inline const ::mavsdk::rpc::camera::VideoStreamInfo& VideoStreamUpdate::video_stream_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamUpdate.video_stream_info)
  return _internal_video_stream_info();
}
inline void VideoStreamUpdate::unsafe_arena_set_allocated_video_stream_info(
    ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_stream_info_);
  }
  _impl_.video_stream_info_ = video_stream_info;
  if (video_stream_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.VideoStreamUpdate.video_stream_info)
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamUpdate::release_video_stream_info() {
  
  ::mavsdk::rpc::camera::VideoStreamInfo* temp = _impl_.video_stream_info_;
  _impl_.video_stream_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamUpdate::unsafe_arena_release_video_stream_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamUpdate.video_stream_info)
  
  ::mavsdk::rpc::camera::VideoStreamInfo* temp = _impl_.video_stream_info_;
  _impl_.video_stream_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamUpdate::_internal_mutable_video_stream_info() {
  
  if (_impl_.video_stream_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfo>(GetArenaForAllocation());
    _impl_.video_stream_info_ = p;
  }
  return _impl_.video_stream_info_;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamUpdate::mutable_video_stream_info() {
  ::mavsdk::rpc::camera::VideoStreamInfo* _msg = _internal_mutable_video_stream_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamUpdate.video_stream_info)
  return _msg;
}
inline void VideoStreamUpdate::set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_stream_info_;
  }
  if (video_stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video_stream_info);
    if (message_arena != submessage_arena) {
      video_stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_stream_info_ = video_stream_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamUpdate.video_stream_info)
}

// -------------------------------------------------------------------

// SubscribeVideoStreamInfoRequest

// -------------------------------------------------------------------

// VideoStreamInfoResponse

// .mavsdk.rpc.camera.VideoStreamUpdate update = 1;
inline bool VideoStreamInfoResponse::_internal_has_update() const {
  return this != internal_default_instance() && _impl_.update_ != nullptr;
}
inline bool VideoStreamInfoResponse::has_update() const {
  return _internal_has_update();
}
inline void VideoStreamInfoResponse::clear_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_ != nullptr) {
    delete _impl_.update_;
  }
  _impl_.update_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamUpdate& VideoStreamInfoResponse::_internal_update() const {
  const ::mavsdk::rpc::camera::VideoStreamUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamUpdate&>(
      ::mavsdk::rpc::camera::_VideoStreamUpdate_default_instance_);
}
inline const ::mavsdk::rpc::camera::VideoStreamUpdate& VideoStreamInfoResponse::update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfoResponse.update)
  return _internal_update();
}
inline void VideoStreamInfoResponse::unsafe_arena_set_allocated_update(
    ::mavsdk::rpc::camera::VideoStreamUpdate* update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.VideoStreamInfoResponse.update)
}
inline ::mavsdk::rpc::camera::VideoStreamUpdate* VideoStreamInfoResponse::release_update() {
  
  ::mavsdk::rpc::camera::VideoStreamUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamUpdate* VideoStreamInfoResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamInfoResponse.update)
  
  ::mavsdk::rpc::camera::VideoStreamUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamUpdate* VideoStreamInfoResponse::_internal_mutable_update() {
  
  if (_impl_.update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamUpdate>(GetArenaForAllocation());
    _impl_.update_ = p;
  }
  return _impl_.update_;
}
inline ::mavsdk::rpc::camera::VideoStreamUpdate* VideoStreamInfoResponse::mutable_update() {
  ::mavsdk::rpc::camera::VideoStreamUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamInfoResponse.update)
  return _msg;
}
inline void VideoStreamInfoResponse::set_allocated_update(::mavsdk::rpc::camera::VideoStreamUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamInfoResponse.update)
}

// -------------------------------------------------------------------

// SubscribeCaptureInfoRequest

// -------------------------------------------------------------------

// CaptureInfoResponse

// .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
inline bool CaptureInfoResponse::_internal_has_capture_info() const {
  return this != internal_default_instance() && _impl_.capture_info_ != nullptr;
}
inline bool CaptureInfoResponse::has_capture_info() const {
  return _internal_has_capture_info();
}
inline void CaptureInfoResponse::clear_capture_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.capture_info_ != nullptr) {
    delete _impl_.capture_info_;
  }
  _impl_.capture_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CaptureInfo& CaptureInfoResponse::_internal_capture_info() const {
  const ::mavsdk::rpc::camera::CaptureInfo* p = _impl_.capture_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CaptureInfo&>(
      ::mavsdk::rpc::camera::_CaptureInfo_default_instance_);
}
inline const ::mavsdk::rpc::camera::CaptureInfo& CaptureInfoResponse::capture_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  return _internal_capture_info();
}
inline void CaptureInfoResponse::unsafe_arena_set_allocated_capture_info(
    ::mavsdk::rpc::camera::CaptureInfo* capture_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capture_info_);
  }
  _impl_.capture_info_ = capture_info;
  if (capture_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::release_capture_info() {
  
  ::mavsdk::rpc::camera::CaptureInfo* temp = _impl_.capture_info_;
  _impl_.capture_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::unsafe_arena_release_capture_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  
  ::mavsdk::rpc::camera::CaptureInfo* temp = _impl_.capture_info_;
  _impl_.capture_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::_internal_mutable_capture_info() {
  
  if (_impl_.capture_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfo>(GetArenaForAllocation());
    _impl_.capture_info_ = p;
  }
  return _impl_.capture_info_;
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::mutable_capture_info() {
  ::mavsdk::rpc::camera::CaptureInfo* _msg = _internal_mutable_capture_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  return _msg;
}
inline void CaptureInfoResponse::set_allocated_capture_info(::mavsdk::rpc::camera::CaptureInfo* capture_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capture_info_;
  }
  if (capture_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_info);
    if (message_arena != submessage_arena) {
      capture_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capture_info_ = capture_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
}

// -------------------------------------------------------------------

// Storage

// int32 component_id = 1;
inline void Storage::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t Storage::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t Storage::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.component_id)
  return _internal_component_id();
}
inline void Storage::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void Storage::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.component_id)
}

// bool video_on = 2;
inline void Storage::clear_video_on() {
  _impl_.video_on_ = false;
}
inline bool Storage::_internal_video_on() const {
  return _impl_.video_on_;
}
inline bool Storage::video_on() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.video_on)
  return _internal_video_on();
}
inline void Storage::_internal_set_video_on(bool value) {
  
  _impl_.video_on_ = value;
}
inline void Storage::set_video_on(bool value) {
  _internal_set_video_on(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.video_on)
}

// bool photo_interval_on = 3;
inline void Storage::clear_photo_interval_on() {
  _impl_.photo_interval_on_ = false;
}
inline bool Storage::_internal_photo_interval_on() const {
  return _impl_.photo_interval_on_;
}
inline bool Storage::photo_interval_on() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.photo_interval_on)
  return _internal_photo_interval_on();
}
inline void Storage::_internal_set_photo_interval_on(bool value) {
  
  _impl_.photo_interval_on_ = value;
}
inline void Storage::set_photo_interval_on(bool value) {
  _internal_set_photo_interval_on(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.photo_interval_on)
}

// float used_storage_mib = 4;
inline void Storage::clear_used_storage_mib() {
  _impl_.used_storage_mib_ = 0;
}
inline float Storage::_internal_used_storage_mib() const {
  return _impl_.used_storage_mib_;
}
inline float Storage::used_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.used_storage_mib)
  return _internal_used_storage_mib();
}
inline void Storage::_internal_set_used_storage_mib(float value) {
  
  _impl_.used_storage_mib_ = value;
}
inline void Storage::set_used_storage_mib(float value) {
  _internal_set_used_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.used_storage_mib)
}

// float available_storage_mib = 5;
inline void Storage::clear_available_storage_mib() {
  _impl_.available_storage_mib_ = 0;
}
inline float Storage::_internal_available_storage_mib() const {
  return _impl_.available_storage_mib_;
}
inline float Storage::available_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.available_storage_mib)
  return _internal_available_storage_mib();
}
inline void Storage::_internal_set_available_storage_mib(float value) {
  
  _impl_.available_storage_mib_ = value;
}
inline void Storage::set_available_storage_mib(float value) {
  _internal_set_available_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.available_storage_mib)
}

// float total_storage_mib = 6;
inline void Storage::clear_total_storage_mib() {
  _impl_.total_storage_mib_ = 0;
}
inline float Storage::_internal_total_storage_mib() const {
  return _impl_.total_storage_mib_;
}
inline float Storage::total_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.total_storage_mib)
  return _internal_total_storage_mib();
}
inline void Storage::_internal_set_total_storage_mib(float value) {
  
  _impl_.total_storage_mib_ = value;
}
inline void Storage::set_total_storage_mib(float value) {
  _internal_set_total_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.total_storage_mib)
}

// float recording_time_s = 7;
inline void Storage::clear_recording_time_s() {
  _impl_.recording_time_s_ = 0;
}
inline float Storage::_internal_recording_time_s() const {
  return _impl_.recording_time_s_;
}
inline float Storage::recording_time_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.recording_time_s)
  return _internal_recording_time_s();
}
inline void Storage::_internal_set_recording_time_s(float value) {
  
  _impl_.recording_time_s_ = value;
}
inline void Storage::set_recording_time_s(float value) {
  _internal_set_recording_time_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.recording_time_s)
}

// string media_folder_name = 8;
inline void Storage::clear_media_folder_name() {
  _impl_.media_folder_name_.ClearToEmpty();
}
inline const std::string& Storage::media_folder_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.media_folder_name)
  return _internal_media_folder_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Storage::set_media_folder_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_folder_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.media_folder_name)
}
inline std::string* Storage::mutable_media_folder_name() {
  std::string* _s = _internal_mutable_media_folder_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Storage.media_folder_name)
  return _s;
}
inline const std::string& Storage::_internal_media_folder_name() const {
  return _impl_.media_folder_name_.Get();
}
inline void Storage::_internal_set_media_folder_name(const std::string& value) {
  
  _impl_.media_folder_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Storage::_internal_mutable_media_folder_name() {
  
  return _impl_.media_folder_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Storage::release_media_folder_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Storage.media_folder_name)
  return _impl_.media_folder_name_.Release();
}
inline void Storage::set_allocated_media_folder_name(std::string* media_folder_name) {
  if (media_folder_name != nullptr) {
    
  } else {
    
  }
  _impl_.media_folder_name_.SetAllocated(media_folder_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_folder_name_.IsDefault()) {
    _impl_.media_folder_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Storage.media_folder_name)
}

// .mavsdk.rpc.camera.Storage.StorageStatus storage_status = 9;
inline void Storage::clear_storage_status() {
  _impl_.storage_status_ = 0;
}
inline ::mavsdk::rpc::camera::Storage_StorageStatus Storage::_internal_storage_status() const {
  return static_cast< ::mavsdk::rpc::camera::Storage_StorageStatus >(_impl_.storage_status_);
}
inline ::mavsdk::rpc::camera::Storage_StorageStatus Storage::storage_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.storage_status)
  return _internal_storage_status();
}
inline void Storage::_internal_set_storage_status(::mavsdk::rpc::camera::Storage_StorageStatus value) {
  
  _impl_.storage_status_ = value;
}
inline void Storage::set_storage_status(::mavsdk::rpc::camera::Storage_StorageStatus value) {
  _internal_set_storage_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.storage_status)
}

// uint32 storage_id = 10;
inline void Storage::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t Storage::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t Storage::storage_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.storage_id)
  return _internal_storage_id();
}
inline void Storage::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void Storage::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.storage_id)
}

// .mavsdk.rpc.camera.Storage.StorageType storage_type = 11;
inline void Storage::clear_storage_type() {
  _impl_.storage_type_ = 0;
}
inline ::mavsdk::rpc::camera::Storage_StorageType Storage::_internal_storage_type() const {
  return static_cast< ::mavsdk::rpc::camera::Storage_StorageType >(_impl_.storage_type_);
}
inline ::mavsdk::rpc::camera::Storage_StorageType Storage::storage_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Storage.storage_type)
  return _internal_storage_type();
}
inline void Storage::_internal_set_storage_type(::mavsdk::rpc::camera::Storage_StorageType value) {
  
  _impl_.storage_type_ = value;
}
inline void Storage::set_storage_type(::mavsdk::rpc::camera::Storage_StorageType value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Storage.storage_type)
}

// -------------------------------------------------------------------

// StorageUpdate

// int32 component_id = 1;
inline void StorageUpdate::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t StorageUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t StorageUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StorageUpdate.component_id)
  return _internal_component_id();
}
inline void StorageUpdate::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void StorageUpdate::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StorageUpdate.component_id)
}

// .mavsdk.rpc.camera.Storage storage = 2;
inline bool StorageUpdate::_internal_has_storage() const {
  return this != internal_default_instance() && _impl_.storage_ != nullptr;
}
inline bool StorageUpdate::has_storage() const {
  return _internal_has_storage();
}
inline void StorageUpdate::clear_storage() {
  if (GetArenaForAllocation() == nullptr && _impl_.storage_ != nullptr) {
    delete _impl_.storage_;
  }
  _impl_.storage_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Storage& StorageUpdate::_internal_storage() const {
  const ::mavsdk::rpc::camera::Storage* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Storage&>(
      ::mavsdk::rpc::camera::_Storage_default_instance_);
}
inline const ::mavsdk::rpc::camera::Storage& StorageUpdate::storage() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StorageUpdate.storage)
  return _internal_storage();
}
inline void StorageUpdate::unsafe_arena_set_allocated_storage(
    ::mavsdk::rpc::camera::Storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StorageUpdate.storage)
}
inline ::mavsdk::rpc::camera::Storage* StorageUpdate::release_storage() {
  
  ::mavsdk::rpc::camera::Storage* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Storage* StorageUpdate::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StorageUpdate.storage)
  
  ::mavsdk::rpc::camera::Storage* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Storage* StorageUpdate::_internal_mutable_storage() {
  
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Storage>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::mavsdk::rpc::camera::Storage* StorageUpdate::mutable_storage() {
  ::mavsdk::rpc::camera::Storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StorageUpdate.storage)
  return _msg;
}
inline void StorageUpdate::set_allocated_storage(::mavsdk::rpc::camera::Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StorageUpdate.storage)
}

// -------------------------------------------------------------------

// SubscribeStorageRequest

// -------------------------------------------------------------------

// StorageResponse

// .mavsdk.rpc.camera.StorageUpdate update = 1;
inline bool StorageResponse::_internal_has_update() const {
  return this != internal_default_instance() && _impl_.update_ != nullptr;
}
inline bool StorageResponse::has_update() const {
  return _internal_has_update();
}
inline void StorageResponse::clear_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_ != nullptr) {
    delete _impl_.update_;
  }
  _impl_.update_ = nullptr;
}
inline const ::mavsdk::rpc::camera::StorageUpdate& StorageResponse::_internal_update() const {
  const ::mavsdk::rpc::camera::StorageUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::StorageUpdate&>(
      ::mavsdk::rpc::camera::_StorageUpdate_default_instance_);
}
inline const ::mavsdk::rpc::camera::StorageUpdate& StorageResponse::update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StorageResponse.update)
  return _internal_update();
}
inline void StorageResponse::unsafe_arena_set_allocated_update(
    ::mavsdk::rpc::camera::StorageUpdate* update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.StorageResponse.update)
}
inline ::mavsdk::rpc::camera::StorageUpdate* StorageResponse::release_update() {
  
  ::mavsdk::rpc::camera::StorageUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::StorageUpdate* StorageResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StorageResponse.update)
  
  ::mavsdk::rpc::camera::StorageUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::StorageUpdate* StorageResponse::_internal_mutable_update() {
  
  if (_impl_.update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::StorageUpdate>(GetArenaForAllocation());
    _impl_.update_ = p;
  }
  return _impl_.update_;
}
inline ::mavsdk::rpc::camera::StorageUpdate* StorageResponse::mutable_update() {
  ::mavsdk::rpc::camera::StorageUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StorageResponse.update)
  return _msg;
}
inline void StorageResponse::set_allocated_update(::mavsdk::rpc::camera::StorageUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StorageResponse.update)
}

// -------------------------------------------------------------------

// CurrentSettingsUpdate

// int32 component_id = 1;
inline void CurrentSettingsUpdate::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t CurrentSettingsUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t CurrentSettingsUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CurrentSettingsUpdate.component_id)
  return _internal_component_id();
}
inline void CurrentSettingsUpdate::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void CurrentSettingsUpdate::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CurrentSettingsUpdate.component_id)
}

// repeated .mavsdk.rpc.camera.Setting current_settings = 2;
inline int CurrentSettingsUpdate::_internal_current_settings_size() const {
  return _impl_.current_settings_.size();
}
inline int CurrentSettingsUpdate::current_settings_size() const {
  return _internal_current_settings_size();
}
inline void CurrentSettingsUpdate::clear_current_settings() {
  _impl_.current_settings_.Clear();
}
inline ::mavsdk::rpc::camera::Setting* CurrentSettingsUpdate::mutable_current_settings(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CurrentSettingsUpdate.current_settings)
  return _impl_.current_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
CurrentSettingsUpdate::mutable_current_settings() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.CurrentSettingsUpdate.current_settings)
  return &_impl_.current_settings_;
}
inline const ::mavsdk::rpc::camera::Setting& CurrentSettingsUpdate::_internal_current_settings(int index) const {
  return _impl_.current_settings_.Get(index);
}
inline const ::mavsdk::rpc::camera::Setting& CurrentSettingsUpdate::current_settings(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CurrentSettingsUpdate.current_settings)
  return _internal_current_settings(index);
}
inline ::mavsdk::rpc::camera::Setting* CurrentSettingsUpdate::_internal_add_current_settings() {
  return _impl_.current_settings_.Add();
}
inline ::mavsdk::rpc::camera::Setting* CurrentSettingsUpdate::add_current_settings() {
  ::mavsdk::rpc::camera::Setting* _add = _internal_add_current_settings();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.CurrentSettingsUpdate.current_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
CurrentSettingsUpdate::current_settings() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.CurrentSettingsUpdate.current_settings)
  return _impl_.current_settings_;
}

// -------------------------------------------------------------------

// SubscribeCurrentSettingsRequest

// -------------------------------------------------------------------

// CurrentSettingsResponse

// .mavsdk.rpc.camera.CurrentSettingsUpdate update = 1;
inline bool CurrentSettingsResponse::_internal_has_update() const {
  return this != internal_default_instance() && _impl_.update_ != nullptr;
}
inline bool CurrentSettingsResponse::has_update() const {
  return _internal_has_update();
}
inline void CurrentSettingsResponse::clear_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_ != nullptr) {
    delete _impl_.update_;
  }
  _impl_.update_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CurrentSettingsUpdate& CurrentSettingsResponse::_internal_update() const {
  const ::mavsdk::rpc::camera::CurrentSettingsUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CurrentSettingsUpdate&>(
      ::mavsdk::rpc::camera::_CurrentSettingsUpdate_default_instance_);
}
inline const ::mavsdk::rpc::camera::CurrentSettingsUpdate& CurrentSettingsResponse::update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CurrentSettingsResponse.update)
  return _internal_update();
}
inline void CurrentSettingsResponse::unsafe_arena_set_allocated_update(
    ::mavsdk::rpc::camera::CurrentSettingsUpdate* update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CurrentSettingsResponse.update)
}
inline ::mavsdk::rpc::camera::CurrentSettingsUpdate* CurrentSettingsResponse::release_update() {
  
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CurrentSettingsUpdate* CurrentSettingsResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CurrentSettingsResponse.update)
  
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CurrentSettingsUpdate* CurrentSettingsResponse::_internal_mutable_update() {
  
  if (_impl_.update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CurrentSettingsUpdate>(GetArenaForAllocation());
    _impl_.update_ = p;
  }
  return _impl_.update_;
}
inline ::mavsdk::rpc::camera::CurrentSettingsUpdate* CurrentSettingsResponse::mutable_update() {
  ::mavsdk::rpc::camera::CurrentSettingsUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CurrentSettingsResponse.update)
  return _msg;
}
inline void CurrentSettingsResponse::set_allocated_update(::mavsdk::rpc::camera::CurrentSettingsUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CurrentSettingsResponse.update)
}

// -------------------------------------------------------------------

// PossibleSettingOptionsUpdate

// int32 component_id = 1;
inline void PossibleSettingOptionsUpdate::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t PossibleSettingOptionsUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t PossibleSettingOptionsUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.component_id)
  return _internal_component_id();
}
inline void PossibleSettingOptionsUpdate::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void PossibleSettingOptionsUpdate::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.component_id)
}

// repeated .mavsdk.rpc.camera.SettingOptions setting_options = 2;
inline int PossibleSettingOptionsUpdate::_internal_setting_options_size() const {
  return _impl_.setting_options_.size();
}
inline int PossibleSettingOptionsUpdate::setting_options_size() const {
  return _internal_setting_options_size();
}
inline void PossibleSettingOptionsUpdate::clear_setting_options() {
  _impl_.setting_options_.Clear();
}
inline ::mavsdk::rpc::camera::SettingOptions* PossibleSettingOptionsUpdate::mutable_setting_options(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.setting_options)
  return _impl_.setting_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
PossibleSettingOptionsUpdate::mutable_setting_options() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.setting_options)
  return &_impl_.setting_options_;
}
inline const ::mavsdk::rpc::camera::SettingOptions& PossibleSettingOptionsUpdate::_internal_setting_options(int index) const {
  return _impl_.setting_options_.Get(index);
}
inline const ::mavsdk::rpc::camera::SettingOptions& PossibleSettingOptionsUpdate::setting_options(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.setting_options)
  return _internal_setting_options(index);
}
inline ::mavsdk::rpc::camera::SettingOptions* PossibleSettingOptionsUpdate::_internal_add_setting_options() {
  return _impl_.setting_options_.Add();
}
inline ::mavsdk::rpc::camera::SettingOptions* PossibleSettingOptionsUpdate::add_setting_options() {
  ::mavsdk::rpc::camera::SettingOptions* _add = _internal_add_setting_options();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.setting_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
PossibleSettingOptionsUpdate::setting_options() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.PossibleSettingOptionsUpdate.setting_options)
  return _impl_.setting_options_;
}

// -------------------------------------------------------------------

// SubscribePossibleSettingOptionsRequest

// -------------------------------------------------------------------

// PossibleSettingOptionsResponse

// .mavsdk.rpc.camera.PossibleSettingOptionsUpdate update = 1;
inline bool PossibleSettingOptionsResponse::_internal_has_update() const {
  return this != internal_default_instance() && _impl_.update_ != nullptr;
}
inline bool PossibleSettingOptionsResponse::has_update() const {
  return _internal_has_update();
}
inline void PossibleSettingOptionsResponse::clear_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_ != nullptr) {
    delete _impl_.update_;
  }
  _impl_.update_ = nullptr;
}
inline const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate& PossibleSettingOptionsResponse::_internal_update() const {
  const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate&>(
      ::mavsdk::rpc::camera::_PossibleSettingOptionsUpdate_default_instance_);
}
inline const ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate& PossibleSettingOptionsResponse::update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.PossibleSettingOptionsResponse.update)
  return _internal_update();
}
inline void PossibleSettingOptionsResponse::unsafe_arena_set_allocated_update(
    ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.PossibleSettingOptionsResponse.update)
}
inline ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* PossibleSettingOptionsResponse::release_update() {
  
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* PossibleSettingOptionsResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.PossibleSettingOptionsResponse.update)
  
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* PossibleSettingOptionsResponse::_internal_mutable_update() {
  
  if (_impl_.update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::PossibleSettingOptionsUpdate>(GetArenaForAllocation());
    _impl_.update_ = p;
  }
  return _impl_.update_;
}
inline ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* PossibleSettingOptionsResponse::mutable_update() {
  ::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.PossibleSettingOptionsResponse.update)
  return _msg;
}
inline void PossibleSettingOptionsResponse::set_allocated_update(::mavsdk::rpc::camera::PossibleSettingOptionsUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.PossibleSettingOptionsResponse.update)
}

// -------------------------------------------------------------------

// SetSettingRequest

// int32 component_id = 1;
inline void SetSettingRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t SetSettingRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t SetSettingRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetSettingRequest.component_id)
  return _internal_component_id();
}
inline void SetSettingRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void SetSettingRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SetSettingRequest.component_id)
}

// .mavsdk.rpc.camera.Setting setting = 2;
inline bool SetSettingRequest::_internal_has_setting() const {
  return this != internal_default_instance() && _impl_.setting_ != nullptr;
}
inline bool SetSettingRequest::has_setting() const {
  return _internal_has_setting();
}
inline void SetSettingRequest::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Setting& SetSettingRequest::_internal_setting() const {
  const ::mavsdk::rpc::camera::Setting* p = _impl_.setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Setting&>(
      ::mavsdk::rpc::camera::_Setting_default_instance_);
}
inline const ::mavsdk::rpc::camera::Setting& SetSettingRequest::setting() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetSettingRequest.setting)
  return _internal_setting();
}
inline void SetSettingRequest::unsafe_arena_set_allocated_setting(
    ::mavsdk::rpc::camera::Setting* setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setting_);
  }
  _impl_.setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.SetSettingRequest.setting)
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::release_setting() {
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::unsafe_arena_release_setting() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetSettingRequest.setting)
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::_internal_mutable_setting() {
  
  if (_impl_.setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(GetArenaForAllocation());
    _impl_.setting_ = p;
  }
  return _impl_.setting_;
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::mutable_setting() {
  ::mavsdk::rpc::camera::Setting* _msg = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetSettingRequest.setting)
  return _msg;
}
inline void SetSettingRequest::set_allocated_setting(::mavsdk::rpc::camera::Setting* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setting);
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetSettingRequest.setting)
}

// -------------------------------------------------------------------

// SetSettingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool SetSettingResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool SetSettingResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void SetSettingResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& SetSettingResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& SetSettingResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  return _internal_camera_result();
}
inline void SetSettingResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.SetSettingResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  return _msg;
}
inline void SetSettingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetSettingResponse.camera_result)
}

// -------------------------------------------------------------------

// GetModeRequest

// int32 component_id = 1;
inline void GetModeRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetModeRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetModeRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetModeRequest.component_id)
  return _internal_component_id();
}
inline void GetModeRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetModeRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetModeRequest.component_id)
}

// -------------------------------------------------------------------

// GetModeResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetModeResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetModeResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetModeResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetModeResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetModeResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetModeResponse.camera_result)
  return _internal_camera_result();
}
inline void GetModeResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetModeResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetModeResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetModeResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetModeResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetModeResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetModeResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetModeResponse.camera_result)
  return _msg;
}
inline void GetModeResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetModeResponse.camera_result)
}

// .mavsdk.rpc.camera.Mode mode = 2;
inline void GetModeResponse::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::mavsdk::rpc::camera::Mode GetModeResponse::_internal_mode() const {
  return static_cast< ::mavsdk::rpc::camera::Mode >(_impl_.mode_);
}
inline ::mavsdk::rpc::camera::Mode GetModeResponse::mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetModeResponse.mode)
  return _internal_mode();
}
inline void GetModeResponse::_internal_set_mode(::mavsdk::rpc::camera::Mode value) {
  
  _impl_.mode_ = value;
}
inline void GetModeResponse::set_mode(::mavsdk::rpc::camera::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetModeResponse.mode)
}

// -------------------------------------------------------------------

// GetVideoStreamInfoRequest

// int32 component_id = 1;
inline void GetVideoStreamInfoRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetVideoStreamInfoRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetVideoStreamInfoRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetVideoStreamInfoRequest.component_id)
  return _internal_component_id();
}
inline void GetVideoStreamInfoRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetVideoStreamInfoRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetVideoStreamInfoRequest.component_id)
}

// -------------------------------------------------------------------

// GetVideoStreamInfoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetVideoStreamInfoResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetVideoStreamInfoResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetVideoStreamInfoResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetVideoStreamInfoResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetVideoStreamInfoResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetVideoStreamInfoResponse.camera_result)
  return _internal_camera_result();
}
inline void GetVideoStreamInfoResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetVideoStreamInfoResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetVideoStreamInfoResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetVideoStreamInfoResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetVideoStreamInfoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetVideoStreamInfoResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetVideoStreamInfoResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetVideoStreamInfoResponse.camera_result)
  return _msg;
}
inline void GetVideoStreamInfoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetVideoStreamInfoResponse.camera_result)
}

// .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 2;
inline bool GetVideoStreamInfoResponse::_internal_has_video_stream_info() const {
  return this != internal_default_instance() && _impl_.video_stream_info_ != nullptr;
}
inline bool GetVideoStreamInfoResponse::has_video_stream_info() const {
  return _internal_has_video_stream_info();
}
inline void GetVideoStreamInfoResponse::clear_video_stream_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_stream_info_ != nullptr) {
    delete _impl_.video_stream_info_;
  }
  _impl_.video_stream_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamInfo& GetVideoStreamInfoResponse::_internal_video_stream_info() const {
  const ::mavsdk::rpc::camera::VideoStreamInfo* p = _impl_.video_stream_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamInfo&>(
      ::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_);
}
inline const ::mavsdk::rpc::camera::VideoStreamInfo& GetVideoStreamInfoResponse::video_stream_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetVideoStreamInfoResponse.video_stream_info)
  return _internal_video_stream_info();
}
inline void GetVideoStreamInfoResponse::unsafe_arena_set_allocated_video_stream_info(
    ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_stream_info_);
  }
  _impl_.video_stream_info_ = video_stream_info;
  if (video_stream_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetVideoStreamInfoResponse.video_stream_info)
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* GetVideoStreamInfoResponse::release_video_stream_info() {
  
  ::mavsdk::rpc::camera::VideoStreamInfo* temp = _impl_.video_stream_info_;
  _impl_.video_stream_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* GetVideoStreamInfoResponse::unsafe_arena_release_video_stream_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetVideoStreamInfoResponse.video_stream_info)
  
  ::mavsdk::rpc::camera::VideoStreamInfo* temp = _impl_.video_stream_info_;
  _impl_.video_stream_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* GetVideoStreamInfoResponse::_internal_mutable_video_stream_info() {
  
  if (_impl_.video_stream_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfo>(GetArenaForAllocation());
    _impl_.video_stream_info_ = p;
  }
  return _impl_.video_stream_info_;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* GetVideoStreamInfoResponse::mutable_video_stream_info() {
  ::mavsdk::rpc::camera::VideoStreamInfo* _msg = _internal_mutable_video_stream_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetVideoStreamInfoResponse.video_stream_info)
  return _msg;
}
inline void GetVideoStreamInfoResponse::set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_stream_info_;
  }
  if (video_stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video_stream_info);
    if (message_arena != submessage_arena) {
      video_stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_stream_info_ = video_stream_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetVideoStreamInfoResponse.video_stream_info)
}

// -------------------------------------------------------------------

// GetStorageRequest

// int32 component_id = 1;
inline void GetStorageRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetStorageRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetStorageRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetStorageRequest.component_id)
  return _internal_component_id();
}
inline void GetStorageRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetStorageRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetStorageRequest.component_id)
}

// -------------------------------------------------------------------

// GetStorageResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetStorageResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetStorageResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetStorageResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetStorageResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetStorageResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetStorageResponse.camera_result)
  return _internal_camera_result();
}
inline void GetStorageResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetStorageResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetStorageResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetStorageResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetStorageResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetStorageResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetStorageResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetStorageResponse.camera_result)
  return _msg;
}
inline void GetStorageResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetStorageResponse.camera_result)
}

// .mavsdk.rpc.camera.Storage storage = 2;
inline bool GetStorageResponse::_internal_has_storage() const {
  return this != internal_default_instance() && _impl_.storage_ != nullptr;
}
inline bool GetStorageResponse::has_storage() const {
  return _internal_has_storage();
}
inline void GetStorageResponse::clear_storage() {
  if (GetArenaForAllocation() == nullptr && _impl_.storage_ != nullptr) {
    delete _impl_.storage_;
  }
  _impl_.storage_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Storage& GetStorageResponse::_internal_storage() const {
  const ::mavsdk::rpc::camera::Storage* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Storage&>(
      ::mavsdk::rpc::camera::_Storage_default_instance_);
}
inline const ::mavsdk::rpc::camera::Storage& GetStorageResponse::storage() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetStorageResponse.storage)
  return _internal_storage();
}
inline void GetStorageResponse::unsafe_arena_set_allocated_storage(
    ::mavsdk::rpc::camera::Storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetStorageResponse.storage)
}
inline ::mavsdk::rpc::camera::Storage* GetStorageResponse::release_storage() {
  
  ::mavsdk::rpc::camera::Storage* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Storage* GetStorageResponse::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetStorageResponse.storage)
  
  ::mavsdk::rpc::camera::Storage* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Storage* GetStorageResponse::_internal_mutable_storage() {
  
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Storage>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::mavsdk::rpc::camera::Storage* GetStorageResponse::mutable_storage() {
  ::mavsdk::rpc::camera::Storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetStorageResponse.storage)
  return _msg;
}
inline void GetStorageResponse::set_allocated_storage(::mavsdk::rpc::camera::Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetStorageResponse.storage)
}

// -------------------------------------------------------------------

// GetCurrentSettingsRequest

// int32 component_id = 1;
inline void GetCurrentSettingsRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetCurrentSettingsRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetCurrentSettingsRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetCurrentSettingsRequest.component_id)
  return _internal_component_id();
}
inline void GetCurrentSettingsRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetCurrentSettingsRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetCurrentSettingsRequest.component_id)
}

// -------------------------------------------------------------------

// GetCurrentSettingsResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetCurrentSettingsResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetCurrentSettingsResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetCurrentSettingsResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetCurrentSettingsResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetCurrentSettingsResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetCurrentSettingsResponse.camera_result)
  return _internal_camera_result();
}
inline void GetCurrentSettingsResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetCurrentSettingsResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetCurrentSettingsResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetCurrentSettingsResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetCurrentSettingsResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetCurrentSettingsResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetCurrentSettingsResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetCurrentSettingsResponse.camera_result)
  return _msg;
}
inline void GetCurrentSettingsResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetCurrentSettingsResponse.camera_result)
}

// repeated .mavsdk.rpc.camera.Setting current_settings = 2;
inline int GetCurrentSettingsResponse::_internal_current_settings_size() const {
  return _impl_.current_settings_.size();
}
inline int GetCurrentSettingsResponse::current_settings_size() const {
  return _internal_current_settings_size();
}
inline void GetCurrentSettingsResponse::clear_current_settings() {
  _impl_.current_settings_.Clear();
}
inline ::mavsdk::rpc::camera::Setting* GetCurrentSettingsResponse::mutable_current_settings(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetCurrentSettingsResponse.current_settings)
  return _impl_.current_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
GetCurrentSettingsResponse::mutable_current_settings() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.GetCurrentSettingsResponse.current_settings)
  return &_impl_.current_settings_;
}
inline const ::mavsdk::rpc::camera::Setting& GetCurrentSettingsResponse::_internal_current_settings(int index) const {
  return _impl_.current_settings_.Get(index);
}
inline const ::mavsdk::rpc::camera::Setting& GetCurrentSettingsResponse::current_settings(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetCurrentSettingsResponse.current_settings)
  return _internal_current_settings(index);
}
inline ::mavsdk::rpc::camera::Setting* GetCurrentSettingsResponse::_internal_add_current_settings() {
  return _impl_.current_settings_.Add();
}
inline ::mavsdk::rpc::camera::Setting* GetCurrentSettingsResponse::add_current_settings() {
  ::mavsdk::rpc::camera::Setting* _add = _internal_add_current_settings();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.GetCurrentSettingsResponse.current_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
GetCurrentSettingsResponse::current_settings() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.GetCurrentSettingsResponse.current_settings)
  return _impl_.current_settings_;
}

// -------------------------------------------------------------------

// GetPossibleSettingOptionsRequest

// int32 component_id = 1;
inline void GetPossibleSettingOptionsRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetPossibleSettingOptionsRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetPossibleSettingOptionsRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetPossibleSettingOptionsRequest.component_id)
  return _internal_component_id();
}
inline void GetPossibleSettingOptionsRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetPossibleSettingOptionsRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetPossibleSettingOptionsRequest.component_id)
}

// -------------------------------------------------------------------

// GetPossibleSettingOptionsResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetPossibleSettingOptionsResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetPossibleSettingOptionsResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetPossibleSettingOptionsResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetPossibleSettingOptionsResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetPossibleSettingOptionsResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.camera_result)
  return _internal_camera_result();
}
inline void GetPossibleSettingOptionsResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetPossibleSettingOptionsResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetPossibleSettingOptionsResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetPossibleSettingOptionsResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetPossibleSettingOptionsResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.camera_result)
  return _msg;
}
inline void GetPossibleSettingOptionsResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.camera_result)
}

// repeated .mavsdk.rpc.camera.SettingOptions setting_options = 2;
inline int GetPossibleSettingOptionsResponse::_internal_setting_options_size() const {
  return _impl_.setting_options_.size();
}
inline int GetPossibleSettingOptionsResponse::setting_options_size() const {
  return _internal_setting_options_size();
}
inline void GetPossibleSettingOptionsResponse::clear_setting_options() {
  _impl_.setting_options_.Clear();
}
inline ::mavsdk::rpc::camera::SettingOptions* GetPossibleSettingOptionsResponse::mutable_setting_options(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.setting_options)
  return _impl_.setting_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
GetPossibleSettingOptionsResponse::mutable_setting_options() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.setting_options)
  return &_impl_.setting_options_;
}
inline const ::mavsdk::rpc::camera::SettingOptions& GetPossibleSettingOptionsResponse::_internal_setting_options(int index) const {
  return _impl_.setting_options_.Get(index);
}
inline const ::mavsdk::rpc::camera::SettingOptions& GetPossibleSettingOptionsResponse::setting_options(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.setting_options)
  return _internal_setting_options(index);
}
inline ::mavsdk::rpc::camera::SettingOptions* GetPossibleSettingOptionsResponse::_internal_add_setting_options() {
  return _impl_.setting_options_.Add();
}
inline ::mavsdk::rpc::camera::SettingOptions* GetPossibleSettingOptionsResponse::add_setting_options() {
  ::mavsdk::rpc::camera::SettingOptions* _add = _internal_add_setting_options();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.setting_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
GetPossibleSettingOptionsResponse::setting_options() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.GetPossibleSettingOptionsResponse.setting_options)
  return _impl_.setting_options_;
}

// -------------------------------------------------------------------

// GetSettingRequest

// int32 component_id = 1;
inline void GetSettingRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t GetSettingRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t GetSettingRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetSettingRequest.component_id)
  return _internal_component_id();
}
inline void GetSettingRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void GetSettingRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.GetSettingRequest.component_id)
}

// .mavsdk.rpc.camera.Setting setting = 2;
inline bool GetSettingRequest::_internal_has_setting() const {
  return this != internal_default_instance() && _impl_.setting_ != nullptr;
}
inline bool GetSettingRequest::has_setting() const {
  return _internal_has_setting();
}
inline void GetSettingRequest::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Setting& GetSettingRequest::_internal_setting() const {
  const ::mavsdk::rpc::camera::Setting* p = _impl_.setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Setting&>(
      ::mavsdk::rpc::camera::_Setting_default_instance_);
}
inline const ::mavsdk::rpc::camera::Setting& GetSettingRequest::setting() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetSettingRequest.setting)
  return _internal_setting();
}
inline void GetSettingRequest::unsafe_arena_set_allocated_setting(
    ::mavsdk::rpc::camera::Setting* setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setting_);
  }
  _impl_.setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetSettingRequest.setting)
}
inline ::mavsdk::rpc::camera::Setting* GetSettingRequest::release_setting() {
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingRequest::unsafe_arena_release_setting() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetSettingRequest.setting)
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingRequest::_internal_mutable_setting() {
  
  if (_impl_.setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(GetArenaForAllocation());
    _impl_.setting_ = p;
  }
  return _impl_.setting_;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingRequest::mutable_setting() {
  ::mavsdk::rpc::camera::Setting* _msg = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetSettingRequest.setting)
  return _msg;
}
inline void GetSettingRequest::set_allocated_setting(::mavsdk::rpc::camera::Setting* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setting);
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetSettingRequest.setting)
}

// -------------------------------------------------------------------

// GetSettingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool GetSettingResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool GetSettingResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void GetSettingResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& GetSettingResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& GetSettingResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetSettingResponse.camera_result)
  return _internal_camera_result();
}
inline void GetSettingResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetSettingResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* GetSettingResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetSettingResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetSettingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* GetSettingResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* GetSettingResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetSettingResponse.camera_result)
  return _msg;
}
inline void GetSettingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetSettingResponse.camera_result)
}

// .mavsdk.rpc.camera.Setting setting = 2;
inline bool GetSettingResponse::_internal_has_setting() const {
  return this != internal_default_instance() && _impl_.setting_ != nullptr;
}
inline bool GetSettingResponse::has_setting() const {
  return _internal_has_setting();
}
inline void GetSettingResponse::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Setting& GetSettingResponse::_internal_setting() const {
  const ::mavsdk::rpc::camera::Setting* p = _impl_.setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Setting&>(
      ::mavsdk::rpc::camera::_Setting_default_instance_);
}
inline const ::mavsdk::rpc::camera::Setting& GetSettingResponse::setting() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.GetSettingResponse.setting)
  return _internal_setting();
}
inline void GetSettingResponse::unsafe_arena_set_allocated_setting(
    ::mavsdk::rpc::camera::Setting* setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setting_);
  }
  _impl_.setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.GetSettingResponse.setting)
}
inline ::mavsdk::rpc::camera::Setting* GetSettingResponse::release_setting() {
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingResponse::unsafe_arena_release_setting() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.GetSettingResponse.setting)
  
  ::mavsdk::rpc::camera::Setting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingResponse::_internal_mutable_setting() {
  
  if (_impl_.setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(GetArenaForAllocation());
    _impl_.setting_ = p;
  }
  return _impl_.setting_;
}
inline ::mavsdk::rpc::camera::Setting* GetSettingResponse::mutable_setting() {
  ::mavsdk::rpc::camera::Setting* _msg = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.GetSettingResponse.setting)
  return _msg;
}
inline void GetSettingResponse::set_allocated_setting(::mavsdk::rpc::camera::Setting* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setting);
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.GetSettingResponse.setting)
}

// -------------------------------------------------------------------

// FormatStorageRequest

// int32 component_id = 1;
inline void FormatStorageRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t FormatStorageRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t FormatStorageRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FormatStorageRequest.component_id)
  return _internal_component_id();
}
inline void FormatStorageRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void FormatStorageRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FormatStorageRequest.component_id)
}

// int32 storage_id = 2;
inline void FormatStorageRequest::clear_storage_id() {
  _impl_.storage_id_ = 0;
}
inline int32_t FormatStorageRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline int32_t FormatStorageRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FormatStorageRequest.storage_id)
  return _internal_storage_id();
}
inline void FormatStorageRequest::_internal_set_storage_id(int32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void FormatStorageRequest::set_storage_id(int32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FormatStorageRequest.storage_id)
}

// -------------------------------------------------------------------

// FormatStorageResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool FormatStorageResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool FormatStorageResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void FormatStorageResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& FormatStorageResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& FormatStorageResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FormatStorageResponse.camera_result)
  return _internal_camera_result();
}
inline void FormatStorageResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.FormatStorageResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* FormatStorageResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FormatStorageResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.FormatStorageResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FormatStorageResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* FormatStorageResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.FormatStorageResponse.camera_result)
  return _msg;
}
inline void FormatStorageResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.FormatStorageResponse.camera_result)
}

// -------------------------------------------------------------------

// ResetSettingsRequest

// int32 component_id = 1;
inline void ResetSettingsRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ResetSettingsRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ResetSettingsRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ResetSettingsRequest.component_id)
  return _internal_component_id();
}
inline void ResetSettingsRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ResetSettingsRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ResetSettingsRequest.component_id)
}

// -------------------------------------------------------------------

// ResetSettingsResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ResetSettingsResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ResetSettingsResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ResetSettingsResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ResetSettingsResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ResetSettingsResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ResetSettingsResponse.camera_result)
  return _internal_camera_result();
}
inline void ResetSettingsResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ResetSettingsResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ResetSettingsResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ResetSettingsResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ResetSettingsResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ResetSettingsResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ResetSettingsResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ResetSettingsResponse.camera_result)
  return _msg;
}
inline void ResetSettingsResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ResetSettingsResponse.camera_result)
}

// -------------------------------------------------------------------

// ZoomInStartRequest

// int32 component_id = 1;
inline void ZoomInStartRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ZoomInStartRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ZoomInStartRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomInStartRequest.component_id)
  return _internal_component_id();
}
inline void ZoomInStartRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ZoomInStartRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ZoomInStartRequest.component_id)
}

// -------------------------------------------------------------------

// ZoomInStartResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ZoomInStartResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ZoomInStartResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ZoomInStartResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomInStartResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomInStartResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomInStartResponse.camera_result)
  return _internal_camera_result();
}
inline void ZoomInStartResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ZoomInStartResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomInStartResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomInStartResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ZoomInStartResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomInStartResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomInStartResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ZoomInStartResponse.camera_result)
  return _msg;
}
inline void ZoomInStartResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ZoomInStartResponse.camera_result)
}

// -------------------------------------------------------------------

// ZoomOutStartRequest

// int32 component_id = 1;
inline void ZoomOutStartRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ZoomOutStartRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ZoomOutStartRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomOutStartRequest.component_id)
  return _internal_component_id();
}
inline void ZoomOutStartRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ZoomOutStartRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ZoomOutStartRequest.component_id)
}

// -------------------------------------------------------------------

// ZoomOutStartResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ZoomOutStartResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ZoomOutStartResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ZoomOutStartResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomOutStartResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomOutStartResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomOutStartResponse.camera_result)
  return _internal_camera_result();
}
inline void ZoomOutStartResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ZoomOutStartResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomOutStartResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomOutStartResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ZoomOutStartResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomOutStartResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomOutStartResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ZoomOutStartResponse.camera_result)
  return _msg;
}
inline void ZoomOutStartResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ZoomOutStartResponse.camera_result)
}

// -------------------------------------------------------------------

// ZoomStopRequest

// int32 component_id = 1;
inline void ZoomStopRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ZoomStopRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ZoomStopRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomStopRequest.component_id)
  return _internal_component_id();
}
inline void ZoomStopRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ZoomStopRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ZoomStopRequest.component_id)
}

// -------------------------------------------------------------------

// ZoomStopResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ZoomStopResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ZoomStopResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ZoomStopResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomStopResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomStopResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomStopResponse.camera_result)
  return _internal_camera_result();
}
inline void ZoomStopResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ZoomStopResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomStopResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomStopResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ZoomStopResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomStopResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomStopResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ZoomStopResponse.camera_result)
  return _msg;
}
inline void ZoomStopResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ZoomStopResponse.camera_result)
}

// -------------------------------------------------------------------

// ZoomRangeRequest

// int32 component_id = 1;
inline void ZoomRangeRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t ZoomRangeRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t ZoomRangeRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomRangeRequest.component_id)
  return _internal_component_id();
}
inline void ZoomRangeRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void ZoomRangeRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ZoomRangeRequest.component_id)
}

// float range = 2;
inline void ZoomRangeRequest::clear_range() {
  _impl_.range_ = 0;
}
inline float ZoomRangeRequest::_internal_range() const {
  return _impl_.range_;
}
inline float ZoomRangeRequest::range() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomRangeRequest.range)
  return _internal_range();
}
inline void ZoomRangeRequest::_internal_set_range(float value) {
  
  _impl_.range_ = value;
}
inline void ZoomRangeRequest::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ZoomRangeRequest.range)
}

// -------------------------------------------------------------------

// ZoomRangeResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool ZoomRangeResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool ZoomRangeResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void ZoomRangeResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomRangeResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& ZoomRangeResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ZoomRangeResponse.camera_result)
  return _internal_camera_result();
}
inline void ZoomRangeResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.ZoomRangeResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomRangeResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomRangeResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.ZoomRangeResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomRangeResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* ZoomRangeResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.ZoomRangeResponse.camera_result)
  return _msg;
}
inline void ZoomRangeResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.ZoomRangeResponse.camera_result)
}

// -------------------------------------------------------------------

// TrackPointRequest

// int32 component_id = 1;
inline void TrackPointRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t TrackPointRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t TrackPointRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackPointRequest.component_id)
  return _internal_component_id();
}
inline void TrackPointRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void TrackPointRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackPointRequest.component_id)
}

// float point_x = 2;
inline void TrackPointRequest::clear_point_x() {
  _impl_.point_x_ = 0;
}
inline float TrackPointRequest::_internal_point_x() const {
  return _impl_.point_x_;
}
inline float TrackPointRequest::point_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackPointRequest.point_x)
  return _internal_point_x();
}
inline void TrackPointRequest::_internal_set_point_x(float value) {
  
  _impl_.point_x_ = value;
}
inline void TrackPointRequest::set_point_x(float value) {
  _internal_set_point_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackPointRequest.point_x)
}

// float point_y = 3;
inline void TrackPointRequest::clear_point_y() {
  _impl_.point_y_ = 0;
}
inline float TrackPointRequest::_internal_point_y() const {
  return _impl_.point_y_;
}
inline float TrackPointRequest::point_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackPointRequest.point_y)
  return _internal_point_y();
}
inline void TrackPointRequest::_internal_set_point_y(float value) {
  
  _impl_.point_y_ = value;
}
inline void TrackPointRequest::set_point_y(float value) {
  _internal_set_point_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackPointRequest.point_y)
}

// float radius = 4;
inline void TrackPointRequest::clear_radius() {
  _impl_.radius_ = 0;
}
inline float TrackPointRequest::_internal_radius() const {
  return _impl_.radius_;
}
inline float TrackPointRequest::radius() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackPointRequest.radius)
  return _internal_radius();
}
inline void TrackPointRequest::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void TrackPointRequest::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackPointRequest.radius)
}

// -------------------------------------------------------------------

// TrackPointResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool TrackPointResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool TrackPointResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void TrackPointResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackPointResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackPointResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackPointResponse.camera_result)
  return _internal_camera_result();
}
inline void TrackPointResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.TrackPointResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* TrackPointResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackPointResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.TrackPointResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackPointResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackPointResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.TrackPointResponse.camera_result)
  return _msg;
}
inline void TrackPointResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.TrackPointResponse.camera_result)
}

// -------------------------------------------------------------------

// TrackRectangleRequest

// int32 component_id = 1;
inline void TrackRectangleRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t TrackRectangleRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t TrackRectangleRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleRequest.component_id)
  return _internal_component_id();
}
inline void TrackRectangleRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void TrackRectangleRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackRectangleRequest.component_id)
}

// float top_left_x = 2;
inline void TrackRectangleRequest::clear_top_left_x() {
  _impl_.top_left_x_ = 0;
}
inline float TrackRectangleRequest::_internal_top_left_x() const {
  return _impl_.top_left_x_;
}
inline float TrackRectangleRequest::top_left_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleRequest.top_left_x)
  return _internal_top_left_x();
}
inline void TrackRectangleRequest::_internal_set_top_left_x(float value) {
  
  _impl_.top_left_x_ = value;
}
inline void TrackRectangleRequest::set_top_left_x(float value) {
  _internal_set_top_left_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackRectangleRequest.top_left_x)
}

// float top_left_y = 3;
inline void TrackRectangleRequest::clear_top_left_y() {
  _impl_.top_left_y_ = 0;
}
inline float TrackRectangleRequest::_internal_top_left_y() const {
  return _impl_.top_left_y_;
}
inline float TrackRectangleRequest::top_left_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleRequest.top_left_y)
  return _internal_top_left_y();
}
inline void TrackRectangleRequest::_internal_set_top_left_y(float value) {
  
  _impl_.top_left_y_ = value;
}
inline void TrackRectangleRequest::set_top_left_y(float value) {
  _internal_set_top_left_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackRectangleRequest.top_left_y)
}

// float bottom_right_x = 4;
inline void TrackRectangleRequest::clear_bottom_right_x() {
  _impl_.bottom_right_x_ = 0;
}
inline float TrackRectangleRequest::_internal_bottom_right_x() const {
  return _impl_.bottom_right_x_;
}
inline float TrackRectangleRequest::bottom_right_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleRequest.bottom_right_x)
  return _internal_bottom_right_x();
}
inline void TrackRectangleRequest::_internal_set_bottom_right_x(float value) {
  
  _impl_.bottom_right_x_ = value;
}
inline void TrackRectangleRequest::set_bottom_right_x(float value) {
  _internal_set_bottom_right_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackRectangleRequest.bottom_right_x)
}

// float bottom_right_y = 5;
inline void TrackRectangleRequest::clear_bottom_right_y() {
  _impl_.bottom_right_y_ = 0;
}
inline float TrackRectangleRequest::_internal_bottom_right_y() const {
  return _impl_.bottom_right_y_;
}
inline float TrackRectangleRequest::bottom_right_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleRequest.bottom_right_y)
  return _internal_bottom_right_y();
}
inline void TrackRectangleRequest::_internal_set_bottom_right_y(float value) {
  
  _impl_.bottom_right_y_ = value;
}
inline void TrackRectangleRequest::set_bottom_right_y(float value) {
  _internal_set_bottom_right_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackRectangleRequest.bottom_right_y)
}

// -------------------------------------------------------------------

// TrackRectangleResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool TrackRectangleResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool TrackRectangleResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void TrackRectangleResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackRectangleResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackRectangleResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackRectangleResponse.camera_result)
  return _internal_camera_result();
}
inline void TrackRectangleResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.TrackRectangleResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* TrackRectangleResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackRectangleResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.TrackRectangleResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackRectangleResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackRectangleResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.TrackRectangleResponse.camera_result)
  return _msg;
}
inline void TrackRectangleResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.TrackRectangleResponse.camera_result)
}

// -------------------------------------------------------------------

// TrackStopRequest

// int32 component_id = 1;
inline void TrackStopRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t TrackStopRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t TrackStopRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackStopRequest.component_id)
  return _internal_component_id();
}
inline void TrackStopRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void TrackStopRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.TrackStopRequest.component_id)
}

// -------------------------------------------------------------------

// TrackStopResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool TrackStopResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool TrackStopResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void TrackStopResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackStopResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& TrackStopResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TrackStopResponse.camera_result)
  return _internal_camera_result();
}
inline void TrackStopResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.TrackStopResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* TrackStopResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackStopResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.TrackStopResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackStopResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* TrackStopResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.TrackStopResponse.camera_result)
  return _msg;
}
inline void TrackStopResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.TrackStopResponse.camera_result)
}

// -------------------------------------------------------------------

// FocusInStartRequest

// int32 component_id = 1;
inline void FocusInStartRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t FocusInStartRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t FocusInStartRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusInStartRequest.component_id)
  return _internal_component_id();
}
inline void FocusInStartRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void FocusInStartRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FocusInStartRequest.component_id)
}

// -------------------------------------------------------------------

// FocusInStartResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool FocusInStartResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool FocusInStartResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void FocusInStartResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusInStartResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusInStartResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusInStartResponse.camera_result)
  return _internal_camera_result();
}
inline void FocusInStartResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.FocusInStartResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* FocusInStartResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusInStartResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.FocusInStartResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusInStartResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusInStartResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.FocusInStartResponse.camera_result)
  return _msg;
}
inline void FocusInStartResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.FocusInStartResponse.camera_result)
}

// -------------------------------------------------------------------

// FocusOutStartRequest

// int32 component_id = 1;
inline void FocusOutStartRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t FocusOutStartRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t FocusOutStartRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusOutStartRequest.component_id)
  return _internal_component_id();
}
inline void FocusOutStartRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void FocusOutStartRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FocusOutStartRequest.component_id)
}

// -------------------------------------------------------------------

// FocusOutStartResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool FocusOutStartResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool FocusOutStartResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void FocusOutStartResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusOutStartResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusOutStartResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusOutStartResponse.camera_result)
  return _internal_camera_result();
}
inline void FocusOutStartResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.FocusOutStartResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* FocusOutStartResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusOutStartResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.FocusOutStartResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusOutStartResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusOutStartResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.FocusOutStartResponse.camera_result)
  return _msg;
}
inline void FocusOutStartResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.FocusOutStartResponse.camera_result)
}

// -------------------------------------------------------------------

// FocusStopRequest

// int32 component_id = 1;
inline void FocusStopRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t FocusStopRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t FocusStopRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusStopRequest.component_id)
  return _internal_component_id();
}
inline void FocusStopRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void FocusStopRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FocusStopRequest.component_id)
}

// -------------------------------------------------------------------

// FocusStopResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool FocusStopResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool FocusStopResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void FocusStopResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusStopResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusStopResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusStopResponse.camera_result)
  return _internal_camera_result();
}
inline void FocusStopResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.FocusStopResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* FocusStopResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusStopResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.FocusStopResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusStopResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusStopResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.FocusStopResponse.camera_result)
  return _msg;
}
inline void FocusStopResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.FocusStopResponse.camera_result)
}

// -------------------------------------------------------------------

// FocusRangeRequest

// int32 component_id = 1;
inline void FocusRangeRequest::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t FocusRangeRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t FocusRangeRequest::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusRangeRequest.component_id)
  return _internal_component_id();
}
inline void FocusRangeRequest::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void FocusRangeRequest::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FocusRangeRequest.component_id)
}

// float range = 2;
inline void FocusRangeRequest::clear_range() {
  _impl_.range_ = 0;
}
inline float FocusRangeRequest::_internal_range() const {
  return _impl_.range_;
}
inline float FocusRangeRequest::range() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusRangeRequest.range)
  return _internal_range();
}
inline void FocusRangeRequest::_internal_set_range(float value) {
  
  _impl_.range_ = value;
}
inline void FocusRangeRequest::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.FocusRangeRequest.range)
}

// -------------------------------------------------------------------

// FocusRangeResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool FocusRangeResponse::_internal_has_camera_result() const {
  return this != internal_default_instance() && _impl_.camera_result_ != nullptr;
}
inline bool FocusRangeResponse::has_camera_result() const {
  return _internal_has_camera_result();
}
inline void FocusRangeResponse::clear_camera_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_result_ != nullptr) {
    delete _impl_.camera_result_;
  }
  _impl_.camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusRangeResponse::_internal_camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = _impl_.camera_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult&>(
      ::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline const ::mavsdk::rpc::camera::CameraResult& FocusRangeResponse::camera_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.FocusRangeResponse.camera_result)
  return _internal_camera_result();
}
inline void FocusRangeResponse::unsafe_arena_set_allocated_camera_result(
    ::mavsdk::rpc::camera::CameraResult* camera_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_result_);
  }
  _impl_.camera_result_ = camera_result;
  if (camera_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.FocusRangeResponse.camera_result)
}
inline ::mavsdk::rpc::camera::CameraResult* FocusRangeResponse::release_camera_result() {
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusRangeResponse::unsafe_arena_release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.FocusRangeResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = _impl_.camera_result_;
  _impl_.camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusRangeResponse::_internal_mutable_camera_result() {
  
  if (_impl_.camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaForAllocation());
    _impl_.camera_result_ = p;
  }
  return _impl_.camera_result_;
}
inline ::mavsdk::rpc::camera::CameraResult* FocusRangeResponse::mutable_camera_result() {
  ::mavsdk::rpc::camera::CameraResult* _msg = _internal_mutable_camera_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.FocusRangeResponse.camera_result)
  return _msg;
}
inline void FocusRangeResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_result);
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.FocusRangeResponse.camera_result)
}

// -------------------------------------------------------------------

// CameraResult

// .mavsdk.rpc.camera.CameraResult.Result result = 1;
inline void CameraResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::camera::CameraResult_Result CameraResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::camera::CameraResult_Result >(_impl_.result_);
}
inline ::mavsdk::rpc::camera::CameraResult_Result CameraResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraResult.result)
  return _internal_result();
}
inline void CameraResult::_internal_set_result(::mavsdk::rpc::camera::CameraResult_Result value) {
  
  _impl_.result_ = value;
}
inline void CameraResult::set_result(::mavsdk::rpc::camera::CameraResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraResult.result)
}

// string result_str = 2;
inline void CameraResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& CameraResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraResult.result_str)
}
inline std::string* CameraResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraResult.result_str)
  return _s;
}
inline const std::string& CameraResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void CameraResult::_internal_set_result_str(const std::string& value) {
  
  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraResult::_internal_mutable_result_str() {
  
  return _impl_.result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CameraResult.result_str)
  return _impl_.result_str_.Release();
}
inline void CameraResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  _impl_.result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CameraResult.result_str)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1;
inline void Position::clear_latitude_deg() {
  _impl_.latitude_deg_ = 0;
}
inline double Position::_internal_latitude_deg() const {
  return _impl_.latitude_deg_;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::_internal_set_latitude_deg(double value) {
  
  _impl_.latitude_deg_ = value;
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.latitude_deg)
}

// double longitude_deg = 2;
inline void Position::clear_longitude_deg() {
  _impl_.longitude_deg_ = 0;
}
inline double Position::_internal_longitude_deg() const {
  return _impl_.longitude_deg_;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::_internal_set_longitude_deg(double value) {
  
  _impl_.longitude_deg_ = value;
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void Position::clear_absolute_altitude_m() {
  _impl_.absolute_altitude_m_ = 0;
}
inline float Position::_internal_absolute_altitude_m() const {
  return _impl_.absolute_altitude_m_;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  
  _impl_.absolute_altitude_m_ = value;
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4;
inline void Position::clear_relative_altitude_m() {
  _impl_.relative_altitude_m_ = 0;
}
inline float Position::_internal_relative_altitude_m() const {
  return _impl_.relative_altitude_m_;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  
  _impl_.relative_altitude_m_ = value;
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  _impl_.w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return _impl_.w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  _impl_.x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return _impl_.x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  _impl_.y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return _impl_.y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  _impl_.z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return _impl_.z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.z)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1;
inline void EulerAngle::clear_roll_deg() {
  _impl_.roll_deg_ = 0;
}
inline float EulerAngle::_internal_roll_deg() const {
  return _impl_.roll_deg_;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  
  _impl_.roll_deg_ = value;
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.roll_deg)
}

// float pitch_deg = 2;
inline void EulerAngle::clear_pitch_deg() {
  _impl_.pitch_deg_ = 0;
}
inline float EulerAngle::_internal_pitch_deg() const {
  return _impl_.pitch_deg_;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  
  _impl_.pitch_deg_ = value;
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.pitch_deg)
}

// float yaw_deg = 3;
inline void EulerAngle::clear_yaw_deg() {
  _impl_.yaw_deg_ = 0;
}
inline float EulerAngle::_internal_yaw_deg() const {
  return _impl_.yaw_deg_;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  
  _impl_.yaw_deg_ = value;
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.yaw_deg)
}

// -------------------------------------------------------------------

// CaptureInfo

// int32 component_id = 1;
inline void CaptureInfo::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t CaptureInfo::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t CaptureInfo::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.component_id)
  return _internal_component_id();
}
inline void CaptureInfo::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void CaptureInfo::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.component_id)
}

// .mavsdk.rpc.camera.Position position = 2;
inline bool CaptureInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CaptureInfo::has_position() const {
  return _internal_has_position();
}
inline void CaptureInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Position& CaptureInfo::_internal_position() const {
  const ::mavsdk::rpc::camera::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Position&>(
      ::mavsdk::rpc::camera::_Position_default_instance_);
}
inline const ::mavsdk::rpc::camera::Position& CaptureInfo::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.position)
  return _internal_position();
}
inline void CaptureInfo::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::camera::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CaptureInfo.position)
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::release_position() {
  
  ::mavsdk::rpc::camera::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.position)
  
  ::mavsdk::rpc::camera::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::mutable_position() {
  ::mavsdk::rpc::camera::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.position)
  return _msg;
}
inline void CaptureInfo::set_allocated_position(::mavsdk::rpc::camera::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.position)
}

// .mavsdk.rpc.camera.Quaternion attitude_quaternion = 3;
inline bool CaptureInfo::_internal_has_attitude_quaternion() const {
  return this != internal_default_instance() && _impl_.attitude_quaternion_ != nullptr;
}
inline bool CaptureInfo::has_attitude_quaternion() const {
  return _internal_has_attitude_quaternion();
}
inline void CaptureInfo::clear_attitude_quaternion() {
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_quaternion_ != nullptr) {
    delete _impl_.attitude_quaternion_;
  }
  _impl_.attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Quaternion& CaptureInfo::_internal_attitude_quaternion() const {
  const ::mavsdk::rpc::camera::Quaternion* p = _impl_.attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::Quaternion&>(
      ::mavsdk::rpc::camera::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::camera::Quaternion& CaptureInfo::attitude_quaternion() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void CaptureInfo::unsafe_arena_set_allocated_attitude_quaternion(
    ::mavsdk::rpc::camera::Quaternion* attitude_quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attitude_quaternion_);
  }
  _impl_.attitude_quaternion_ = attitude_quaternion;
  if (attitude_quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::release_attitude_quaternion() {
  
  ::mavsdk::rpc::camera::Quaternion* temp = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::unsafe_arena_release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  
  ::mavsdk::rpc::camera::Quaternion* temp = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::_internal_mutable_attitude_quaternion() {
  
  if (_impl_.attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Quaternion>(GetArenaForAllocation());
    _impl_.attitude_quaternion_ = p;
  }
  return _impl_.attitude_quaternion_;
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::mutable_attitude_quaternion() {
  ::mavsdk::rpc::camera::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  return _msg;
}
inline void CaptureInfo::set_allocated_attitude_quaternion(::mavsdk::rpc::camera::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_quaternion);
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
}

// .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 4;
inline bool CaptureInfo::_internal_has_attitude_euler_angle() const {
  return this != internal_default_instance() && _impl_.attitude_euler_angle_ != nullptr;
}
inline bool CaptureInfo::has_attitude_euler_angle() const {
  return _internal_has_attitude_euler_angle();
}
inline void CaptureInfo::clear_attitude_euler_angle() {
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_euler_angle_ != nullptr) {
    delete _impl_.attitude_euler_angle_;
  }
  _impl_.attitude_euler_angle_ = nullptr;
}
inline const ::mavsdk::rpc::camera::EulerAngle& CaptureInfo::_internal_attitude_euler_angle() const {
  const ::mavsdk::rpc::camera::EulerAngle* p = _impl_.attitude_euler_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera::EulerAngle&>(
      ::mavsdk::rpc::camera::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::camera::EulerAngle& CaptureInfo::attitude_euler_angle() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  return _internal_attitude_euler_angle();
}
inline void CaptureInfo::unsafe_arena_set_allocated_attitude_euler_angle(
    ::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attitude_euler_angle_);
  }
  _impl_.attitude_euler_angle_ = attitude_euler_angle;
  if (attitude_euler_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::release_attitude_euler_angle() {
  
  ::mavsdk::rpc::camera::EulerAngle* temp = _impl_.attitude_euler_angle_;
  _impl_.attitude_euler_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::unsafe_arena_release_attitude_euler_angle() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  
  ::mavsdk::rpc::camera::EulerAngle* temp = _impl_.attitude_euler_angle_;
  _impl_.attitude_euler_angle_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::_internal_mutable_attitude_euler_angle() {
  
  if (_impl_.attitude_euler_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::EulerAngle>(GetArenaForAllocation());
    _impl_.attitude_euler_angle_ = p;
  }
  return _impl_.attitude_euler_angle_;
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::mutable_attitude_euler_angle() {
  ::mavsdk::rpc::camera::EulerAngle* _msg = _internal_mutable_attitude_euler_angle();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  return _msg;
}
inline void CaptureInfo::set_allocated_attitude_euler_angle(::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attitude_euler_angle_;
  }
  if (attitude_euler_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_euler_angle);
    if (message_arena != submessage_arena) {
      attitude_euler_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler_angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attitude_euler_angle_ = attitude_euler_angle;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
}

// uint64 time_utc_us = 5;
inline void CaptureInfo::clear_time_utc_us() {
  _impl_.time_utc_us_ = uint64_t{0u};
}
inline uint64_t CaptureInfo::_internal_time_utc_us() const {
  return _impl_.time_utc_us_;
}
inline uint64_t CaptureInfo::time_utc_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.time_utc_us)
  return _internal_time_utc_us();
}
inline void CaptureInfo::_internal_set_time_utc_us(uint64_t value) {
  
  _impl_.time_utc_us_ = value;
}
inline void CaptureInfo::set_time_utc_us(uint64_t value) {
  _internal_set_time_utc_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.time_utc_us)
}

// bool is_success = 6;
inline void CaptureInfo::clear_is_success() {
  _impl_.is_success_ = false;
}
inline bool CaptureInfo::_internal_is_success() const {
  return _impl_.is_success_;
}
inline bool CaptureInfo::is_success() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.is_success)
  return _internal_is_success();
}
inline void CaptureInfo::_internal_set_is_success(bool value) {
  
  _impl_.is_success_ = value;
}
inline void CaptureInfo::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.is_success)
}

// int32 index = 7;
inline void CaptureInfo::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t CaptureInfo::_internal_index() const {
  return _impl_.index_;
}
inline int32_t CaptureInfo::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.index)
  return _internal_index();
}
inline void CaptureInfo::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void CaptureInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.index)
}

// string file_url = 8;
inline void CaptureInfo::clear_file_url() {
  _impl_.file_url_.ClearToEmpty();
}
inline const std::string& CaptureInfo::file_url() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.file_url)
  return _internal_file_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureInfo::set_file_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.file_url)
}
inline std::string* CaptureInfo::mutable_file_url() {
  std::string* _s = _internal_mutable_file_url();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.file_url)
  return _s;
}
inline const std::string& CaptureInfo::_internal_file_url() const {
  return _impl_.file_url_.Get();
}
inline void CaptureInfo::_internal_set_file_url(const std::string& value) {
  
  _impl_.file_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureInfo::_internal_mutable_file_url() {
  
  return _impl_.file_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureInfo::release_file_url() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.file_url)
  return _impl_.file_url_.Release();
}
inline void CaptureInfo::set_allocated_file_url(std::string* file_url) {
  if (file_url != nullptr) {
    
  } else {
    
  }
  _impl_.file_url_.SetAllocated(file_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_url_.IsDefault()) {
    _impl_.file_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.file_url)
}

// -------------------------------------------------------------------

// Information

// int32 component_id = 1;
inline void Information::clear_component_id() {
  _impl_.component_id_ = 0;
}
inline int32_t Information::_internal_component_id() const {
  return _impl_.component_id_;
}
inline int32_t Information::component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.component_id)
  return _internal_component_id();
}
inline void Information::_internal_set_component_id(int32_t value) {
  
  _impl_.component_id_ = value;
}
inline void Information::set_component_id(int32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.component_id)
}

// string vendor_name = 2;
inline void Information::clear_vendor_name() {
  _impl_.vendor_name_.ClearToEmpty();
}
inline const std::string& Information::vendor_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.vendor_name)
  return _internal_vendor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_vendor_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vendor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.vendor_name)
}
inline std::string* Information::mutable_vendor_name() {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Information.vendor_name)
  return _s;
}
inline const std::string& Information::_internal_vendor_name() const {
  return _impl_.vendor_name_.Get();
}
inline void Information::_internal_set_vendor_name(const std::string& value) {
  
  _impl_.vendor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_vendor_name() {
  
  return _impl_.vendor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_vendor_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Information.vendor_name)
  return _impl_.vendor_name_.Release();
}
inline void Information::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  _impl_.vendor_name_.SetAllocated(vendor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_name_.IsDefault()) {
    _impl_.vendor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Information.vendor_name)
}

// string model_name = 3;
inline void Information::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& Information::model_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.model_name)
}
inline std::string* Information::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Information.model_name)
  return _s;
}
inline const std::string& Information::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void Information::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_model_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Information.model_name)
  return _impl_.model_name_.Release();
}
inline void Information::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Information.model_name)
}

// float focal_length_mm = 4;
inline void Information::clear_focal_length_mm() {
  _impl_.focal_length_mm_ = 0;
}
inline float Information::_internal_focal_length_mm() const {
  return _impl_.focal_length_mm_;
}
inline float Information::focal_length_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.focal_length_mm)
  return _internal_focal_length_mm();
}
inline void Information::_internal_set_focal_length_mm(float value) {
  
  _impl_.focal_length_mm_ = value;
}
inline void Information::set_focal_length_mm(float value) {
  _internal_set_focal_length_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.focal_length_mm)
}

// float horizontal_sensor_size_mm = 5;
inline void Information::clear_horizontal_sensor_size_mm() {
  _impl_.horizontal_sensor_size_mm_ = 0;
}
inline float Information::_internal_horizontal_sensor_size_mm() const {
  return _impl_.horizontal_sensor_size_mm_;
}
inline float Information::horizontal_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.horizontal_sensor_size_mm)
  return _internal_horizontal_sensor_size_mm();
}
inline void Information::_internal_set_horizontal_sensor_size_mm(float value) {
  
  _impl_.horizontal_sensor_size_mm_ = value;
}
inline void Information::set_horizontal_sensor_size_mm(float value) {
  _internal_set_horizontal_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.horizontal_sensor_size_mm)
}

// float vertical_sensor_size_mm = 6;
inline void Information::clear_vertical_sensor_size_mm() {
  _impl_.vertical_sensor_size_mm_ = 0;
}
inline float Information::_internal_vertical_sensor_size_mm() const {
  return _impl_.vertical_sensor_size_mm_;
}
inline float Information::vertical_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.vertical_sensor_size_mm)
  return _internal_vertical_sensor_size_mm();
}
inline void Information::_internal_set_vertical_sensor_size_mm(float value) {
  
  _impl_.vertical_sensor_size_mm_ = value;
}
inline void Information::set_vertical_sensor_size_mm(float value) {
  _internal_set_vertical_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.vertical_sensor_size_mm)
}

// uint32 horizontal_resolution_px = 7;
inline void Information::clear_horizontal_resolution_px() {
  _impl_.horizontal_resolution_px_ = 0u;
}
inline uint32_t Information::_internal_horizontal_resolution_px() const {
  return _impl_.horizontal_resolution_px_;
}
inline uint32_t Information::horizontal_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.horizontal_resolution_px)
  return _internal_horizontal_resolution_px();
}
inline void Information::_internal_set_horizontal_resolution_px(uint32_t value) {
  
  _impl_.horizontal_resolution_px_ = value;
}
inline void Information::set_horizontal_resolution_px(uint32_t value) {
  _internal_set_horizontal_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.horizontal_resolution_px)
}

// uint32 vertical_resolution_px = 8;
inline void Information::clear_vertical_resolution_px() {
  _impl_.vertical_resolution_px_ = 0u;
}
inline uint32_t Information::_internal_vertical_resolution_px() const {
  return _impl_.vertical_resolution_px_;
}
inline uint32_t Information::vertical_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Information.vertical_resolution_px)
  return _internal_vertical_resolution_px();
}
inline void Information::_internal_set_vertical_resolution_px(uint32_t value) {
  
  _impl_.vertical_resolution_px_ = value;
}
inline void Information::set_vertical_resolution_px(uint32_t value) {
  _internal_set_vertical_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Information.vertical_resolution_px)
}

// -------------------------------------------------------------------

// CameraList

// repeated .mavsdk.rpc.camera.Information cameras = 1;
inline int CameraList::_internal_cameras_size() const {
  return _impl_.cameras_.size();
}
inline int CameraList::cameras_size() const {
  return _internal_cameras_size();
}
inline void CameraList::clear_cameras() {
  _impl_.cameras_.Clear();
}
inline ::mavsdk::rpc::camera::Information* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraList.cameras)
  return _impl_.cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Information >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.CameraList.cameras)
  return &_impl_.cameras_;
}
inline const ::mavsdk::rpc::camera::Information& CameraList::_internal_cameras(int index) const {
  return _impl_.cameras_.Get(index);
}
inline const ::mavsdk::rpc::camera::Information& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraList.cameras)
  return _internal_cameras(index);
}
inline ::mavsdk::rpc::camera::Information* CameraList::_internal_add_cameras() {
  return _impl_.cameras_.Add();
}
inline ::mavsdk::rpc::camera::Information* CameraList::add_cameras() {
  ::mavsdk::rpc::camera::Information* _add = _internal_add_cameras();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.CameraList.cameras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Information >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.CameraList.cameras)
  return _impl_.cameras_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus>() {
  return ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum>() {
  return ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamSpectrum_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::Storage_StorageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::Storage_StorageStatus>() {
  return ::mavsdk::rpc::camera::Storage_StorageStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::Storage_StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::Storage_StorageType>() {
  return ::mavsdk::rpc::camera::Storage_StorageType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::CameraResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::CameraResult_Result>() {
  return ::mavsdk::rpc::camera::CameraResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::Mode>() {
  return ::mavsdk::rpc::camera::Mode_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::PhotosRange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::PhotosRange>() {
  return ::mavsdk::rpc::camera::PhotosRange_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto
