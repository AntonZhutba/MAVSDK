// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal/gimbal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gimbal_2fgimbal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gimbal_2fgimbal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gimbal_2fgimbal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gimbal_2fgimbal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gimbal_2fgimbal_2eproto;
namespace mavsdk {
namespace rpc {
namespace gimbal {
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class Attitude;
struct AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class AttitudeResponse;
struct AttitudeResponseDefaultTypeInternal;
extern AttitudeResponseDefaultTypeInternal _AttitudeResponse_default_instance_;
class ControlStatus;
struct ControlStatusDefaultTypeInternal;
extern ControlStatusDefaultTypeInternal _ControlStatus_default_instance_;
class ControlStatusResponse;
struct ControlStatusResponseDefaultTypeInternal;
extern ControlStatusResponseDefaultTypeInternal _ControlStatusResponse_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class GetAttitudeRequest;
struct GetAttitudeRequestDefaultTypeInternal;
extern GetAttitudeRequestDefaultTypeInternal _GetAttitudeRequest_default_instance_;
class GetAttitudeResponse;
struct GetAttitudeResponseDefaultTypeInternal;
extern GetAttitudeResponseDefaultTypeInternal _GetAttitudeResponse_default_instance_;
class GetControlStatusRequest;
struct GetControlStatusRequestDefaultTypeInternal;
extern GetControlStatusRequestDefaultTypeInternal _GetControlStatusRequest_default_instance_;
class GetControlStatusResponse;
struct GetControlStatusResponseDefaultTypeInternal;
extern GetControlStatusResponseDefaultTypeInternal _GetControlStatusResponse_default_instance_;
class GimbalItem;
struct GimbalItemDefaultTypeInternal;
extern GimbalItemDefaultTypeInternal _GimbalItem_default_instance_;
class GimbalList;
struct GimbalListDefaultTypeInternal;
extern GimbalListDefaultTypeInternal _GimbalList_default_instance_;
class GimbalListResponse;
struct GimbalListResponseDefaultTypeInternal;
extern GimbalListResponseDefaultTypeInternal _GimbalListResponse_default_instance_;
class GimbalResult;
struct GimbalResultDefaultTypeInternal;
extern GimbalResultDefaultTypeInternal _GimbalResult_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class ReleaseControlRequest;
struct ReleaseControlRequestDefaultTypeInternal;
extern ReleaseControlRequestDefaultTypeInternal _ReleaseControlRequest_default_instance_;
class ReleaseControlResponse;
struct ReleaseControlResponseDefaultTypeInternal;
extern ReleaseControlResponseDefaultTypeInternal _ReleaseControlResponse_default_instance_;
class SetAnglesRequest;
struct SetAnglesRequestDefaultTypeInternal;
extern SetAnglesRequestDefaultTypeInternal _SetAnglesRequest_default_instance_;
class SetAnglesResponse;
struct SetAnglesResponseDefaultTypeInternal;
extern SetAnglesResponseDefaultTypeInternal _SetAnglesResponse_default_instance_;
class SetAngularRatesRequest;
struct SetAngularRatesRequestDefaultTypeInternal;
extern SetAngularRatesRequestDefaultTypeInternal _SetAngularRatesRequest_default_instance_;
class SetAngularRatesResponse;
struct SetAngularRatesResponseDefaultTypeInternal;
extern SetAngularRatesResponseDefaultTypeInternal _SetAngularRatesResponse_default_instance_;
class SetRoiLocationRequest;
struct SetRoiLocationRequestDefaultTypeInternal;
extern SetRoiLocationRequestDefaultTypeInternal _SetRoiLocationRequest_default_instance_;
class SetRoiLocationResponse;
struct SetRoiLocationResponseDefaultTypeInternal;
extern SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;
class SubscribeAttitudeRequest;
struct SubscribeAttitudeRequestDefaultTypeInternal;
extern SubscribeAttitudeRequestDefaultTypeInternal _SubscribeAttitudeRequest_default_instance_;
class SubscribeControlStatusRequest;
struct SubscribeControlStatusRequestDefaultTypeInternal;
extern SubscribeControlStatusRequestDefaultTypeInternal _SubscribeControlStatusRequest_default_instance_;
class SubscribeGimbalListRequest;
struct SubscribeGimbalListRequestDefaultTypeInternal;
extern SubscribeGimbalListRequestDefaultTypeInternal _SubscribeGimbalListRequest_default_instance_;
class TakeControlRequest;
struct TakeControlRequestDefaultTypeInternal;
extern TakeControlRequestDefaultTypeInternal _TakeControlRequest_default_instance_;
class TakeControlResponse;
struct TakeControlResponseDefaultTypeInternal;
extern TakeControlResponseDefaultTypeInternal _TakeControlResponse_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::gimbal::AngularVelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::AngularVelocityBody>(Arena*);
template<> ::mavsdk::rpc::gimbal::Attitude* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::Attitude>(Arena*);
template<> ::mavsdk::rpc::gimbal::AttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::AttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::ControlStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::ControlStatus>(Arena*);
template<> ::mavsdk::rpc::gimbal::ControlStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::ControlStatusResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::gimbal::GetAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GetAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::GetAttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GetAttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::GetControlStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GetControlStatusRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::GetControlStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GetControlStatusResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::GimbalItem* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalItem>(Arena*);
template<> ::mavsdk::rpc::gimbal::GimbalList* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalList>(Arena*);
template<> ::mavsdk::rpc::gimbal::GimbalListResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalListResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::GimbalResult* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(Arena*);
template<> ::mavsdk::rpc::gimbal::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::Quaternion>(Arena*);
template<> ::mavsdk::rpc::gimbal::ReleaseControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::ReleaseControlRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::ReleaseControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::ReleaseControlResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetAnglesRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetAnglesRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetAnglesResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetAnglesResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetAngularRatesRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetAngularRatesRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetAngularRatesResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetAngularRatesResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetRoiLocationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetRoiLocationRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::SetRoiLocationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SetRoiLocationResponse>(Arena*);
template<> ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SubscribeAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SubscribeControlStatusRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::SubscribeGimbalListRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::TakeControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::TakeControlRequest>(Arena*);
template<> ::mavsdk::rpc::gimbal::TakeControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gimbal::TakeControlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace gimbal {

enum GimbalResult_Result : int {
  GimbalResult_Result_RESULT_UNKNOWN = 0,
  GimbalResult_Result_RESULT_SUCCESS = 1,
  GimbalResult_Result_RESULT_ERROR = 2,
  GimbalResult_Result_RESULT_TIMEOUT = 3,
  GimbalResult_Result_RESULT_UNSUPPORTED = 4,
  GimbalResult_Result_RESULT_NO_SYSTEM = 5,
  GimbalResult_Result_RESULT_INVALID_ARGUMENT = 6,
  GimbalResult_Result_GimbalResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GimbalResult_Result_GimbalResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GimbalResult_Result_IsValid(int value);
constexpr GimbalResult_Result GimbalResult_Result_Result_MIN = GimbalResult_Result_RESULT_UNKNOWN;
constexpr GimbalResult_Result GimbalResult_Result_Result_MAX = GimbalResult_Result_RESULT_INVALID_ARGUMENT;
constexpr int GimbalResult_Result_Result_ARRAYSIZE = GimbalResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalResult_Result_descriptor();
template<typename T>
inline const std::string& GimbalResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GimbalResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GimbalResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GimbalResult_Result_descriptor(), enum_t_value);
}
inline bool GimbalResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GimbalResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GimbalResult_Result>(
    GimbalResult_Result_descriptor(), name, value);
}
enum GimbalMode : int {
  GIMBAL_MODE_YAW_FOLLOW = 0,
  GIMBAL_MODE_YAW_LOCK = 1,
  GimbalMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GimbalMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GimbalMode_IsValid(int value);
constexpr GimbalMode GimbalMode_MIN = GIMBAL_MODE_YAW_FOLLOW;
constexpr GimbalMode GimbalMode_MAX = GIMBAL_MODE_YAW_LOCK;
constexpr int GimbalMode_ARRAYSIZE = GimbalMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalMode_descriptor();
template<typename T>
inline const std::string& GimbalMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GimbalMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GimbalMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GimbalMode_descriptor(), enum_t_value);
}
inline bool GimbalMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GimbalMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GimbalMode>(
    GimbalMode_descriptor(), name, value);
}
enum ControlMode : int {
  CONTROL_MODE_NONE = 0,
  CONTROL_MODE_PRIMARY = 1,
  CONTROL_MODE_SECONDARY = 2,
  ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlMode_IsValid(int value);
constexpr ControlMode ControlMode_MIN = CONTROL_MODE_NONE;
constexpr ControlMode ControlMode_MAX = CONTROL_MODE_SECONDARY;
constexpr int ControlMode_ARRAYSIZE = ControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMode_descriptor();
template<typename T>
inline const std::string& ControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMode_descriptor(), enum_t_value);
}
inline bool ControlMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMode>(
    ControlMode_descriptor(), name, value);
}
enum SendMode : int {
  SEND_MODE_ONCE = 0,
  SEND_MODE_STREAM = 1,
  SendMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SendMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SendMode_IsValid(int value);
constexpr SendMode SendMode_MIN = SEND_MODE_ONCE;
constexpr SendMode SendMode_MAX = SEND_MODE_STREAM;
constexpr int SendMode_ARRAYSIZE = SendMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendMode_descriptor();
template<typename T>
inline const std::string& SendMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SendMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SendMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SendMode_descriptor(), enum_t_value);
}
inline bool SendMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SendMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SendMode>(
    SendMode_descriptor(), name, value);
}
// ===================================================================

class SetAnglesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAnglesRequest) */ {
 public:
  inline SetAnglesRequest() : SetAnglesRequest(nullptr) {}
  ~SetAnglesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAnglesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnglesRequest(const SetAnglesRequest& from);
  SetAnglesRequest(SetAnglesRequest&& from) noexcept
    : SetAnglesRequest() {
    *this = ::std::move(from);
  }

  inline SetAnglesRequest& operator=(const SetAnglesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnglesRequest& operator=(SetAnglesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnglesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnglesRequest* internal_default_instance() {
    return reinterpret_cast<const SetAnglesRequest*>(
               &_SetAnglesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetAnglesRequest& a, SetAnglesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnglesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnglesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAnglesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAnglesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAnglesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetAnglesRequest& from) {
    SetAnglesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnglesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetAnglesRequest";
  }
  protected:
  explicit SetAnglesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
    kRollDegFieldNumber = 2,
    kPitchDegFieldNumber = 3,
    kYawDegFieldNumber = 4,
    kGimbalModeFieldNumber = 5,
    kSendModeFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // float roll_deg = 2;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 3;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  void clear_gimbal_mode();
  ::mavsdk::rpc::gimbal::GimbalMode gimbal_mode() const;
  void set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);
  private:
  ::mavsdk::rpc::gimbal::GimbalMode _internal_gimbal_mode() const;
  void _internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);
  public:

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  void clear_send_mode();
  ::mavsdk::rpc::gimbal::SendMode send_mode() const;
  void set_send_mode(::mavsdk::rpc::gimbal::SendMode value);
  private:
  ::mavsdk::rpc::gimbal::SendMode _internal_send_mode() const;
  void _internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAnglesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    float roll_deg_;
    float pitch_deg_;
    float yaw_deg_;
    int gimbal_mode_;
    int send_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAnglesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAnglesResponse) */ {
 public:
  inline SetAnglesResponse() : SetAnglesResponse(nullptr) {}
  ~SetAnglesResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAnglesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnglesResponse(const SetAnglesResponse& from);
  SetAnglesResponse(SetAnglesResponse&& from) noexcept
    : SetAnglesResponse() {
    *this = ::std::move(from);
  }

  inline SetAnglesResponse& operator=(const SetAnglesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnglesResponse& operator=(SetAnglesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnglesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnglesResponse* internal_default_instance() {
    return reinterpret_cast<const SetAnglesResponse*>(
               &_SetAnglesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetAnglesResponse& a, SetAnglesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnglesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnglesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAnglesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAnglesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAnglesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetAnglesResponse& from) {
    SetAnglesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnglesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetAnglesResponse";
  }
  protected:
  explicit SetAnglesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAnglesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAngularRatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAngularRatesRequest) */ {
 public:
  inline SetAngularRatesRequest() : SetAngularRatesRequest(nullptr) {}
  ~SetAngularRatesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAngularRatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAngularRatesRequest(const SetAngularRatesRequest& from);
  SetAngularRatesRequest(SetAngularRatesRequest&& from) noexcept
    : SetAngularRatesRequest() {
    *this = ::std::move(from);
  }

  inline SetAngularRatesRequest& operator=(const SetAngularRatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAngularRatesRequest& operator=(SetAngularRatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAngularRatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAngularRatesRequest* internal_default_instance() {
    return reinterpret_cast<const SetAngularRatesRequest*>(
               &_SetAngularRatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAngularRatesRequest& a, SetAngularRatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAngularRatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAngularRatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAngularRatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAngularRatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAngularRatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetAngularRatesRequest& from) {
    SetAngularRatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAngularRatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetAngularRatesRequest";
  }
  protected:
  explicit SetAngularRatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
    kRollRateDegSFieldNumber = 2,
    kPitchRateDegSFieldNumber = 3,
    kYawRateDegSFieldNumber = 4,
    kGimbalModeFieldNumber = 5,
    kSendModeFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // float roll_rate_deg_s = 2;
  void clear_roll_rate_deg_s();
  float roll_rate_deg_s() const;
  void set_roll_rate_deg_s(float value);
  private:
  float _internal_roll_rate_deg_s() const;
  void _internal_set_roll_rate_deg_s(float value);
  public:

  // float pitch_rate_deg_s = 3;
  void clear_pitch_rate_deg_s();
  float pitch_rate_deg_s() const;
  void set_pitch_rate_deg_s(float value);
  private:
  float _internal_pitch_rate_deg_s() const;
  void _internal_set_pitch_rate_deg_s(float value);
  public:

  // float yaw_rate_deg_s = 4;
  void clear_yaw_rate_deg_s();
  float yaw_rate_deg_s() const;
  void set_yaw_rate_deg_s(float value);
  private:
  float _internal_yaw_rate_deg_s() const;
  void _internal_set_yaw_rate_deg_s(float value);
  public:

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  void clear_gimbal_mode();
  ::mavsdk::rpc::gimbal::GimbalMode gimbal_mode() const;
  void set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);
  private:
  ::mavsdk::rpc::gimbal::GimbalMode _internal_gimbal_mode() const;
  void _internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);
  public:

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  void clear_send_mode();
  ::mavsdk::rpc::gimbal::SendMode send_mode() const;
  void set_send_mode(::mavsdk::rpc::gimbal::SendMode value);
  private:
  ::mavsdk::rpc::gimbal::SendMode _internal_send_mode() const;
  void _internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAngularRatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    float roll_rate_deg_s_;
    float pitch_rate_deg_s_;
    float yaw_rate_deg_s_;
    int gimbal_mode_;
    int send_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAngularRatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAngularRatesResponse) */ {
 public:
  inline SetAngularRatesResponse() : SetAngularRatesResponse(nullptr) {}
  ~SetAngularRatesResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAngularRatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAngularRatesResponse(const SetAngularRatesResponse& from);
  SetAngularRatesResponse(SetAngularRatesResponse&& from) noexcept
    : SetAngularRatesResponse() {
    *this = ::std::move(from);
  }

  inline SetAngularRatesResponse& operator=(const SetAngularRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAngularRatesResponse& operator=(SetAngularRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAngularRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAngularRatesResponse* internal_default_instance() {
    return reinterpret_cast<const SetAngularRatesResponse*>(
               &_SetAngularRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetAngularRatesResponse& a, SetAngularRatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAngularRatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAngularRatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAngularRatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAngularRatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAngularRatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetAngularRatesResponse& from) {
    SetAngularRatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAngularRatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetAngularRatesResponse";
  }
  protected:
  explicit SetAngularRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAngularRatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetRoiLocationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetRoiLocationRequest) */ {
 public:
  inline SetRoiLocationRequest() : SetRoiLocationRequest(nullptr) {}
  ~SetRoiLocationRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRoiLocationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRoiLocationRequest(const SetRoiLocationRequest& from);
  SetRoiLocationRequest(SetRoiLocationRequest&& from) noexcept
    : SetRoiLocationRequest() {
    *this = ::std::move(from);
  }

  inline SetRoiLocationRequest& operator=(const SetRoiLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRoiLocationRequest& operator=(SetRoiLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRoiLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRoiLocationRequest* internal_default_instance() {
    return reinterpret_cast<const SetRoiLocationRequest*>(
               &_SetRoiLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetRoiLocationRequest& a, SetRoiLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRoiLocationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRoiLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRoiLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRoiLocationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRoiLocationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRoiLocationRequest& from) {
    SetRoiLocationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRoiLocationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetRoiLocationRequest";
  }
  protected:
  explicit SetRoiLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 2,
    kGimbalIdFieldNumber = 1,
    kAltitudeMFieldNumber = 4,
    kLongitudeDegFieldNumber = 3,
  };
  // double latitude_deg = 2;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // float altitude_m = 4;
  void clear_altitude_m();
  float altitude_m() const;
  void set_altitude_m(float value);
  private:
  float _internal_altitude_m() const;
  void _internal_set_altitude_m(float value);
  public:

  // double longitude_deg = 3;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetRoiLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_deg_;
    int32_t gimbal_id_;
    float altitude_m_;
    double longitude_deg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetRoiLocationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetRoiLocationResponse) */ {
 public:
  inline SetRoiLocationResponse() : SetRoiLocationResponse(nullptr) {}
  ~SetRoiLocationResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRoiLocationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRoiLocationResponse(const SetRoiLocationResponse& from);
  SetRoiLocationResponse(SetRoiLocationResponse&& from) noexcept
    : SetRoiLocationResponse() {
    *this = ::std::move(from);
  }

  inline SetRoiLocationResponse& operator=(const SetRoiLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRoiLocationResponse& operator=(SetRoiLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRoiLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRoiLocationResponse* internal_default_instance() {
    return reinterpret_cast<const SetRoiLocationResponse*>(
               &_SetRoiLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetRoiLocationResponse& a, SetRoiLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRoiLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRoiLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRoiLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRoiLocationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRoiLocationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRoiLocationResponse& from) {
    SetRoiLocationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRoiLocationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SetRoiLocationResponse";
  }
  protected:
  explicit SetRoiLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetRoiLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class TakeControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.TakeControlRequest) */ {
 public:
  inline TakeControlRequest() : TakeControlRequest(nullptr) {}
  ~TakeControlRequest() override;
  explicit PROTOBUF_CONSTEXPR TakeControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakeControlRequest(const TakeControlRequest& from);
  TakeControlRequest(TakeControlRequest&& from) noexcept
    : TakeControlRequest() {
    *this = ::std::move(from);
  }

  inline TakeControlRequest& operator=(const TakeControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeControlRequest& operator=(TakeControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeControlRequest* internal_default_instance() {
    return reinterpret_cast<const TakeControlRequest*>(
               &_TakeControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TakeControlRequest& a, TakeControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakeControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakeControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TakeControlRequest& from) {
    TakeControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.TakeControlRequest";
  }
  protected:
  explicit TakeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
    kControlModeFieldNumber = 2,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  void clear_control_mode();
  ::mavsdk::rpc::gimbal::ControlMode control_mode() const;
  void set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);
  private:
  ::mavsdk::rpc::gimbal::ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.TakeControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    int control_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class TakeControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.TakeControlResponse) */ {
 public:
  inline TakeControlResponse() : TakeControlResponse(nullptr) {}
  ~TakeControlResponse() override;
  explicit PROTOBUF_CONSTEXPR TakeControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakeControlResponse(const TakeControlResponse& from);
  TakeControlResponse(TakeControlResponse&& from) noexcept
    : TakeControlResponse() {
    *this = ::std::move(from);
  }

  inline TakeControlResponse& operator=(const TakeControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeControlResponse& operator=(TakeControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeControlResponse* internal_default_instance() {
    return reinterpret_cast<const TakeControlResponse*>(
               &_TakeControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TakeControlResponse& a, TakeControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakeControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakeControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TakeControlResponse& from) {
    TakeControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.TakeControlResponse";
  }
  protected:
  explicit TakeControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.TakeControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ReleaseControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ReleaseControlRequest) */ {
 public:
  inline ReleaseControlRequest() : ReleaseControlRequest(nullptr) {}
  ~ReleaseControlRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleaseControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseControlRequest(const ReleaseControlRequest& from);
  ReleaseControlRequest(ReleaseControlRequest&& from) noexcept
    : ReleaseControlRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseControlRequest& operator=(const ReleaseControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseControlRequest& operator=(ReleaseControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseControlRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseControlRequest*>(
               &_ReleaseControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReleaseControlRequest& a, ReleaseControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseControlRequest& from) {
    ReleaseControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.ReleaseControlRequest";
  }
  protected:
  explicit ReleaseControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ReleaseControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ReleaseControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ReleaseControlResponse) */ {
 public:
  inline ReleaseControlResponse() : ReleaseControlResponse(nullptr) {}
  ~ReleaseControlResponse() override;
  explicit PROTOBUF_CONSTEXPR ReleaseControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseControlResponse(const ReleaseControlResponse& from);
  ReleaseControlResponse(ReleaseControlResponse&& from) noexcept
    : ReleaseControlResponse() {
    *this = ::std::move(from);
  }

  inline ReleaseControlResponse& operator=(const ReleaseControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseControlResponse& operator=(ReleaseControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseControlResponse* internal_default_instance() {
    return reinterpret_cast<const ReleaseControlResponse*>(
               &_ReleaseControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReleaseControlResponse& a, ReleaseControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseControlResponse& from) {
    ReleaseControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.ReleaseControlResponse";
  }
  protected:
  explicit ReleaseControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ReleaseControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeControlStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeControlStatusRequest) */ {
 public:
  inline SubscribeControlStatusRequest() : SubscribeControlStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeControlStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeControlStatusRequest(const SubscribeControlStatusRequest& from);
  SubscribeControlStatusRequest(SubscribeControlStatusRequest&& from) noexcept
    : SubscribeControlStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeControlStatusRequest& operator=(const SubscribeControlStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeControlStatusRequest& operator=(SubscribeControlStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeControlStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeControlStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeControlStatusRequest*>(
               &_SubscribeControlStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeControlStatusRequest& a, SubscribeControlStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeControlStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeControlStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeControlStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeControlStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeControlStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeControlStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SubscribeControlStatusRequest";
  }
  protected:
  explicit SubscribeControlStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeControlStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ControlStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ControlStatusResponse) */ {
 public:
  inline ControlStatusResponse() : ControlStatusResponse(nullptr) {}
  ~ControlStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR ControlStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlStatusResponse(const ControlStatusResponse& from);
  ControlStatusResponse(ControlStatusResponse&& from) noexcept
    : ControlStatusResponse() {
    *this = ::std::move(from);
  }

  inline ControlStatusResponse& operator=(const ControlStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlStatusResponse& operator=(ControlStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ControlStatusResponse*>(
               &_ControlStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ControlStatusResponse& a, ControlStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlStatusResponse& from) {
    ControlStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.ControlStatusResponse";
  }
  protected:
  explicit ControlStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  bool has_control_status() const;
  private:
  bool _internal_has_control_status() const;
  public:
  void clear_control_status();
  const ::mavsdk::rpc::gimbal::ControlStatus& control_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::ControlStatus* release_control_status();
  ::mavsdk::rpc::gimbal::ControlStatus* mutable_control_status();
  void set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* control_status);
  private:
  const ::mavsdk::rpc::gimbal::ControlStatus& _internal_control_status() const;
  ::mavsdk::rpc::gimbal::ControlStatus* _internal_mutable_control_status();
  public:
  void unsafe_arena_set_allocated_control_status(
      ::mavsdk::rpc::gimbal::ControlStatus* control_status);
  ::mavsdk::rpc::gimbal::ControlStatus* unsafe_arena_release_control_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ControlStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::ControlStatus* control_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetControlStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetControlStatusRequest) */ {
 public:
  inline GetControlStatusRequest() : GetControlStatusRequest(nullptr) {}
  ~GetControlStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetControlStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetControlStatusRequest(const GetControlStatusRequest& from);
  GetControlStatusRequest(GetControlStatusRequest&& from) noexcept
    : GetControlStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetControlStatusRequest& operator=(const GetControlStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlStatusRequest& operator=(GetControlStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetControlStatusRequest*>(
               &_GetControlStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetControlStatusRequest& a, GetControlStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetControlStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetControlStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetControlStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetControlStatusRequest& from) {
    GetControlStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetControlStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GetControlStatusRequest";
  }
  protected:
  explicit GetControlStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetControlStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetControlStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetControlStatusResponse) */ {
 public:
  inline GetControlStatusResponse() : GetControlStatusResponse(nullptr) {}
  ~GetControlStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetControlStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetControlStatusResponse(const GetControlStatusResponse& from);
  GetControlStatusResponse(GetControlStatusResponse&& from) noexcept
    : GetControlStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetControlStatusResponse& operator=(const GetControlStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlStatusResponse& operator=(GetControlStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetControlStatusResponse*>(
               &_GetControlStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetControlStatusResponse& a, GetControlStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetControlStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetControlStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetControlStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetControlStatusResponse& from) {
    GetControlStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetControlStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GetControlStatusResponse";
  }
  protected:
  explicit GetControlStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
    kControlStatusFieldNumber = 2,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
  bool has_control_status() const;
  private:
  bool _internal_has_control_status() const;
  public:
  void clear_control_status();
  const ::mavsdk::rpc::gimbal::ControlStatus& control_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::ControlStatus* release_control_status();
  ::mavsdk::rpc::gimbal::ControlStatus* mutable_control_status();
  void set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* control_status);
  private:
  const ::mavsdk::rpc::gimbal::ControlStatus& _internal_control_status() const;
  ::mavsdk::rpc::gimbal::ControlStatus* _internal_mutable_control_status();
  public:
  void unsafe_arena_set_allocated_control_status(
      ::mavsdk::rpc::gimbal::ControlStatus* control_status);
  ::mavsdk::rpc::gimbal::ControlStatus* unsafe_arena_release_control_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetControlStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    ::mavsdk::rpc::gimbal::ControlStatus* control_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() override;
  explicit PROTOBUF_CONSTEXPR EulerAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EulerAngle& from) {
    EulerAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.EulerAngle";
  }
  protected:
  explicit EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.EulerAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_deg_;
    float pitch_deg_;
    float yaw_deg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityBody(const AngularVelocityBody& from);
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AngularVelocityBody& from) {
    AngularVelocityBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.AngularVelocityBody";
  }
  protected:
  explicit AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_rad_s();
  float roll_rad_s() const;
  void set_roll_rad_s(float value);
  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);
  public:

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_rad_s();
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);
  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);
  public:

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_rad_s();
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);
  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.AngularVelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_rad_s_;
    float pitch_rad_s_;
    float yaw_rad_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class Attitude final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.Attitude) */ {
 public:
  inline Attitude() : Attitude(nullptr) {}
  ~Attitude() override;
  explicit PROTOBUF_CONSTEXPR Attitude(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attitude(const Attitude& from);
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attitude& operator=(Attitude&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attitude& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }
  inline void Swap(Attitude* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attitude* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attitude* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attitude>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attitude& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attitude& from) {
    Attitude::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attitude* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.Attitude";
  }
  protected:
  explicit Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEulerAngleForwardFieldNumber = 2,
    kQuaternionForwardFieldNumber = 3,
    kEulerAngleNorthFieldNumber = 4,
    kQuaternionNorthFieldNumber = 5,
    kAngularVelocityFieldNumber = 6,
    kTimestampUsFieldNumber = 7,
    kGimbalIdFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
  bool has_euler_angle_forward() const;
  private:
  bool _internal_has_euler_angle_forward() const;
  public:
  void clear_euler_angle_forward();
  const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_forward() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::EulerAngle* release_euler_angle_forward();
  ::mavsdk::rpc::gimbal::EulerAngle* mutable_euler_angle_forward();
  void set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward);
  private:
  const ::mavsdk::rpc::gimbal::EulerAngle& _internal_euler_angle_forward() const;
  ::mavsdk::rpc::gimbal::EulerAngle* _internal_mutable_euler_angle_forward();
  public:
  void unsafe_arena_set_allocated_euler_angle_forward(
      ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward);
  ::mavsdk::rpc::gimbal::EulerAngle* unsafe_arena_release_euler_angle_forward();

  // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
  bool has_quaternion_forward() const;
  private:
  bool _internal_has_quaternion_forward() const;
  public:
  void clear_quaternion_forward();
  const ::mavsdk::rpc::gimbal::Quaternion& quaternion_forward() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Quaternion* release_quaternion_forward();
  ::mavsdk::rpc::gimbal::Quaternion* mutable_quaternion_forward();
  void set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* quaternion_forward);
  private:
  const ::mavsdk::rpc::gimbal::Quaternion& _internal_quaternion_forward() const;
  ::mavsdk::rpc::gimbal::Quaternion* _internal_mutable_quaternion_forward();
  public:
  void unsafe_arena_set_allocated_quaternion_forward(
      ::mavsdk::rpc::gimbal::Quaternion* quaternion_forward);
  ::mavsdk::rpc::gimbal::Quaternion* unsafe_arena_release_quaternion_forward();

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
  bool has_euler_angle_north() const;
  private:
  bool _internal_has_euler_angle_north() const;
  public:
  void clear_euler_angle_north();
  const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_north() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::EulerAngle* release_euler_angle_north();
  ::mavsdk::rpc::gimbal::EulerAngle* mutable_euler_angle_north();
  void set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north);
  private:
  const ::mavsdk::rpc::gimbal::EulerAngle& _internal_euler_angle_north() const;
  ::mavsdk::rpc::gimbal::EulerAngle* _internal_mutable_euler_angle_north();
  public:
  void unsafe_arena_set_allocated_euler_angle_north(
      ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north);
  ::mavsdk::rpc::gimbal::EulerAngle* unsafe_arena_release_euler_angle_north();

  // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
  bool has_quaternion_north() const;
  private:
  bool _internal_has_quaternion_north() const;
  public:
  void clear_quaternion_north();
  const ::mavsdk::rpc::gimbal::Quaternion& quaternion_north() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Quaternion* release_quaternion_north();
  ::mavsdk::rpc::gimbal::Quaternion* mutable_quaternion_north();
  void set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* quaternion_north);
  private:
  const ::mavsdk::rpc::gimbal::Quaternion& _internal_quaternion_north() const;
  ::mavsdk::rpc::gimbal::Quaternion* _internal_mutable_quaternion_north();
  public:
  void unsafe_arena_set_allocated_quaternion_north(
      ::mavsdk::rpc::gimbal::Quaternion* quaternion_north);
  ::mavsdk::rpc::gimbal::Quaternion* unsafe_arena_release_quaternion_north();

  // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::mavsdk::rpc::gimbal::AngularVelocityBody& angular_velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::AngularVelocityBody* release_angular_velocity();
  ::mavsdk::rpc::gimbal::AngularVelocityBody* mutable_angular_velocity();
  void set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity);
  private:
  const ::mavsdk::rpc::gimbal::AngularVelocityBody& _internal_angular_velocity() const;
  ::mavsdk::rpc::gimbal::AngularVelocityBody* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity);
  ::mavsdk::rpc::gimbal::AngularVelocityBody* unsafe_arena_release_angular_velocity();

  // uint64 timestamp_us = 7;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.Attitude)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward_;
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_forward_;
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north_;
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_north_;
    ::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity_;
    uint64_t timestamp_us_;
    int32_t gimbal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeAttitudeRequest) */ {
 public:
  inline SubscribeAttitudeRequest() : SubscribeAttitudeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeAttitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeAttitudeRequest(const SubscribeAttitudeRequest& from);
  SubscribeAttitudeRequest(SubscribeAttitudeRequest&& from) noexcept
    : SubscribeAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeRequest& operator=(const SubscribeAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeRequest& operator=(SubscribeAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeRequest*>(
               &_SubscribeAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeAttitudeRequest& a, SubscribeAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAttitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeAttitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeAttitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeAttitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SubscribeAttitudeRequest";
  }
  protected:
  explicit SubscribeAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class AttitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.AttitudeResponse) */ {
 public:
  inline AttitudeResponse() : AttitudeResponse(nullptr) {}
  ~AttitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR AttitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudeResponse(const AttitudeResponse& from);
  AttitudeResponse(AttitudeResponse&& from) noexcept
    : AttitudeResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeResponse& operator=(const AttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeResponse& operator=(AttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeResponse*>(
               &_AttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AttitudeResponse& a, AttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttitudeResponse& from) {
    AttitudeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.AttitudeResponse";
  }
  protected:
  explicit AttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::mavsdk::rpc::gimbal::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Attitude* release_attitude();
  ::mavsdk::rpc::gimbal::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* attitude);
  private:
  const ::mavsdk::rpc::gimbal::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::gimbal::Attitude* _internal_mutable_attitude();
  public:
  void unsafe_arena_set_allocated_attitude(
      ::mavsdk::rpc::gimbal::Attitude* attitude);
  ::mavsdk::rpc::gimbal::Attitude* unsafe_arena_release_attitude();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.AttitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::Attitude* attitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetAttitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetAttitudeRequest) */ {
 public:
  inline GetAttitudeRequest() : GetAttitudeRequest(nullptr) {}
  ~GetAttitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttitudeRequest(const GetAttitudeRequest& from);
  GetAttitudeRequest(GetAttitudeRequest&& from) noexcept
    : GetAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline GetAttitudeRequest& operator=(const GetAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttitudeRequest& operator=(GetAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const GetAttitudeRequest*>(
               &_GetAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetAttitudeRequest& a, GetAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAttitudeRequest& from) {
    GetAttitudeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GetAttitudeRequest";
  }
  protected:
  explicit GetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetAttitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetAttitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetAttitudeResponse) */ {
 public:
  inline GetAttitudeResponse() : GetAttitudeResponse(nullptr) {}
  ~GetAttitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttitudeResponse(const GetAttitudeResponse& from);
  GetAttitudeResponse(GetAttitudeResponse&& from) noexcept
    : GetAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline GetAttitudeResponse& operator=(const GetAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttitudeResponse& operator=(GetAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttitudeResponse*>(
               &_GetAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAttitudeResponse& a, GetAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAttitudeResponse& from) {
    GetAttitudeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GetAttitudeResponse";
  }
  protected:
  explicit GetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalResultFieldNumber = 1,
    kAttitudeFieldNumber = 2,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  private:
  bool _internal_has_gimbal_result() const;
  public:
  void clear_gimbal_result();
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();
  public:
  void unsafe_arena_set_allocated_gimbal_result(
      ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  // .mavsdk.rpc.gimbal.Attitude attitude = 2;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::mavsdk::rpc::gimbal::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Attitude* release_attitude();
  ::mavsdk::rpc::gimbal::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* attitude);
  private:
  const ::mavsdk::rpc::gimbal::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::gimbal::Attitude* _internal_mutable_attitude();
  public:
  void unsafe_arena_set_allocated_attitude(
      ::mavsdk::rpc::gimbal::Attitude* attitude);
  ::mavsdk::rpc::gimbal::Attitude* unsafe_arena_release_attitude();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetAttitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    ::mavsdk::rpc::gimbal::Attitude* attitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGimbalListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeGimbalListRequest) */ {
 public:
  inline SubscribeGimbalListRequest() : SubscribeGimbalListRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeGimbalListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeGimbalListRequest(const SubscribeGimbalListRequest& from);
  SubscribeGimbalListRequest(SubscribeGimbalListRequest&& from) noexcept
    : SubscribeGimbalListRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGimbalListRequest& operator=(const SubscribeGimbalListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGimbalListRequest& operator=(SubscribeGimbalListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeGimbalListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeGimbalListRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGimbalListRequest*>(
               &_SubscribeGimbalListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeGimbalListRequest& a, SubscribeGimbalListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGimbalListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeGimbalListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeGimbalListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeGimbalListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeGimbalListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeGimbalListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.SubscribeGimbalListRequest";
  }
  protected:
  explicit SubscribeGimbalListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeGimbalListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalListResponse) */ {
 public:
  inline GimbalListResponse() : GimbalListResponse(nullptr) {}
  ~GimbalListResponse() override;
  explicit PROTOBUF_CONSTEXPR GimbalListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalListResponse(const GimbalListResponse& from);
  GimbalListResponse(GimbalListResponse&& from) noexcept
    : GimbalListResponse() {
    *this = ::std::move(from);
  }

  inline GimbalListResponse& operator=(const GimbalListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalListResponse& operator=(GimbalListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalListResponse* internal_default_instance() {
    return reinterpret_cast<const GimbalListResponse*>(
               &_GimbalListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GimbalListResponse& a, GimbalListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GimbalListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GimbalListResponse& from) {
    GimbalListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GimbalListResponse";
  }
  protected:
  explicit GimbalListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalListFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
  bool has_gimbal_list() const;
  private:
  bool _internal_has_gimbal_list() const;
  public:
  void clear_gimbal_list();
  const ::mavsdk::rpc::gimbal::GimbalList& gimbal_list() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalList* release_gimbal_list();
  ::mavsdk::rpc::gimbal::GimbalList* mutable_gimbal_list();
  void set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* gimbal_list);
  private:
  const ::mavsdk::rpc::gimbal::GimbalList& _internal_gimbal_list() const;
  ::mavsdk::rpc::gimbal::GimbalList* _internal_mutable_gimbal_list();
  public:
  void unsafe_arena_set_allocated_gimbal_list(
      ::mavsdk::rpc::gimbal::GimbalList* gimbal_list);
  ::mavsdk::rpc::gimbal::GimbalList* unsafe_arena_release_gimbal_list();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::gimbal::GimbalList* gimbal_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalItem) */ {
 public:
  inline GimbalItem() : GimbalItem(nullptr) {}
  ~GimbalItem() override;
  explicit PROTOBUF_CONSTEXPR GimbalItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalItem(const GimbalItem& from);
  GimbalItem(GimbalItem&& from) noexcept
    : GimbalItem() {
    *this = ::std::move(from);
  }

  inline GimbalItem& operator=(const GimbalItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalItem& operator=(GimbalItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalItem* internal_default_instance() {
    return reinterpret_cast<const GimbalItem*>(
               &_GimbalItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GimbalItem& a, GimbalItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GimbalItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GimbalItem& from) {
    GimbalItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GimbalItem";
  }
  protected:
  explicit GimbalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 2,
    kModelNameFieldNumber = 3,
    kCustomNameFieldNumber = 4,
    kGimbalIdFieldNumber = 1,
    kGimbalManagerComponentIdFieldNumber = 5,
    kGimbalDeviceIdFieldNumber = 6,
  };
  // string vendor_name = 2;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_name();
  PROTOBUF_NODISCARD std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string model_name = 3;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string custom_name = 4;
  void clear_custom_name();
  const std::string& custom_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_name();
  PROTOBUF_NODISCARD std::string* release_custom_name();
  void set_allocated_custom_name(std::string* custom_name);
  private:
  const std::string& _internal_custom_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_name(const std::string& value);
  std::string* _internal_mutable_custom_name();
  public:

  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // int32 gimbal_manager_component_id = 5;
  void clear_gimbal_manager_component_id();
  int32_t gimbal_manager_component_id() const;
  void set_gimbal_manager_component_id(int32_t value);
  private:
  int32_t _internal_gimbal_manager_component_id() const;
  void _internal_set_gimbal_manager_component_id(int32_t value);
  public:

  // int32 gimbal_device_id = 6;
  void clear_gimbal_device_id();
  int32_t gimbal_device_id() const;
  void set_gimbal_device_id(int32_t value);
  private:
  int32_t _internal_gimbal_device_id() const;
  void _internal_set_gimbal_device_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_name_;
    int32_t gimbal_id_;
    int32_t gimbal_manager_component_id_;
    int32_t gimbal_device_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalList) */ {
 public:
  inline GimbalList() : GimbalList(nullptr) {}
  ~GimbalList() override;
  explicit PROTOBUF_CONSTEXPR GimbalList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalList(const GimbalList& from);
  GimbalList(GimbalList&& from) noexcept
    : GimbalList() {
    *this = ::std::move(from);
  }

  inline GimbalList& operator=(const GimbalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalList& operator=(GimbalList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalList* internal_default_instance() {
    return reinterpret_cast<const GimbalList*>(
               &_GimbalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GimbalList& a, GimbalList& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GimbalList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GimbalList& from) {
    GimbalList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GimbalList";
  }
  protected:
  explicit GimbalList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
  int gimbals_size() const;
  private:
  int _internal_gimbals_size() const;
  public:
  void clear_gimbals();
  ::mavsdk::rpc::gimbal::GimbalItem* mutable_gimbals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem >*
      mutable_gimbals();
  private:
  const ::mavsdk::rpc::gimbal::GimbalItem& _internal_gimbals(int index) const;
  ::mavsdk::rpc::gimbal::GimbalItem* _internal_add_gimbals();
  public:
  const ::mavsdk::rpc::gimbal::GimbalItem& gimbals(int index) const;
  ::mavsdk::rpc::gimbal::GimbalItem* add_gimbals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem >&
      gimbals() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem > gimbals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ControlStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ControlStatus) */ {
 public:
  inline ControlStatus() : ControlStatus(nullptr) {}
  ~ControlStatus() override;
  explicit PROTOBUF_CONSTEXPR ControlStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlStatus(const ControlStatus& from);
  ControlStatus(ControlStatus&& from) noexcept
    : ControlStatus() {
    *this = ::std::move(from);
  }

  inline ControlStatus& operator=(const ControlStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlStatus& operator=(ControlStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlStatus* internal_default_instance() {
    return reinterpret_cast<const ControlStatus*>(
               &_ControlStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ControlStatus& a, ControlStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlStatus& from) {
    ControlStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.ControlStatus";
  }
  protected:
  explicit ControlStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalIdFieldNumber = 1,
    kControlModeFieldNumber = 2,
    kSysidPrimaryControlFieldNumber = 3,
    kCompidPrimaryControlFieldNumber = 4,
    kSysidSecondaryControlFieldNumber = 5,
    kCompidSecondaryControlFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id();
  int32_t gimbal_id() const;
  void set_gimbal_id(int32_t value);
  private:
  int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(int32_t value);
  public:

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  void clear_control_mode();
  ::mavsdk::rpc::gimbal::ControlMode control_mode() const;
  void set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);
  private:
  ::mavsdk::rpc::gimbal::ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);
  public:

  // int32 sysid_primary_control = 3;
  void clear_sysid_primary_control();
  int32_t sysid_primary_control() const;
  void set_sysid_primary_control(int32_t value);
  private:
  int32_t _internal_sysid_primary_control() const;
  void _internal_set_sysid_primary_control(int32_t value);
  public:

  // int32 compid_primary_control = 4;
  void clear_compid_primary_control();
  int32_t compid_primary_control() const;
  void set_compid_primary_control(int32_t value);
  private:
  int32_t _internal_compid_primary_control() const;
  void _internal_set_compid_primary_control(int32_t value);
  public:

  // int32 sysid_secondary_control = 5;
  void clear_sysid_secondary_control();
  int32_t sysid_secondary_control() const;
  void set_sysid_secondary_control(int32_t value);
  private:
  int32_t _internal_sysid_secondary_control() const;
  void _internal_set_sysid_secondary_control(int32_t value);
  public:

  // int32 compid_secondary_control = 6;
  void clear_compid_secondary_control();
  int32_t compid_secondary_control() const;
  void set_compid_secondary_control(int32_t value);
  private:
  int32_t _internal_compid_secondary_control() const;
  void _internal_set_compid_secondary_control(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ControlStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gimbal_id_;
    int control_mode_;
    int32_t sysid_primary_control_;
    int32_t compid_primary_control_;
    int32_t sysid_secondary_control_;
    int32_t compid_secondary_control_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalResult) */ {
 public:
  inline GimbalResult() : GimbalResult(nullptr) {}
  ~GimbalResult() override;
  explicit PROTOBUF_CONSTEXPR GimbalResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalResult(const GimbalResult& from);
  GimbalResult(GimbalResult&& from) noexcept
    : GimbalResult() {
    *this = ::std::move(from);
  }

  inline GimbalResult& operator=(const GimbalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalResult& operator=(GimbalResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalResult* internal_default_instance() {
    return reinterpret_cast<const GimbalResult*>(
               &_GimbalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GimbalResult& a, GimbalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GimbalResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GimbalResult& from) {
    GimbalResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gimbal.GimbalResult";
  }
  protected:
  explicit GimbalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GimbalResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    GimbalResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    GimbalResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    GimbalResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT =
    GimbalResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED =
    GimbalResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_SYSTEM =
    GimbalResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    GimbalResult_Result_RESULT_INVALID_ARGUMENT;
  static inline bool Result_IsValid(int value) {
    return GimbalResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GimbalResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GimbalResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GimbalResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GimbalResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GimbalResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return GimbalResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::gimbal::GimbalResult_Result result() const;
  void set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value);
  private:
  ::mavsdk::rpc::gimbal::GimbalResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetAnglesRequest

// int32 gimbal_id = 1;
inline void SetAnglesRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t SetAnglesRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t SetAnglesRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetAnglesRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void SetAnglesRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_id)
}

// float roll_deg = 2;
inline void SetAnglesRequest::clear_roll_deg() {
  _impl_.roll_deg_ = 0;
}
inline float SetAnglesRequest::_internal_roll_deg() const {
  return _impl_.roll_deg_;
}
inline float SetAnglesRequest::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.roll_deg)
  return _internal_roll_deg();
}
inline void SetAnglesRequest::_internal_set_roll_deg(float value) {
  
  _impl_.roll_deg_ = value;
}
inline void SetAnglesRequest::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.roll_deg)
}

// float pitch_deg = 3;
inline void SetAnglesRequest::clear_pitch_deg() {
  _impl_.pitch_deg_ = 0;
}
inline float SetAnglesRequest::_internal_pitch_deg() const {
  return _impl_.pitch_deg_;
}
inline float SetAnglesRequest::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.pitch_deg)
  return _internal_pitch_deg();
}
inline void SetAnglesRequest::_internal_set_pitch_deg(float value) {
  
  _impl_.pitch_deg_ = value;
}
inline void SetAnglesRequest::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.pitch_deg)
}

// float yaw_deg = 4;
inline void SetAnglesRequest::clear_yaw_deg() {
  _impl_.yaw_deg_ = 0;
}
inline float SetAnglesRequest::_internal_yaw_deg() const {
  return _impl_.yaw_deg_;
}
inline float SetAnglesRequest::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.yaw_deg)
  return _internal_yaw_deg();
}
inline void SetAnglesRequest::_internal_set_yaw_deg(float value) {
  
  _impl_.yaw_deg_ = value;
}
inline void SetAnglesRequest::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.yaw_deg)
}

// .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
inline void SetAnglesRequest::clear_gimbal_mode() {
  _impl_.gimbal_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAnglesRequest::_internal_gimbal_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::GimbalMode >(_impl_.gimbal_mode_);
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAnglesRequest::gimbal_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_mode)
  return _internal_gimbal_mode();
}
inline void SetAnglesRequest::_internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  
  _impl_.gimbal_mode_ = value;
}
inline void SetAnglesRequest::set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  _internal_set_gimbal_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_mode)
}

// .mavsdk.rpc.gimbal.SendMode send_mode = 6;
inline void SetAnglesRequest::clear_send_mode() {
  _impl_.send_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::SendMode SetAnglesRequest::_internal_send_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::SendMode >(_impl_.send_mode_);
}
inline ::mavsdk::rpc::gimbal::SendMode SetAnglesRequest::send_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.send_mode)
  return _internal_send_mode();
}
inline void SetAnglesRequest::_internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  
  _impl_.send_mode_ = value;
}
inline void SetAnglesRequest::set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  _internal_set_send_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.send_mode)
}

// -------------------------------------------------------------------

// SetAnglesResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetAnglesResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool SetAnglesResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void SetAnglesResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAnglesResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAnglesResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetAnglesResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
  return _msg;
}
inline void SetAnglesResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SetAngularRatesRequest

// int32 gimbal_id = 1;
inline void SetAngularRatesRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t SetAngularRatesRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t SetAngularRatesRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetAngularRatesRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void SetAngularRatesRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_id)
}

// float roll_rate_deg_s = 2;
inline void SetAngularRatesRequest::clear_roll_rate_deg_s() {
  _impl_.roll_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::_internal_roll_rate_deg_s() const {
  return _impl_.roll_rate_deg_s_;
}
inline float SetAngularRatesRequest::roll_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.roll_rate_deg_s)
  return _internal_roll_rate_deg_s();
}
inline void SetAngularRatesRequest::_internal_set_roll_rate_deg_s(float value) {
  
  _impl_.roll_rate_deg_s_ = value;
}
inline void SetAngularRatesRequest::set_roll_rate_deg_s(float value) {
  _internal_set_roll_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.roll_rate_deg_s)
}

// float pitch_rate_deg_s = 3;
inline void SetAngularRatesRequest::clear_pitch_rate_deg_s() {
  _impl_.pitch_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::_internal_pitch_rate_deg_s() const {
  return _impl_.pitch_rate_deg_s_;
}
inline float SetAngularRatesRequest::pitch_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.pitch_rate_deg_s)
  return _internal_pitch_rate_deg_s();
}
inline void SetAngularRatesRequest::_internal_set_pitch_rate_deg_s(float value) {
  
  _impl_.pitch_rate_deg_s_ = value;
}
inline void SetAngularRatesRequest::set_pitch_rate_deg_s(float value) {
  _internal_set_pitch_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.pitch_rate_deg_s)
}

// float yaw_rate_deg_s = 4;
inline void SetAngularRatesRequest::clear_yaw_rate_deg_s() {
  _impl_.yaw_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::_internal_yaw_rate_deg_s() const {
  return _impl_.yaw_rate_deg_s_;
}
inline float SetAngularRatesRequest::yaw_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.yaw_rate_deg_s)
  return _internal_yaw_rate_deg_s();
}
inline void SetAngularRatesRequest::_internal_set_yaw_rate_deg_s(float value) {
  
  _impl_.yaw_rate_deg_s_ = value;
}
inline void SetAngularRatesRequest::set_yaw_rate_deg_s(float value) {
  _internal_set_yaw_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.yaw_rate_deg_s)
}

// .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
inline void SetAngularRatesRequest::clear_gimbal_mode() {
  _impl_.gimbal_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAngularRatesRequest::_internal_gimbal_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::GimbalMode >(_impl_.gimbal_mode_);
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAngularRatesRequest::gimbal_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_mode)
  return _internal_gimbal_mode();
}
inline void SetAngularRatesRequest::_internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  
  _impl_.gimbal_mode_ = value;
}
inline void SetAngularRatesRequest::set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  _internal_set_gimbal_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_mode)
}

// .mavsdk.rpc.gimbal.SendMode send_mode = 6;
inline void SetAngularRatesRequest::clear_send_mode() {
  _impl_.send_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::SendMode SetAngularRatesRequest::_internal_send_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::SendMode >(_impl_.send_mode_);
}
inline ::mavsdk::rpc::gimbal::SendMode SetAngularRatesRequest::send_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.send_mode)
  return _internal_send_mode();
}
inline void SetAngularRatesRequest::_internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  
  _impl_.send_mode_ = value;
}
inline void SetAngularRatesRequest::set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  _internal_set_send_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.send_mode)
}

// -------------------------------------------------------------------

// SetAngularRatesResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetAngularRatesResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool SetAngularRatesResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void SetAngularRatesResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAngularRatesResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAngularRatesResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetAngularRatesResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
  return _msg;
}
inline void SetAngularRatesResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SetRoiLocationRequest

// int32 gimbal_id = 1;
inline void SetRoiLocationRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t SetRoiLocationRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t SetRoiLocationRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetRoiLocationRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void SetRoiLocationRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.gimbal_id)
}

// double latitude_deg = 2;
inline void SetRoiLocationRequest::clear_latitude_deg() {
  _impl_.latitude_deg_ = 0;
}
inline double SetRoiLocationRequest::_internal_latitude_deg() const {
  return _impl_.latitude_deg_;
}
inline double SetRoiLocationRequest::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.latitude_deg)
  return _internal_latitude_deg();
}
inline void SetRoiLocationRequest::_internal_set_latitude_deg(double value) {
  
  _impl_.latitude_deg_ = value;
}
inline void SetRoiLocationRequest::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.latitude_deg)
}

// double longitude_deg = 3;
inline void SetRoiLocationRequest::clear_longitude_deg() {
  _impl_.longitude_deg_ = 0;
}
inline double SetRoiLocationRequest::_internal_longitude_deg() const {
  return _impl_.longitude_deg_;
}
inline double SetRoiLocationRequest::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.longitude_deg)
  return _internal_longitude_deg();
}
inline void SetRoiLocationRequest::_internal_set_longitude_deg(double value) {
  
  _impl_.longitude_deg_ = value;
}
inline void SetRoiLocationRequest::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.longitude_deg)
}

// float altitude_m = 4;
inline void SetRoiLocationRequest::clear_altitude_m() {
  _impl_.altitude_m_ = 0;
}
inline float SetRoiLocationRequest::_internal_altitude_m() const {
  return _impl_.altitude_m_;
}
inline float SetRoiLocationRequest::altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.altitude_m)
  return _internal_altitude_m();
}
inline void SetRoiLocationRequest::_internal_set_altitude_m(float value) {
  
  _impl_.altitude_m_ = value;
}
inline void SetRoiLocationRequest::set_altitude_m(float value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.altitude_m)
}

// -------------------------------------------------------------------

// SetRoiLocationResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetRoiLocationResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool SetRoiLocationResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void SetRoiLocationResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetRoiLocationResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetRoiLocationResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetRoiLocationResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
  return _msg;
}
inline void SetRoiLocationResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
}

// -------------------------------------------------------------------

// TakeControlRequest

// int32 gimbal_id = 1;
inline void TakeControlRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t TakeControlRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t TakeControlRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void TakeControlRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void TakeControlRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.TakeControlRequest.gimbal_id)
}

// .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
inline void TakeControlRequest::clear_control_mode() {
  _impl_.control_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::ControlMode TakeControlRequest::_internal_control_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::ControlMode >(_impl_.control_mode_);
}
inline ::mavsdk::rpc::gimbal::ControlMode TakeControlRequest::control_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlRequest.control_mode)
  return _internal_control_mode();
}
inline void TakeControlRequest::_internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  
  _impl_.control_mode_ = value;
}
inline void TakeControlRequest::set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.TakeControlRequest.control_mode)
}

// -------------------------------------------------------------------

// TakeControlResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool TakeControlResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool TakeControlResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void TakeControlResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& TakeControlResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& TakeControlResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void TakeControlResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
  return _msg;
}
inline void TakeControlResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
}

// -------------------------------------------------------------------

// ReleaseControlRequest

// int32 gimbal_id = 1;
inline void ReleaseControlRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t ReleaseControlRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t ReleaseControlRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ReleaseControlRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void ReleaseControlRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void ReleaseControlRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ReleaseControlRequest.gimbal_id)
}

// -------------------------------------------------------------------

// ReleaseControlResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool ReleaseControlResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool ReleaseControlResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void ReleaseControlResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& ReleaseControlResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& ReleaseControlResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void ReleaseControlResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
  return _msg;
}
inline void ReleaseControlResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SubscribeControlStatusRequest

// -------------------------------------------------------------------

// ControlStatusResponse

// .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
inline bool ControlStatusResponse::_internal_has_control_status() const {
  return this != internal_default_instance() && _impl_.control_status_ != nullptr;
}
inline bool ControlStatusResponse::has_control_status() const {
  return _internal_has_control_status();
}
inline void ControlStatusResponse::clear_control_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.control_status_ != nullptr) {
    delete _impl_.control_status_;
  }
  _impl_.control_status_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& ControlStatusResponse::_internal_control_status() const {
  const ::mavsdk::rpc::gimbal::ControlStatus* p = _impl_.control_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::ControlStatus&>(
      ::mavsdk::rpc::gimbal::_ControlStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& ControlStatusResponse::control_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
  return _internal_control_status();
}
inline void ControlStatusResponse::unsafe_arena_set_allocated_control_status(
    ::mavsdk::rpc::gimbal::ControlStatus* control_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.control_status_);
  }
  _impl_.control_status_ = control_status;
  if (control_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::release_control_status() {
  
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::unsafe_arena_release_control_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
  
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::_internal_mutable_control_status() {
  
  if (_impl_.control_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::ControlStatus>(GetArenaForAllocation());
    _impl_.control_status_ = p;
  }
  return _impl_.control_status_;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::mutable_control_status() {
  ::mavsdk::rpc::gimbal::ControlStatus* _msg = _internal_mutable_control_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
  return _msg;
}
inline void ControlStatusResponse::set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* control_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.control_status_;
  }
  if (control_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_status);
    if (message_arena != submessage_arena) {
      control_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.control_status_ = control_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
}

// -------------------------------------------------------------------

// GetControlStatusRequest

// int32 gimbal_id = 1;
inline void GetControlStatusRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t GetControlStatusRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t GetControlStatusRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void GetControlStatusRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void GetControlStatusRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GetControlStatusRequest.gimbal_id)
}

// -------------------------------------------------------------------

// GetControlStatusResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool GetControlStatusResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool GetControlStatusResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void GetControlStatusResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetControlStatusResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetControlStatusResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void GetControlStatusResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
  return _msg;
}
inline void GetControlStatusResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
}

// .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
inline bool GetControlStatusResponse::_internal_has_control_status() const {
  return this != internal_default_instance() && _impl_.control_status_ != nullptr;
}
inline bool GetControlStatusResponse::has_control_status() const {
  return _internal_has_control_status();
}
inline void GetControlStatusResponse::clear_control_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.control_status_ != nullptr) {
    delete _impl_.control_status_;
  }
  _impl_.control_status_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& GetControlStatusResponse::_internal_control_status() const {
  const ::mavsdk::rpc::gimbal::ControlStatus* p = _impl_.control_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::ControlStatus&>(
      ::mavsdk::rpc::gimbal::_ControlStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& GetControlStatusResponse::control_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
  return _internal_control_status();
}
inline void GetControlStatusResponse::unsafe_arena_set_allocated_control_status(
    ::mavsdk::rpc::gimbal::ControlStatus* control_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.control_status_);
  }
  _impl_.control_status_ = control_status;
  if (control_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::release_control_status() {
  
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::unsafe_arena_release_control_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
  
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::_internal_mutable_control_status() {
  
  if (_impl_.control_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::ControlStatus>(GetArenaForAllocation());
    _impl_.control_status_ = p;
  }
  return _impl_.control_status_;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::mutable_control_status() {
  ::mavsdk::rpc::gimbal::ControlStatus* _msg = _internal_mutable_control_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
  return _msg;
}
inline void GetControlStatusResponse::set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* control_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.control_status_;
  }
  if (control_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_status);
    if (message_arena != submessage_arena) {
      control_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.control_status_ = control_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_w() {
  _impl_.w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return _impl_.w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.w)
}

// float x = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_x() {
  _impl_.x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return _impl_.x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.x)
}

// float y = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_y() {
  _impl_.y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return _impl_.y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.y)
}

// float z = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_z() {
  _impl_.z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return _impl_.z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.z)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_roll_deg() {
  _impl_.roll_deg_ = 0;
}
inline float EulerAngle::_internal_roll_deg() const {
  return _impl_.roll_deg_;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  
  _impl_.roll_deg_ = value;
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.roll_deg)
}

// float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_pitch_deg() {
  _impl_.pitch_deg_ = 0;
}
inline float EulerAngle::_internal_pitch_deg() const {
  return _impl_.pitch_deg_;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  
  _impl_.pitch_deg_ = value;
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.pitch_deg)
}

// float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_yaw_deg() {
  _impl_.yaw_deg_ = 0;
}
inline float EulerAngle::_internal_yaw_deg() const {
  return _impl_.yaw_deg_;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  
  _impl_.yaw_deg_ = value;
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.yaw_deg)
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_roll_rad_s() {
  _impl_.roll_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  return _impl_.roll_rad_s_;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  
  _impl_.roll_rad_s_ = value;
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.roll_rad_s)
}

// float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_pitch_rad_s() {
  _impl_.pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  return _impl_.pitch_rad_s_;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  
  _impl_.pitch_rad_s_ = value;
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.pitch_rad_s)
}

// float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_yaw_rad_s() {
  _impl_.yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  return _impl_.yaw_rad_s_;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  
  _impl_.yaw_rad_s_ = value;
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.yaw_rad_s)
}

// -------------------------------------------------------------------

// Attitude

// int32 gimbal_id = 1;
inline void Attitude::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t Attitude::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t Attitude::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.gimbal_id)
  return _internal_gimbal_id();
}
inline void Attitude::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void Attitude::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Attitude.gimbal_id)
}

// .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
inline bool Attitude::_internal_has_euler_angle_forward() const {
  return this != internal_default_instance() && _impl_.euler_angle_forward_ != nullptr;
}
inline bool Attitude::has_euler_angle_forward() const {
  return _internal_has_euler_angle_forward();
}
inline void Attitude::clear_euler_angle_forward() {
  if (GetArenaForAllocation() == nullptr && _impl_.euler_angle_forward_ != nullptr) {
    delete _impl_.euler_angle_forward_;
  }
  _impl_.euler_angle_forward_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_internal_euler_angle_forward() const {
  const ::mavsdk::rpc::gimbal::EulerAngle* p = _impl_.euler_angle_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::EulerAngle&>(
      ::mavsdk::rpc::gimbal::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::euler_angle_forward() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
  return _internal_euler_angle_forward();
}
inline void Attitude::unsafe_arena_set_allocated_euler_angle_forward(
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euler_angle_forward_);
  }
  _impl_.euler_angle_forward_ = euler_angle_forward;
  if (euler_angle_forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::release_euler_angle_forward() {
  
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_forward_;
  _impl_.euler_angle_forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::unsafe_arena_release_euler_angle_forward() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
  
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_forward_;
  _impl_.euler_angle_forward_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::_internal_mutable_euler_angle_forward() {
  
  if (_impl_.euler_angle_forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::EulerAngle>(GetArenaForAllocation());
    _impl_.euler_angle_forward_ = p;
  }
  return _impl_.euler_angle_forward_;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::mutable_euler_angle_forward() {
  ::mavsdk::rpc::gimbal::EulerAngle* _msg = _internal_mutable_euler_angle_forward();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
  return _msg;
}
inline void Attitude::set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.euler_angle_forward_;
  }
  if (euler_angle_forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(euler_angle_forward);
    if (message_arena != submessage_arena) {
      euler_angle_forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angle_forward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.euler_angle_forward_ = euler_angle_forward;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
}

// .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
inline bool Attitude::_internal_has_quaternion_forward() const {
  return this != internal_default_instance() && _impl_.quaternion_forward_ != nullptr;
}
inline bool Attitude::has_quaternion_forward() const {
  return _internal_has_quaternion_forward();
}
inline void Attitude::clear_quaternion_forward() {
  if (GetArenaForAllocation() == nullptr && _impl_.quaternion_forward_ != nullptr) {
    delete _impl_.quaternion_forward_;
  }
  _impl_.quaternion_forward_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_internal_quaternion_forward() const {
  const ::mavsdk::rpc::gimbal::Quaternion* p = _impl_.quaternion_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Quaternion&>(
      ::mavsdk::rpc::gimbal::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::quaternion_forward() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
  return _internal_quaternion_forward();
}
inline void Attitude::unsafe_arena_set_allocated_quaternion_forward(
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_forward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quaternion_forward_);
  }
  _impl_.quaternion_forward_ = quaternion_forward;
  if (quaternion_forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::release_quaternion_forward() {
  
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_forward_;
  _impl_.quaternion_forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::unsafe_arena_release_quaternion_forward() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
  
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_forward_;
  _impl_.quaternion_forward_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::_internal_mutable_quaternion_forward() {
  
  if (_impl_.quaternion_forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::Quaternion>(GetArenaForAllocation());
    _impl_.quaternion_forward_ = p;
  }
  return _impl_.quaternion_forward_;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::mutable_quaternion_forward() {
  ::mavsdk::rpc::gimbal::Quaternion* _msg = _internal_mutable_quaternion_forward();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
  return _msg;
}
inline void Attitude::set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* quaternion_forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.quaternion_forward_;
  }
  if (quaternion_forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quaternion_forward);
    if (message_arena != submessage_arena) {
      quaternion_forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion_forward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quaternion_forward_ = quaternion_forward;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
}

// .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
inline bool Attitude::_internal_has_euler_angle_north() const {
  return this != internal_default_instance() && _impl_.euler_angle_north_ != nullptr;
}
inline bool Attitude::has_euler_angle_north() const {
  return _internal_has_euler_angle_north();
}
inline void Attitude::clear_euler_angle_north() {
  if (GetArenaForAllocation() == nullptr && _impl_.euler_angle_north_ != nullptr) {
    delete _impl_.euler_angle_north_;
  }
  _impl_.euler_angle_north_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_internal_euler_angle_north() const {
  const ::mavsdk::rpc::gimbal::EulerAngle* p = _impl_.euler_angle_north_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::EulerAngle&>(
      ::mavsdk::rpc::gimbal::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::euler_angle_north() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
  return _internal_euler_angle_north();
}
inline void Attitude::unsafe_arena_set_allocated_euler_angle_north(
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euler_angle_north_);
  }
  _impl_.euler_angle_north_ = euler_angle_north;
  if (euler_angle_north) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::release_euler_angle_north() {
  
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_north_;
  _impl_.euler_angle_north_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::unsafe_arena_release_euler_angle_north() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
  
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_north_;
  _impl_.euler_angle_north_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::_internal_mutable_euler_angle_north() {
  
  if (_impl_.euler_angle_north_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::EulerAngle>(GetArenaForAllocation());
    _impl_.euler_angle_north_ = p;
  }
  return _impl_.euler_angle_north_;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::mutable_euler_angle_north() {
  ::mavsdk::rpc::gimbal::EulerAngle* _msg = _internal_mutable_euler_angle_north();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
  return _msg;
}
inline void Attitude::set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.euler_angle_north_;
  }
  if (euler_angle_north) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(euler_angle_north);
    if (message_arena != submessage_arena) {
      euler_angle_north = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angle_north, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.euler_angle_north_ = euler_angle_north;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
}

// .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
inline bool Attitude::_internal_has_quaternion_north() const {
  return this != internal_default_instance() && _impl_.quaternion_north_ != nullptr;
}
inline bool Attitude::has_quaternion_north() const {
  return _internal_has_quaternion_north();
}
inline void Attitude::clear_quaternion_north() {
  if (GetArenaForAllocation() == nullptr && _impl_.quaternion_north_ != nullptr) {
    delete _impl_.quaternion_north_;
  }
  _impl_.quaternion_north_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_internal_quaternion_north() const {
  const ::mavsdk::rpc::gimbal::Quaternion* p = _impl_.quaternion_north_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Quaternion&>(
      ::mavsdk::rpc::gimbal::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::quaternion_north() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.quaternion_north)
  return _internal_quaternion_north();
}
inline void Attitude::unsafe_arena_set_allocated_quaternion_north(
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_north) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quaternion_north_);
  }
  _impl_.quaternion_north_ = quaternion_north;
  if (quaternion_north) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_north)
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::release_quaternion_north() {
  
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_north_;
  _impl_.quaternion_north_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::unsafe_arena_release_quaternion_north() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.quaternion_north)
  
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_north_;
  _impl_.quaternion_north_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::_internal_mutable_quaternion_north() {
  
  if (_impl_.quaternion_north_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::Quaternion>(GetArenaForAllocation());
    _impl_.quaternion_north_ = p;
  }
  return _impl_.quaternion_north_;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::mutable_quaternion_north() {
  ::mavsdk::rpc::gimbal::Quaternion* _msg = _internal_mutable_quaternion_north();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.quaternion_north)
  return _msg;
}
inline void Attitude::set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* quaternion_north) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.quaternion_north_;
  }
  if (quaternion_north) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quaternion_north);
    if (message_arena != submessage_arena) {
      quaternion_north = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion_north, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quaternion_north_ = quaternion_north;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_north)
}

// .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
inline bool Attitude::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && _impl_.angular_velocity_ != nullptr;
}
inline bool Attitude::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void Attitude::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::AngularVelocityBody& Attitude::_internal_angular_velocity() const {
  const ::mavsdk::rpc::gimbal::AngularVelocityBody* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::AngularVelocityBody&>(
      ::mavsdk::rpc::gimbal::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::AngularVelocityBody& Attitude::angular_velocity() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.angular_velocity)
  return _internal_angular_velocity();
}
inline void Attitude::unsafe_arena_set_allocated_angular_velocity(
    ::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.angular_velocity)
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::release_angular_velocity() {
  
  ::mavsdk::rpc::gimbal::AngularVelocityBody* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.angular_velocity)
  
  ::mavsdk::rpc::gimbal::AngularVelocityBody* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::_internal_mutable_angular_velocity() {
  
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::AngularVelocityBody>(GetArenaForAllocation());
    _impl_.angular_velocity_ = p;
  }
  return _impl_.angular_velocity_;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::mutable_angular_velocity() {
  ::mavsdk::rpc::gimbal::AngularVelocityBody* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.angular_velocity)
  return _msg;
}
inline void Attitude::set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.angular_velocity)
}

// uint64 timestamp_us = 7;
inline void Attitude::clear_timestamp_us() {
  _impl_.timestamp_us_ = uint64_t{0u};
}
inline uint64_t Attitude::_internal_timestamp_us() const {
  return _impl_.timestamp_us_;
}
inline uint64_t Attitude::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.timestamp_us)
  return _internal_timestamp_us();
}
inline void Attitude::_internal_set_timestamp_us(uint64_t value) {
  
  _impl_.timestamp_us_ = value;
}
inline void Attitude::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Attitude.timestamp_us)
}

// -------------------------------------------------------------------

// SubscribeAttitudeRequest

// -------------------------------------------------------------------

// AttitudeResponse

// .mavsdk.rpc.gimbal.Attitude attitude = 1;
inline bool AttitudeResponse::_internal_has_attitude() const {
  return this != internal_default_instance() && _impl_.attitude_ != nullptr;
}
inline bool AttitudeResponse::has_attitude() const {
  return _internal_has_attitude();
}
inline void AttitudeResponse::clear_attitude() {
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::Attitude& AttitudeResponse::_internal_attitude() const {
  const ::mavsdk::rpc::gimbal::Attitude* p = _impl_.attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Attitude&>(
      ::mavsdk::rpc::gimbal::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Attitude& AttitudeResponse::attitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
  return _internal_attitude();
}
inline void AttitudeResponse::unsafe_arena_set_allocated_attitude(
    ::mavsdk::rpc::gimbal::Attitude* attitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attitude_);
  }
  _impl_.attitude_ = attitude;
  if (attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::release_attitude() {
  
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::unsafe_arena_release_attitude() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
  
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::_internal_mutable_attitude() {
  
  if (_impl_.attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::Attitude>(GetArenaForAllocation());
    _impl_.attitude_ = p;
  }
  return _impl_.attitude_;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::mutable_attitude() {
  ::mavsdk::rpc::gimbal::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
  return _msg;
}
inline void AttitudeResponse::set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attitude_;
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude);
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
}

// -------------------------------------------------------------------

// GetAttitudeRequest

// int32 gimbal_id = 1;
inline void GetAttitudeRequest::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t GetAttitudeRequest::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t GetAttitudeRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void GetAttitudeRequest::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void GetAttitudeRequest::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GetAttitudeRequest.gimbal_id)
}

// -------------------------------------------------------------------

// GetAttitudeResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool GetAttitudeResponse::_internal_has_gimbal_result() const {
  return this != internal_default_instance() && _impl_.gimbal_result_ != nullptr;
}
inline bool GetAttitudeResponse::has_gimbal_result() const {
  return _internal_has_gimbal_result();
}
inline void GetAttitudeResponse::clear_gimbal_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetAttitudeResponse::_internal_gimbal_result() const {
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(
      ::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetAttitudeResponse::gimbal_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void GetAttitudeResponse::unsafe_arena_set_allocated_gimbal_result(
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = gimbal_result;
  if (gimbal_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::release_gimbal_result() {
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::unsafe_arena_release_gimbal_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
  
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::_internal_mutable_gimbal_result() {
  
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(GetArenaForAllocation());
    _impl_.gimbal_result_ = p;
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::mutable_gimbal_result() {
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
  return _msg;
}
inline void GetAttitudeResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* gimbal_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_result_;
  }
  if (gimbal_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_result);
    if (message_arena != submessage_arena) {
      gimbal_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_result_ = gimbal_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
}

// .mavsdk.rpc.gimbal.Attitude attitude = 2;
inline bool GetAttitudeResponse::_internal_has_attitude() const {
  return this != internal_default_instance() && _impl_.attitude_ != nullptr;
}
inline bool GetAttitudeResponse::has_attitude() const {
  return _internal_has_attitude();
}
inline void GetAttitudeResponse::clear_attitude() {
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::Attitude& GetAttitudeResponse::_internal_attitude() const {
  const ::mavsdk::rpc::gimbal::Attitude* p = _impl_.attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Attitude&>(
      ::mavsdk::rpc::gimbal::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Attitude& GetAttitudeResponse::attitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
  return _internal_attitude();
}
inline void GetAttitudeResponse::unsafe_arena_set_allocated_attitude(
    ::mavsdk::rpc::gimbal::Attitude* attitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attitude_);
  }
  _impl_.attitude_ = attitude;
  if (attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::release_attitude() {
  
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::unsafe_arena_release_attitude() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
  
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::_internal_mutable_attitude() {
  
  if (_impl_.attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::Attitude>(GetArenaForAllocation());
    _impl_.attitude_ = p;
  }
  return _impl_.attitude_;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::mutable_attitude() {
  ::mavsdk::rpc::gimbal::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
  return _msg;
}
inline void GetAttitudeResponse::set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attitude_;
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude);
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
}

// -------------------------------------------------------------------

// SubscribeGimbalListRequest

// -------------------------------------------------------------------

// GimbalListResponse

// .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
inline bool GimbalListResponse::_internal_has_gimbal_list() const {
  return this != internal_default_instance() && _impl_.gimbal_list_ != nullptr;
}
inline bool GimbalListResponse::has_gimbal_list() const {
  return _internal_has_gimbal_list();
}
inline void GimbalListResponse::clear_gimbal_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_list_ != nullptr) {
    delete _impl_.gimbal_list_;
  }
  _impl_.gimbal_list_ = nullptr;
}
inline const ::mavsdk::rpc::gimbal::GimbalList& GimbalListResponse::_internal_gimbal_list() const {
  const ::mavsdk::rpc::gimbal::GimbalList* p = _impl_.gimbal_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalList&>(
      ::mavsdk::rpc::gimbal::_GimbalList_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalList& GimbalListResponse::gimbal_list() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
  return _internal_gimbal_list();
}
inline void GimbalListResponse::unsafe_arena_set_allocated_gimbal_list(
    ::mavsdk::rpc::gimbal::GimbalList* gimbal_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbal_list_);
  }
  _impl_.gimbal_list_ = gimbal_list;
  if (gimbal_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::release_gimbal_list() {
  
  ::mavsdk::rpc::gimbal::GimbalList* temp = _impl_.gimbal_list_;
  _impl_.gimbal_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::unsafe_arena_release_gimbal_list() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
  
  ::mavsdk::rpc::gimbal::GimbalList* temp = _impl_.gimbal_list_;
  _impl_.gimbal_list_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::_internal_mutable_gimbal_list() {
  
  if (_impl_.gimbal_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalList>(GetArenaForAllocation());
    _impl_.gimbal_list_ = p;
  }
  return _impl_.gimbal_list_;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::mutable_gimbal_list() {
  ::mavsdk::rpc::gimbal::GimbalList* _msg = _internal_mutable_gimbal_list();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
  return _msg;
}
inline void GimbalListResponse::set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* gimbal_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gimbal_list_;
  }
  if (gimbal_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gimbal_list);
    if (message_arena != submessage_arena) {
      gimbal_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbal_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbal_list_ = gimbal_list;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
}

// -------------------------------------------------------------------

// GimbalItem

// int32 gimbal_id = 1;
inline void GimbalItem::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t GimbalItem::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t GimbalItem::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_id)
  return _internal_gimbal_id();
}
inline void GimbalItem::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void GimbalItem::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_id)
}

// string vendor_name = 2;
inline void GimbalItem::clear_vendor_name() {
  _impl_.vendor_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::vendor_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _internal_vendor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GimbalItem::set_vendor_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vendor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
}
inline std::string* GimbalItem::mutable_vendor_name() {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_vendor_name() const {
  return _impl_.vendor_name_.Get();
}
inline void GimbalItem::_internal_set_vendor_name(const std::string& value) {
  
  _impl_.vendor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GimbalItem::_internal_mutable_vendor_name() {
  
  return _impl_.vendor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GimbalItem::release_vendor_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _impl_.vendor_name_.Release();
}
inline void GimbalItem::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  _impl_.vendor_name_.SetAllocated(vendor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_name_.IsDefault()) {
    _impl_.vendor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
}

// string model_name = 3;
inline void GimbalItem::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::model_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GimbalItem::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.model_name)
}
inline std::string* GimbalItem::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void GimbalItem::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GimbalItem::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GimbalItem::release_model_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _impl_.model_name_.Release();
}
inline void GimbalItem::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.model_name)
}

// string custom_name = 4;
inline void GimbalItem::clear_custom_name() {
  _impl_.custom_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::custom_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _internal_custom_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GimbalItem::set_custom_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.custom_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.custom_name)
}
inline std::string* GimbalItem::mutable_custom_name() {
  std::string* _s = _internal_mutable_custom_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_custom_name() const {
  return _impl_.custom_name_.Get();
}
inline void GimbalItem::_internal_set_custom_name(const std::string& value) {
  
  _impl_.custom_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GimbalItem::_internal_mutable_custom_name() {
  
  return _impl_.custom_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GimbalItem::release_custom_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _impl_.custom_name_.Release();
}
inline void GimbalItem::set_allocated_custom_name(std::string* custom_name) {
  if (custom_name != nullptr) {
    
  } else {
    
  }
  _impl_.custom_name_.SetAllocated(custom_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_name_.IsDefault()) {
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.custom_name)
}

// int32 gimbal_manager_component_id = 5;
inline void GimbalItem::clear_gimbal_manager_component_id() {
  _impl_.gimbal_manager_component_id_ = 0;
}
inline int32_t GimbalItem::_internal_gimbal_manager_component_id() const {
  return _impl_.gimbal_manager_component_id_;
}
inline int32_t GimbalItem::gimbal_manager_component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_manager_component_id)
  return _internal_gimbal_manager_component_id();
}
inline void GimbalItem::_internal_set_gimbal_manager_component_id(int32_t value) {
  
  _impl_.gimbal_manager_component_id_ = value;
}
inline void GimbalItem::set_gimbal_manager_component_id(int32_t value) {
  _internal_set_gimbal_manager_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_manager_component_id)
}

// int32 gimbal_device_id = 6;
inline void GimbalItem::clear_gimbal_device_id() {
  _impl_.gimbal_device_id_ = 0;
}
inline int32_t GimbalItem::_internal_gimbal_device_id() const {
  return _impl_.gimbal_device_id_;
}
inline int32_t GimbalItem::gimbal_device_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_device_id)
  return _internal_gimbal_device_id();
}
inline void GimbalItem::_internal_set_gimbal_device_id(int32_t value) {
  
  _impl_.gimbal_device_id_ = value;
}
inline void GimbalItem::set_gimbal_device_id(int32_t value) {
  _internal_set_gimbal_device_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_device_id)
}

// -------------------------------------------------------------------

// GimbalList

// repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
inline int GimbalList::_internal_gimbals_size() const {
  return _impl_.gimbals_.size();
}
inline int GimbalList::gimbals_size() const {
  return _internal_gimbals_size();
}
inline void GimbalList::clear_gimbals() {
  _impl_.gimbals_.Clear();
}
inline ::mavsdk::rpc::gimbal::GimbalItem* GimbalList::mutable_gimbals(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _impl_.gimbals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem >*
GimbalList::mutable_gimbals() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return &_impl_.gimbals_;
}
inline const ::mavsdk::rpc::gimbal::GimbalItem& GimbalList::_internal_gimbals(int index) const {
  return _impl_.gimbals_.Get(index);
}
inline const ::mavsdk::rpc::gimbal::GimbalItem& GimbalList::gimbals(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _internal_gimbals(index);
}
inline ::mavsdk::rpc::gimbal::GimbalItem* GimbalList::_internal_add_gimbals() {
  return _impl_.gimbals_.Add();
}
inline ::mavsdk::rpc::gimbal::GimbalItem* GimbalList::add_gimbals() {
  ::mavsdk::rpc::gimbal::GimbalItem* _add = _internal_add_gimbals();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem >&
GimbalList::gimbals() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _impl_.gimbals_;
}

// -------------------------------------------------------------------

// ControlStatus

// int32 gimbal_id = 1;
inline void ControlStatus::clear_gimbal_id() {
  _impl_.gimbal_id_ = 0;
}
inline int32_t ControlStatus::_internal_gimbal_id() const {
  return _impl_.gimbal_id_;
}
inline int32_t ControlStatus::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.gimbal_id)
  return _internal_gimbal_id();
}
inline void ControlStatus::_internal_set_gimbal_id(int32_t value) {
  
  _impl_.gimbal_id_ = value;
}
inline void ControlStatus::set_gimbal_id(int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.gimbal_id)
}

// .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
inline void ControlStatus::clear_control_mode() {
  _impl_.control_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::ControlMode ControlStatus::_internal_control_mode() const {
  return static_cast< ::mavsdk::rpc::gimbal::ControlMode >(_impl_.control_mode_);
}
inline ::mavsdk::rpc::gimbal::ControlMode ControlStatus::control_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.control_mode)
  return _internal_control_mode();
}
inline void ControlStatus::_internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  
  _impl_.control_mode_ = value;
}
inline void ControlStatus::set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.control_mode)
}

// int32 sysid_primary_control = 3;
inline void ControlStatus::clear_sysid_primary_control() {
  _impl_.sysid_primary_control_ = 0;
}
inline int32_t ControlStatus::_internal_sysid_primary_control() const {
  return _impl_.sysid_primary_control_;
}
inline int32_t ControlStatus::sysid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.sysid_primary_control)
  return _internal_sysid_primary_control();
}
inline void ControlStatus::_internal_set_sysid_primary_control(int32_t value) {
  
  _impl_.sysid_primary_control_ = value;
}
inline void ControlStatus::set_sysid_primary_control(int32_t value) {
  _internal_set_sysid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.sysid_primary_control)
}

// int32 compid_primary_control = 4;
inline void ControlStatus::clear_compid_primary_control() {
  _impl_.compid_primary_control_ = 0;
}
inline int32_t ControlStatus::_internal_compid_primary_control() const {
  return _impl_.compid_primary_control_;
}
inline int32_t ControlStatus::compid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.compid_primary_control)
  return _internal_compid_primary_control();
}
inline void ControlStatus::_internal_set_compid_primary_control(int32_t value) {
  
  _impl_.compid_primary_control_ = value;
}
inline void ControlStatus::set_compid_primary_control(int32_t value) {
  _internal_set_compid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.compid_primary_control)
}

// int32 sysid_secondary_control = 5;
inline void ControlStatus::clear_sysid_secondary_control() {
  _impl_.sysid_secondary_control_ = 0;
}
inline int32_t ControlStatus::_internal_sysid_secondary_control() const {
  return _impl_.sysid_secondary_control_;
}
inline int32_t ControlStatus::sysid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.sysid_secondary_control)
  return _internal_sysid_secondary_control();
}
inline void ControlStatus::_internal_set_sysid_secondary_control(int32_t value) {
  
  _impl_.sysid_secondary_control_ = value;
}
inline void ControlStatus::set_sysid_secondary_control(int32_t value) {
  _internal_set_sysid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.sysid_secondary_control)
}

// int32 compid_secondary_control = 6;
inline void ControlStatus::clear_compid_secondary_control() {
  _impl_.compid_secondary_control_ = 0;
}
inline int32_t ControlStatus::_internal_compid_secondary_control() const {
  return _impl_.compid_secondary_control_;
}
inline int32_t ControlStatus::compid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.compid_secondary_control)
  return _internal_compid_secondary_control();
}
inline void ControlStatus::_internal_set_compid_secondary_control(int32_t value) {
  
  _impl_.compid_secondary_control_ = value;
}
inline void ControlStatus::set_compid_secondary_control(int32_t value) {
  _internal_set_compid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.compid_secondary_control)
}

// -------------------------------------------------------------------

// GimbalResult

// .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
inline void GimbalResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalResult_Result GimbalResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::gimbal::GimbalResult_Result >(_impl_.result_);
}
inline ::mavsdk::rpc::gimbal::GimbalResult_Result GimbalResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalResult.result)
  return _internal_result();
}
inline void GimbalResult::_internal_set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value) {
  
  _impl_.result_ = value;
}
inline void GimbalResult::set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalResult.result)
}

// string result_str = 2;
inline void GimbalResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& GimbalResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GimbalResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalResult.result_str)
}
inline std::string* GimbalResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _s;
}
inline const std::string& GimbalResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void GimbalResult::_internal_set_result_str(const std::string& value) {
  
  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* GimbalResult::_internal_mutable_result_str() {
  
  return _impl_.result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* GimbalResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _impl_.result_str_.Release();
}
inline void GimbalResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  _impl_.result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::gimbal::GimbalResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gimbal::GimbalResult_Result>() {
  return ::mavsdk::rpc::gimbal::GimbalResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::gimbal::GimbalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gimbal::GimbalMode>() {
  return ::mavsdk::rpc::gimbal::GimbalMode_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::gimbal::ControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gimbal::ControlMode>() {
  return ::mavsdk::rpc::gimbal::ControlMode_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::gimbal::SendMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gimbal::SendMode>() {
  return ::mavsdk::rpc::gimbal::SendMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gimbal_2fgimbal_2eproto
