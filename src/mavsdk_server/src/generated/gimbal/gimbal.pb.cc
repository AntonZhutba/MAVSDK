// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal/gimbal.proto

#include "gimbal/gimbal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace gimbal {
PROTOBUF_CONSTEXPR SetAnglesRequest::SetAnglesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.roll_deg_)*/0
  , /*decltype(_impl_.pitch_deg_)*/0
  , /*decltype(_impl_.yaw_deg_)*/0
  , /*decltype(_impl_.gimbal_mode_)*/0
  , /*decltype(_impl_.send_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAnglesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAnglesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAnglesRequestDefaultTypeInternal() {}
  union {
    SetAnglesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAnglesRequestDefaultTypeInternal _SetAnglesRequest_default_instance_;
PROTOBUF_CONSTEXPR SetAnglesResponse::SetAnglesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAnglesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAnglesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAnglesResponseDefaultTypeInternal() {}
  union {
    SetAnglesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAnglesResponseDefaultTypeInternal _SetAnglesResponse_default_instance_;
PROTOBUF_CONSTEXPR SetAngularRatesRequest::SetAngularRatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.roll_rate_deg_s_)*/0
  , /*decltype(_impl_.pitch_rate_deg_s_)*/0
  , /*decltype(_impl_.yaw_rate_deg_s_)*/0
  , /*decltype(_impl_.gimbal_mode_)*/0
  , /*decltype(_impl_.send_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAngularRatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAngularRatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAngularRatesRequestDefaultTypeInternal() {}
  union {
    SetAngularRatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAngularRatesRequestDefaultTypeInternal _SetAngularRatesRequest_default_instance_;
PROTOBUF_CONSTEXPR SetAngularRatesResponse::SetAngularRatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAngularRatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAngularRatesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAngularRatesResponseDefaultTypeInternal() {}
  union {
    SetAngularRatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAngularRatesResponseDefaultTypeInternal _SetAngularRatesResponse_default_instance_;
PROTOBUF_CONSTEXPR SetRoiLocationRequest::SetRoiLocationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_deg_)*/0
  , /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.altitude_m_)*/0
  , /*decltype(_impl_.longitude_deg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetRoiLocationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoiLocationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoiLocationRequestDefaultTypeInternal() {}
  union {
    SetRoiLocationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoiLocationRequestDefaultTypeInternal _SetRoiLocationRequest_default_instance_;
PROTOBUF_CONSTEXPR SetRoiLocationResponse::SetRoiLocationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetRoiLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoiLocationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoiLocationResponseDefaultTypeInternal() {}
  union {
    SetRoiLocationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;
PROTOBUF_CONSTEXPR TakeControlRequest::TakeControlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.control_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TakeControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakeControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakeControlRequestDefaultTypeInternal() {}
  union {
    TakeControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakeControlRequestDefaultTypeInternal _TakeControlRequest_default_instance_;
PROTOBUF_CONSTEXPR TakeControlResponse::TakeControlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TakeControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakeControlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakeControlResponseDefaultTypeInternal() {}
  union {
    TakeControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakeControlResponseDefaultTypeInternal _TakeControlResponse_default_instance_;
PROTOBUF_CONSTEXPR ReleaseControlRequest::ReleaseControlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReleaseControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseControlRequestDefaultTypeInternal() {}
  union {
    ReleaseControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseControlRequestDefaultTypeInternal _ReleaseControlRequest_default_instance_;
PROTOBUF_CONSTEXPR ReleaseControlResponse::ReleaseControlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReleaseControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseControlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseControlResponseDefaultTypeInternal() {}
  union {
    ReleaseControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseControlResponseDefaultTypeInternal _ReleaseControlResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeControlStatusRequest::SubscribeControlStatusRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeControlStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeControlStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeControlStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeControlStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeControlStatusRequestDefaultTypeInternal _SubscribeControlStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR ControlStatusResponse::ControlStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.control_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStatusResponseDefaultTypeInternal() {}
  union {
    ControlStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStatusResponseDefaultTypeInternal _ControlStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR GetControlStatusRequest::GetControlStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetControlStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetControlStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetControlStatusRequestDefaultTypeInternal() {}
  union {
    GetControlStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetControlStatusRequestDefaultTypeInternal _GetControlStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetControlStatusResponse::GetControlStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_.control_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetControlStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetControlStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetControlStatusResponseDefaultTypeInternal() {}
  union {
    GetControlStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetControlStatusResponseDefaultTypeInternal _GetControlStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR Quaternion::Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;
PROTOBUF_CONSTEXPR EulerAngle::EulerAngle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_deg_)*/0
  , /*decltype(_impl_.pitch_deg_)*/0
  , /*decltype(_impl_.yaw_deg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EulerAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerAngleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerAngleDefaultTypeInternal() {}
  union {
    EulerAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
PROTOBUF_CONSTEXPR AngularVelocityBody::AngularVelocityBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_rad_s_)*/0
  , /*decltype(_impl_.pitch_rad_s_)*/0
  , /*decltype(_impl_.yaw_rad_s_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AngularVelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
PROTOBUF_CONSTEXPR Attitude::Attitude(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.euler_angle_forward_)*/nullptr
  , /*decltype(_impl_.quaternion_forward_)*/nullptr
  , /*decltype(_impl_.euler_angle_north_)*/nullptr
  , /*decltype(_impl_.quaternion_north_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.timestamp_us_)*/uint64_t{0u}
  , /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttitudeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeDefaultTypeInternal() {}
  union {
    Attitude _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeDefaultTypeInternal _Attitude_default_instance_;
PROTOBUF_CONSTEXPR SubscribeAttitudeRequest::SubscribeAttitudeRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttitudeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttitudeRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttitudeRequestDefaultTypeInternal _SubscribeAttitudeRequest_default_instance_;
PROTOBUF_CONSTEXPR AttitudeResponse::AttitudeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attitude_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeResponseDefaultTypeInternal() {}
  union {
    AttitudeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeResponseDefaultTypeInternal _AttitudeResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAttitudeRequest::GetAttitudeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAttitudeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAttitudeRequestDefaultTypeInternal() {}
  union {
    GetAttitudeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAttitudeRequestDefaultTypeInternal _GetAttitudeRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAttitudeResponse::GetAttitudeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_result_)*/nullptr
  , /*decltype(_impl_.attitude_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAttitudeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAttitudeResponseDefaultTypeInternal() {}
  union {
    GetAttitudeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAttitudeResponseDefaultTypeInternal _GetAttitudeResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeGimbalListRequest::SubscribeGimbalListRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeGimbalListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeGimbalListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeGimbalListRequestDefaultTypeInternal() {}
  union {
    SubscribeGimbalListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeGimbalListRequestDefaultTypeInternal _SubscribeGimbalListRequest_default_instance_;
PROTOBUF_CONSTEXPR GimbalListResponse::GimbalListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_list_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GimbalListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalListResponseDefaultTypeInternal() {}
  union {
    GimbalListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalListResponseDefaultTypeInternal _GimbalListResponse_default_instance_;
PROTOBUF_CONSTEXPR GimbalItem::GimbalItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.gimbal_manager_component_id_)*/0
  , /*decltype(_impl_.gimbal_device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GimbalItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalItemDefaultTypeInternal() {}
  union {
    GimbalItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalItemDefaultTypeInternal _GimbalItem_default_instance_;
PROTOBUF_CONSTEXPR GimbalList::GimbalList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GimbalListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalListDefaultTypeInternal() {}
  union {
    GimbalList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalListDefaultTypeInternal _GimbalList_default_instance_;
PROTOBUF_CONSTEXPR ControlStatus::ControlStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbal_id_)*/0
  , /*decltype(_impl_.control_mode_)*/0
  , /*decltype(_impl_.sysid_primary_control_)*/0
  , /*decltype(_impl_.compid_primary_control_)*/0
  , /*decltype(_impl_.sysid_secondary_control_)*/0
  , /*decltype(_impl_.compid_secondary_control_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStatusDefaultTypeInternal() {}
  union {
    ControlStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStatusDefaultTypeInternal _ControlStatus_default_instance_;
PROTOBUF_CONSTEXPR GimbalResult::GimbalResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GimbalResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalResultDefaultTypeInternal() {}
  union {
    GimbalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalResultDefaultTypeInternal _GimbalResult_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_gimbal_2fgimbal_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gimbal_2fgimbal_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gimbal_2fgimbal_2eproto = nullptr;

const uint32_t TableStruct_gimbal_2fgimbal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.gimbal_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.send_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesResponse, _impl_.gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.roll_rate_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.pitch_rate_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.yaw_rate_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.gimbal_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesRequest, _impl_.send_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAngularRatesResponse, _impl_.gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _impl_.gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _impl_.control_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _impl_.gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlRequest, _impl_.gimbal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _impl_.gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeControlStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatusResponse, _impl_.control_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetControlStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetControlStatusRequest, _impl_.gimbal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetControlStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetControlStatusResponse, _impl_.gimbal_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetControlStatusResponse, _impl_.control_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.euler_angle_forward_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.quaternion_forward_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.euler_angle_north_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.quaternion_north_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AttitudeResponse, _impl_.attitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetAttitudeRequest, _impl_.gimbal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetAttitudeResponse, _impl_.gimbal_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GetAttitudeResponse, _impl_.attitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeGimbalListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalListResponse, _impl_.gimbal_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.vendor_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.custom_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.gimbal_manager_component_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalItem, _impl_.gimbal_device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalList, _impl_.gimbals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.gimbal_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.control_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.sysid_primary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.compid_primary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.sysid_secondary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.compid_secondary_control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _impl_.result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetAnglesRequest)},
  { 12, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetAnglesResponse)},
  { 19, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetAngularRatesRequest)},
  { 31, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetAngularRatesResponse)},
  { 38, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationRequest)},
  { 48, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationResponse)},
  { 55, -1, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlRequest)},
  { 63, -1, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlResponse)},
  { 70, -1, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlRequest)},
  { 77, -1, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlResponse)},
  { 84, -1, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeControlStatusRequest)},
  { 90, -1, -1, sizeof(::mavsdk::rpc::gimbal::ControlStatusResponse)},
  { 97, -1, -1, sizeof(::mavsdk::rpc::gimbal::GetControlStatusRequest)},
  { 104, -1, -1, sizeof(::mavsdk::rpc::gimbal::GetControlStatusResponse)},
  { 112, -1, -1, sizeof(::mavsdk::rpc::gimbal::Quaternion)},
  { 122, -1, -1, sizeof(::mavsdk::rpc::gimbal::EulerAngle)},
  { 131, -1, -1, sizeof(::mavsdk::rpc::gimbal::AngularVelocityBody)},
  { 140, -1, -1, sizeof(::mavsdk::rpc::gimbal::Attitude)},
  { 153, -1, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeAttitudeRequest)},
  { 159, -1, -1, sizeof(::mavsdk::rpc::gimbal::AttitudeResponse)},
  { 166, -1, -1, sizeof(::mavsdk::rpc::gimbal::GetAttitudeRequest)},
  { 173, -1, -1, sizeof(::mavsdk::rpc::gimbal::GetAttitudeResponse)},
  { 181, -1, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeGimbalListRequest)},
  { 187, -1, -1, sizeof(::mavsdk::rpc::gimbal::GimbalListResponse)},
  { 194, -1, -1, sizeof(::mavsdk::rpc::gimbal::GimbalItem)},
  { 206, -1, -1, sizeof(::mavsdk::rpc::gimbal::GimbalList)},
  { 213, -1, -1, sizeof(::mavsdk::rpc::gimbal::ControlStatus)},
  { 225, -1, -1, sizeof(::mavsdk::rpc::gimbal::GimbalResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::gimbal::_SetAnglesRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SetAnglesResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SetAngularRatesRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SetAngularRatesResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SetRoiLocationRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SetRoiLocationResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_TakeControlRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_TakeControlResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_ReleaseControlRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_ReleaseControlResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SubscribeControlStatusRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_ControlStatusResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GetControlStatusRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GetControlStatusResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_Quaternion_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_EulerAngle_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_AngularVelocityBody_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_Attitude_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SubscribeAttitudeRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_AttitudeResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GetAttitudeRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GetAttitudeResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_SubscribeGimbalListRequest_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GimbalListResponse_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GimbalItem_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GimbalList_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_ControlStatus_default_instance_._instance,
  &::mavsdk::rpc::gimbal::_GimbalResult_default_instance_._instance,
};

const char descriptor_table_protodef_gimbal_2fgimbal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gimbal/gimbal.proto\022\021mavsdk.rpc.gimbal"
  "\032\024mavsdk_options.proto\"\277\001\n\020SetAnglesRequ"
  "est\022\021\n\tgimbal_id\030\001 \001(\005\022\020\n\010roll_deg\030\002 \001(\002"
  "\022\021\n\tpitch_deg\030\003 \001(\002\022\017\n\007yaw_deg\030\004 \001(\002\0222\n\013"
  "gimbal_mode\030\005 \001(\0162\035.mavsdk.rpc.gimbal.Gi"
  "mbalMode\022.\n\tsend_mode\030\006 \001(\0162\033.mavsdk.rpc"
  ".gimbal.SendMode\"K\n\021SetAnglesResponse\0226\n"
  "\rgimbal_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal"
  ".GimbalResult\"\332\001\n\026SetAngularRatesRequest"
  "\022\021\n\tgimbal_id\030\001 \001(\005\022\027\n\017roll_rate_deg_s\030\002"
  " \001(\002\022\030\n\020pitch_rate_deg_s\030\003 \001(\002\022\026\n\016yaw_ra"
  "te_deg_s\030\004 \001(\002\0222\n\013gimbal_mode\030\005 \001(\0162\035.ma"
  "vsdk.rpc.gimbal.GimbalMode\022.\n\tsend_mode\030"
  "\006 \001(\0162\033.mavsdk.rpc.gimbal.SendMode\"Q\n\027Se"
  "tAngularRatesResponse\0226\n\rgimbal_result\030\001"
  " \001(\0132\037.mavsdk.rpc.gimbal.GimbalResult\"k\n"
  "\025SetRoiLocationRequest\022\021\n\tgimbal_id\030\001 \001("
  "\005\022\024\n\014latitude_deg\030\002 \001(\001\022\025\n\rlongitude_deg"
  "\030\003 \001(\001\022\022\n\naltitude_m\030\004 \001(\002\"P\n\026SetRoiLoca"
  "tionResponse\0226\n\rgimbal_result\030\001 \001(\0132\037.ma"
  "vsdk.rpc.gimbal.GimbalResult\"]\n\022TakeCont"
  "rolRequest\022\021\n\tgimbal_id\030\001 \001(\005\0224\n\014control"
  "_mode\030\002 \001(\0162\036.mavsdk.rpc.gimbal.ControlM"
  "ode\"M\n\023TakeControlResponse\0226\n\rgimbal_res"
  "ult\030\001 \001(\0132\037.mavsdk.rpc.gimbal.GimbalResu"
  "lt\"*\n\025ReleaseControlRequest\022\021\n\tgimbal_id"
  "\030\001 \001(\005\"P\n\026ReleaseControlResponse\0226\n\rgimb"
  "al_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal.Gimb"
  "alResult\"\037\n\035SubscribeControlStatusReques"
  "t\"Q\n\025ControlStatusResponse\0228\n\016control_st"
  "atus\030\001 \001(\0132 .mavsdk.rpc.gimbal.ControlSt"
  "atus\",\n\027GetControlStatusRequest\022\021\n\tgimba"
  "l_id\030\001 \001(\005\"\214\001\n\030GetControlStatusResponse\022"
  "6\n\rgimbal_result\030\001 \001(\0132\037.mavsdk.rpc.gimb"
  "al.GimbalResult\0228\n\016control_status\030\002 \001(\0132"
  " .mavsdk.rpc.gimbal.ControlStatus\"\\\n\nQua"
  "ternion\022\022\n\001w\030\001 \001(\002B\007\202\265\030\003NaN\022\022\n\001x\030\002 \001(\002B\007"
  "\202\265\030\003NaN\022\022\n\001y\030\003 \001(\002B\007\202\265\030\003NaN\022\022\n\001z\030\004 \001(\002B\007"
  "\202\265\030\003NaN\"]\n\nEulerAngle\022\031\n\010roll_deg\030\001 \001(\002B"
  "\007\202\265\030\003NaN\022\032\n\tpitch_deg\030\002 \001(\002B\007\202\265\030\003NaN\022\030\n\007"
  "yaw_deg\030\003 \001(\002B\007\202\265\030\003NaN\"l\n\023AngularVelocit"
  "yBody\022\033\n\nroll_rad_s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013pi"
  "tch_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tyaw_rad_s\030\003 "
  "\001(\002B\007\202\265\030\003NaN\"\337\002\n\010Attitude\022\021\n\tgimbal_id\030\001"
  " \001(\005\022:\n\023euler_angle_forward\030\002 \001(\0132\035.mavs"
  "dk.rpc.gimbal.EulerAngle\0229\n\022quaternion_f"
  "orward\030\003 \001(\0132\035.mavsdk.rpc.gimbal.Quatern"
  "ion\0228\n\021euler_angle_north\030\004 \001(\0132\035.mavsdk."
  "rpc.gimbal.EulerAngle\0227\n\020quaternion_nort"
  "h\030\005 \001(\0132\035.mavsdk.rpc.gimbal.Quaternion\022@"
  "\n\020angular_velocity\030\006 \001(\0132&.mavsdk.rpc.gi"
  "mbal.AngularVelocityBody\022\024\n\014timestamp_us"
  "\030\007 \001(\004\"\032\n\030SubscribeAttitudeRequest\"A\n\020At"
  "titudeResponse\022-\n\010attitude\030\001 \001(\0132\033.mavsd"
  "k.rpc.gimbal.Attitude\"\'\n\022GetAttitudeRequ"
  "est\022\021\n\tgimbal_id\030\001 \001(\005\"|\n\023GetAttitudeRes"
  "ponse\0226\n\rgimbal_result\030\001 \001(\0132\037.mavsdk.rp"
  "c.gimbal.GimbalResult\022-\n\010attitude\030\002 \001(\0132"
  "\033.mavsdk.rpc.gimbal.Attitude\"\034\n\032Subscrib"
  "eGimbalListRequest\"H\n\022GimbalListResponse"
  "\0222\n\013gimbal_list\030\001 \001(\0132\035.mavsdk.rpc.gimba"
  "l.GimbalList\"\234\001\n\nGimbalItem\022\021\n\tgimbal_id"
  "\030\001 \001(\005\022\023\n\013vendor_name\030\002 \001(\t\022\022\n\nmodel_nam"
  "e\030\003 \001(\t\022\023\n\013custom_name\030\004 \001(\t\022#\n\033gimbal_m"
  "anager_component_id\030\005 \001(\005\022\030\n\020gimbal_devi"
  "ce_id\030\006 \001(\005\"<\n\nGimbalList\022.\n\007gimbals\030\001 \003"
  "(\0132\035.mavsdk.rpc.gimbal.GimbalItem\"\332\001\n\rCo"
  "ntrolStatus\022\021\n\tgimbal_id\030\001 \001(\005\0224\n\014contro"
  "l_mode\030\002 \001(\0162\036.mavsdk.rpc.gimbal.Control"
  "Mode\022\035\n\025sysid_primary_control\030\003 \001(\005\022\036\n\026c"
  "ompid_primary_control\030\004 \001(\005\022\037\n\027sysid_sec"
  "ondary_control\030\005 \001(\005\022 \n\030compid_secondary"
  "_control\030\006 \001(\005\"\376\001\n\014GimbalResult\0226\n\006resul"
  "t\030\001 \001(\0162&.mavsdk.rpc.gimbal.GimbalResult"
  ".Result\022\022\n\nresult_str\030\002 \001(\t\"\241\001\n\006Result\022\022"
  "\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\020"
  "\n\014RESULT_ERROR\020\002\022\022\n\016RESULT_TIMEOUT\020\003\022\026\n\022"
  "RESULT_UNSUPPORTED\020\004\022\024\n\020RESULT_NO_SYSTEM"
  "\020\005\022\033\n\027RESULT_INVALID_ARGUMENT\020\006*B\n\nGimba"
  "lMode\022\032\n\026GIMBAL_MODE_YAW_FOLLOW\020\000\022\030\n\024GIM"
  "BAL_MODE_YAW_LOCK\020\001*Z\n\013ControlMode\022\025\n\021CO"
  "NTROL_MODE_NONE\020\000\022\030\n\024CONTROL_MODE_PRIMAR"
  "Y\020\001\022\032\n\026CONTROL_MODE_SECONDARY\020\002*4\n\010SendM"
  "ode\022\022\n\016SEND_MODE_ONCE\020\000\022\024\n\020SEND_MODE_STR"
  "EAM\020\0012\274\010\n\rGimbalService\022X\n\tSetAngles\022#.m"
  "avsdk.rpc.gimbal.SetAnglesRequest\032$.mavs"
  "dk.rpc.gimbal.SetAnglesResponse\"\000\022j\n\017Set"
  "AngularRates\022).mavsdk.rpc.gimbal.SetAngu"
  "larRatesRequest\032*.mavsdk.rpc.gimbal.SetA"
  "ngularRatesResponse\"\000\022g\n\016SetRoiLocation\022"
  "(.mavsdk.rpc.gimbal.SetRoiLocationReques"
  "t\032).mavsdk.rpc.gimbal.SetRoiLocationResp"
  "onse\"\000\022^\n\013TakeControl\022%.mavsdk.rpc.gimba"
  "l.TakeControlRequest\032&.mavsdk.rpc.gimbal"
  ".TakeControlResponse\"\000\022g\n\016ReleaseControl"
  "\022(.mavsdk.rpc.gimbal.ReleaseControlReque"
  "st\032).mavsdk.rpc.gimbal.ReleaseControlRes"
  "ponse\"\000\022o\n\023SubscribeGimbalList\022-.mavsdk."
  "rpc.gimbal.SubscribeGimbalListRequest\032%."
  "mavsdk.rpc.gimbal.GimbalListResponse\"\0000\001"
  "\022|\n\026SubscribeControlStatus\0220.mavsdk.rpc."
  "gimbal.SubscribeControlStatusRequest\032(.m"
  "avsdk.rpc.gimbal.ControlStatusResponse\"\004"
  "\200\265\030\0000\001\022q\n\020GetControlStatus\022*.mavsdk.rpc."
  "gimbal.GetControlStatusRequest\032+.mavsdk."
  "rpc.gimbal.GetControlStatusResponse\"\004\200\265\030"
  "\001\022m\n\021SubscribeAttitude\022+.mavsdk.rpc.gimb"
  "al.SubscribeAttitudeRequest\032#.mavsdk.rpc"
  ".gimbal.AttitudeResponse\"\004\200\265\030\0000\001\022b\n\013GetA"
  "ttitude\022%.mavsdk.rpc.gimbal.GetAttitudeR"
  "equest\032&.mavsdk.rpc.gimbal.GetAttitudeRe"
  "sponse\"\004\200\265\030\001B\037\n\020io.mavsdk.gimbalB\013Gimbal"
  "Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gimbal_2fgimbal_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_gimbal_2fgimbal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gimbal_2fgimbal_2eproto = {
    false, false, 4493, descriptor_table_protodef_gimbal_2fgimbal_2eproto,
    "gimbal/gimbal.proto",
    &descriptor_table_gimbal_2fgimbal_2eproto_once, descriptor_table_gimbal_2fgimbal_2eproto_deps, 1, 28,
    schemas, file_default_instances, TableStruct_gimbal_2fgimbal_2eproto::offsets,
    file_level_metadata_gimbal_2fgimbal_2eproto, file_level_enum_descriptors_gimbal_2fgimbal_2eproto,
    file_level_service_descriptors_gimbal_2fgimbal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gimbal_2fgimbal_2eproto_getter() {
  return &descriptor_table_gimbal_2fgimbal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gimbal_2fgimbal_2eproto(&descriptor_table_gimbal_2fgimbal_2eproto);
namespace mavsdk {
namespace rpc {
namespace gimbal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[0];
}
bool GimbalResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GimbalResult_Result GimbalResult::RESULT_UNKNOWN;
constexpr GimbalResult_Result GimbalResult::RESULT_SUCCESS;
constexpr GimbalResult_Result GimbalResult::RESULT_ERROR;
constexpr GimbalResult_Result GimbalResult::RESULT_TIMEOUT;
constexpr GimbalResult_Result GimbalResult::RESULT_UNSUPPORTED;
constexpr GimbalResult_Result GimbalResult::RESULT_NO_SYSTEM;
constexpr GimbalResult_Result GimbalResult::RESULT_INVALID_ARGUMENT;
constexpr GimbalResult_Result GimbalResult::Result_MIN;
constexpr GimbalResult_Result GimbalResult::Result_MAX;
constexpr int GimbalResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[1];
}
bool GimbalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[2];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[3];
}
bool SendMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SetAnglesRequest::_Internal {
 public:
};

SetAnglesRequest::SetAnglesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAnglesRequest)
}
SetAnglesRequest::SetAnglesRequest(const SetAnglesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAnglesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.roll_deg_){}
    , decltype(_impl_.pitch_deg_){}
    , decltype(_impl_.yaw_deg_){}
    , decltype(_impl_.gimbal_mode_){}
    , decltype(_impl_.send_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gimbal_id_, &from._impl_.gimbal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_mode_) -
    reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.send_mode_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetAnglesRequest)
}

inline void SetAnglesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.roll_deg_){0}
    , decltype(_impl_.pitch_deg_){0}
    , decltype(_impl_.yaw_deg_){0}
    , decltype(_impl_.gimbal_mode_){0}
    , decltype(_impl_.send_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAnglesRequest::~SetAnglesRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAnglesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAnglesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAnglesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAnglesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gimbal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.send_mode_) -
      reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.send_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAnglesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float roll_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gimbal_mode(static_cast<::mavsdk::rpc::gimbal::GimbalMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_send_mode(static_cast<::mavsdk::rpc::gimbal::SendMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAnglesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // float roll_deg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw_deg(), target);
  }

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  if (this->_internal_gimbal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gimbal_mode(), target);
  }

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  if (this->_internal_send_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_send_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAnglesRequest)
  return target;
}

size_t SetAnglesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // float roll_deg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  if (this->_internal_gimbal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gimbal_mode());
  }

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  if (this->_internal_send_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_send_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnglesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAnglesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnglesRequest::GetClassData() const { return &_class_data_; }


void SetAnglesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAnglesRequest*>(&to_msg);
  auto& from = static_cast<const SetAnglesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = from._internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  if (from._internal_gimbal_mode() != 0) {
    _this->_internal_set_gimbal_mode(from._internal_gimbal_mode());
  }
  if (from._internal_send_mode() != 0) {
    _this->_internal_set_send_mode(from._internal_send_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnglesRequest::CopyFrom(const SetAnglesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnglesRequest::IsInitialized() const {
  return true;
}

void SetAnglesRequest::InternalSwap(SetAnglesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.send_mode_)
      + sizeof(SetAnglesRequest::_impl_.send_mode_)
      - PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.gimbal_id_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_id_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnglesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[0]);
}

// ===================================================================

class SetAnglesResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetAnglesResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetAnglesResponse::_Internal::gimbal_result(const SetAnglesResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetAnglesResponse::SetAnglesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAnglesResponse)
}
SetAnglesResponse::SetAnglesResponse(const SetAnglesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAnglesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetAnglesResponse)
}

inline void SetAnglesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAnglesResponse::~SetAnglesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAnglesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAnglesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
}

void SetAnglesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAnglesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAnglesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAnglesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAnglesResponse)
  return target;
}

size_t SetAnglesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnglesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAnglesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnglesResponse::GetClassData() const { return &_class_data_; }


void SetAnglesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAnglesResponse*>(&to_msg);
  auto& from = static_cast<const SetAnglesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnglesResponse::CopyFrom(const SetAnglesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnglesResponse::IsInitialized() const {
  return true;
}

void SetAnglesResponse::InternalSwap(SetAnglesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnglesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[1]);
}

// ===================================================================

class SetAngularRatesRequest::_Internal {
 public:
};

SetAngularRatesRequest::SetAngularRatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAngularRatesRequest)
}
SetAngularRatesRequest::SetAngularRatesRequest(const SetAngularRatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAngularRatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.roll_rate_deg_s_){}
    , decltype(_impl_.pitch_rate_deg_s_){}
    , decltype(_impl_.yaw_rate_deg_s_){}
    , decltype(_impl_.gimbal_mode_){}
    , decltype(_impl_.send_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gimbal_id_, &from._impl_.gimbal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_mode_) -
    reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.send_mode_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetAngularRatesRequest)
}

inline void SetAngularRatesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.roll_rate_deg_s_){0}
    , decltype(_impl_.pitch_rate_deg_s_){0}
    , decltype(_impl_.yaw_rate_deg_s_){0}
    , decltype(_impl_.gimbal_mode_){0}
    , decltype(_impl_.send_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAngularRatesRequest::~SetAngularRatesRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAngularRatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAngularRatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAngularRatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gimbal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.send_mode_) -
      reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.send_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAngularRatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float roll_rate_deg_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.roll_rate_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_rate_deg_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pitch_rate_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_rate_deg_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.yaw_rate_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gimbal_mode(static_cast<::mavsdk::rpc::gimbal::GimbalMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_send_mode(static_cast<::mavsdk::rpc::gimbal::SendMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAngularRatesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // float roll_rate_deg_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rate_deg_s = this->_internal_roll_rate_deg_s();
  uint32_t raw_roll_rate_deg_s;
  memcpy(&raw_roll_rate_deg_s, &tmp_roll_rate_deg_s, sizeof(tmp_roll_rate_deg_s));
  if (raw_roll_rate_deg_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_roll_rate_deg_s(), target);
  }

  // float pitch_rate_deg_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = this->_internal_pitch_rate_deg_s();
  uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch_rate_deg_s(), target);
  }

  // float yaw_rate_deg_s = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = this->_internal_yaw_rate_deg_s();
  uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw_rate_deg_s(), target);
  }

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  if (this->_internal_gimbal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gimbal_mode(), target);
  }

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  if (this->_internal_send_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_send_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  return target;
}

size_t SetAngularRatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // float roll_rate_deg_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rate_deg_s = this->_internal_roll_rate_deg_s();
  uint32_t raw_roll_rate_deg_s;
  memcpy(&raw_roll_rate_deg_s, &tmp_roll_rate_deg_s, sizeof(tmp_roll_rate_deg_s));
  if (raw_roll_rate_deg_s != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rate_deg_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = this->_internal_pitch_rate_deg_s();
  uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate_deg_s = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = this->_internal_yaw_rate_deg_s();
  uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  if (this->_internal_gimbal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gimbal_mode());
  }

  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  if (this->_internal_send_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_send_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAngularRatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAngularRatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAngularRatesRequest::GetClassData() const { return &_class_data_; }


void SetAngularRatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAngularRatesRequest*>(&to_msg);
  auto& from = static_cast<const SetAngularRatesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rate_deg_s = from._internal_roll_rate_deg_s();
  uint32_t raw_roll_rate_deg_s;
  memcpy(&raw_roll_rate_deg_s, &tmp_roll_rate_deg_s, sizeof(tmp_roll_rate_deg_s));
  if (raw_roll_rate_deg_s != 0) {
    _this->_internal_set_roll_rate_deg_s(from._internal_roll_rate_deg_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = from._internal_pitch_rate_deg_s();
  uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    _this->_internal_set_pitch_rate_deg_s(from._internal_pitch_rate_deg_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = from._internal_yaw_rate_deg_s();
  uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    _this->_internal_set_yaw_rate_deg_s(from._internal_yaw_rate_deg_s());
  }
  if (from._internal_gimbal_mode() != 0) {
    _this->_internal_set_gimbal_mode(from._internal_gimbal_mode());
  }
  if (from._internal_send_mode() != 0) {
    _this->_internal_set_send_mode(from._internal_send_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAngularRatesRequest::CopyFrom(const SetAngularRatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAngularRatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAngularRatesRequest::IsInitialized() const {
  return true;
}

void SetAngularRatesRequest::InternalSwap(SetAngularRatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAngularRatesRequest, _impl_.send_mode_)
      + sizeof(SetAngularRatesRequest::_impl_.send_mode_)
      - PROTOBUF_FIELD_OFFSET(SetAngularRatesRequest, _impl_.gimbal_id_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_id_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAngularRatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[2]);
}

// ===================================================================

class SetAngularRatesResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetAngularRatesResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetAngularRatesResponse::_Internal::gimbal_result(const SetAngularRatesResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetAngularRatesResponse::SetAngularRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAngularRatesResponse)
}
SetAngularRatesResponse::SetAngularRatesResponse(const SetAngularRatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAngularRatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetAngularRatesResponse)
}

inline void SetAngularRatesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAngularRatesResponse::~SetAngularRatesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAngularRatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
}

void SetAngularRatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAngularRatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAngularRatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAngularRatesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  return target;
}

size_t SetAngularRatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAngularRatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAngularRatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAngularRatesResponse::GetClassData() const { return &_class_data_; }


void SetAngularRatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAngularRatesResponse*>(&to_msg);
  auto& from = static_cast<const SetAngularRatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAngularRatesResponse::CopyFrom(const SetAngularRatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAngularRatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAngularRatesResponse::IsInitialized() const {
  return true;
}

void SetAngularRatesResponse::InternalSwap(SetAngularRatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAngularRatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[3]);
}

// ===================================================================

class SetRoiLocationRequest::_Internal {
 public:
};

SetRoiLocationRequest::SetRoiLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
}
SetRoiLocationRequest::SetRoiLocationRequest(const SetRoiLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetRoiLocationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_deg_){}
    , decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.altitude_m_){}
    , decltype(_impl_.longitude_deg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_deg_, &from._impl_.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_deg_) -
    reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.longitude_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
}

inline void SetRoiLocationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_deg_){0}
    , decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.altitude_m_){0}
    , decltype(_impl_.longitude_deg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetRoiLocationRequest::~SetRoiLocationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRoiLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetRoiLocationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRoiLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_deg_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.longitude_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRoiLocationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float altitude_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRoiLocationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // double latitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude_deg(), target);
  }

  // float altitude_m = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  return target;
}

size_t SetRoiLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 1 + 8;
  }

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // float altitude_m = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    total_size += 1 + 4;
  }

  // double longitude_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRoiLocationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRoiLocationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRoiLocationRequest::GetClassData() const { return &_class_data_; }


void SetRoiLocationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRoiLocationRequest*>(&to_msg);
  auto& from = static_cast<const SetRoiLocationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude_m = from._internal_altitude_m();
  uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    _this->_internal_set_altitude_m(from._internal_altitude_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRoiLocationRequest::CopyFrom(const SetRoiLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoiLocationRequest::IsInitialized() const {
  return true;
}

void SetRoiLocationRequest::InternalSwap(SetRoiLocationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.longitude_deg_)
      + sizeof(SetRoiLocationRequest::_impl_.longitude_deg_)
      - PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRoiLocationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[4]);
}

// ===================================================================

class SetRoiLocationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetRoiLocationResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetRoiLocationResponse::_Internal::gimbal_result(const SetRoiLocationResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetRoiLocationResponse::SetRoiLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}
SetRoiLocationResponse::SetRoiLocationResponse(const SetRoiLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetRoiLocationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}

inline void SetRoiLocationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetRoiLocationResponse::~SetRoiLocationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRoiLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
}

void SetRoiLocationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRoiLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRoiLocationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRoiLocationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  return target;
}

size_t SetRoiLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRoiLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRoiLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRoiLocationResponse::GetClassData() const { return &_class_data_; }


void SetRoiLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRoiLocationResponse*>(&to_msg);
  auto& from = static_cast<const SetRoiLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRoiLocationResponse::CopyFrom(const SetRoiLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoiLocationResponse::IsInitialized() const {
  return true;
}

void SetRoiLocationResponse::InternalSwap(SetRoiLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRoiLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[5]);
}

// ===================================================================

class TakeControlRequest::_Internal {
 public:
};

TakeControlRequest::TakeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlRequest)
}
TakeControlRequest::TakeControlRequest(const TakeControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TakeControlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.control_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gimbal_id_, &from._impl_.gimbal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.control_mode_) -
    reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.control_mode_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.TakeControlRequest)
}

inline void TakeControlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.control_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TakeControlRequest::~TakeControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakeControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TakeControlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TakeControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gimbal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.control_mode_) -
      reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.control_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakeControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::mavsdk::rpc::gimbal::ControlMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakeControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlRequest)
  return target;
}

size_t TakeControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakeControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TakeControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakeControlRequest::GetClassData() const { return &_class_data_; }


void TakeControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TakeControlRequest*>(&to_msg);
  auto& from = static_cast<const TakeControlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  if (from._internal_control_mode() != 0) {
    _this->_internal_set_control_mode(from._internal_control_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakeControlRequest::CopyFrom(const TakeControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeControlRequest::IsInitialized() const {
  return true;
}

void TakeControlRequest::InternalSwap(TakeControlRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TakeControlRequest, _impl_.control_mode_)
      + sizeof(TakeControlRequest::_impl_.control_mode_)
      - PROTOBUF_FIELD_OFFSET(TakeControlRequest, _impl_.gimbal_id_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_id_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[6]);
}

// ===================================================================

class TakeControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const TakeControlResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
TakeControlResponse::_Internal::gimbal_result(const TakeControlResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
TakeControlResponse::TakeControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}
TakeControlResponse::TakeControlResponse(const TakeControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TakeControlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}

inline void TakeControlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TakeControlResponse::~TakeControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakeControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
}

void TakeControlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TakeControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakeControlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakeControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlResponse)
  return target;
}

size_t TakeControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakeControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TakeControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakeControlResponse::GetClassData() const { return &_class_data_; }


void TakeControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TakeControlResponse*>(&to_msg);
  auto& from = static_cast<const TakeControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakeControlResponse::CopyFrom(const TakeControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeControlResponse::IsInitialized() const {
  return true;
}

void TakeControlResponse::InternalSwap(TakeControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[7]);
}

// ===================================================================

class ReleaseControlRequest::_Internal {
 public:
};

ReleaseControlRequest::ReleaseControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}
ReleaseControlRequest::ReleaseControlRequest(const ReleaseControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleaseControlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gimbal_id_ = from._impl_.gimbal_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}

inline void ReleaseControlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReleaseControlRequest::~ReleaseControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleaseControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReleaseControlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleaseControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbal_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ReleaseControlRequest)
  return target;
}

size_t ReleaseControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleaseControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseControlRequest::GetClassData() const { return &_class_data_; }


void ReleaseControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleaseControlRequest*>(&to_msg);
  auto& from = static_cast<const ReleaseControlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseControlRequest::CopyFrom(const ReleaseControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseControlRequest::IsInitialized() const {
  return true;
}

void ReleaseControlRequest::InternalSwap(ReleaseControlRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_id_, other->_impl_.gimbal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[8]);
}

// ===================================================================

class ReleaseControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const ReleaseControlResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
ReleaseControlResponse::_Internal::gimbal_result(const ReleaseControlResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
ReleaseControlResponse::ReleaseControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}
ReleaseControlResponse::ReleaseControlResponse(const ReleaseControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleaseControlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}

inline void ReleaseControlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReleaseControlResponse::~ReleaseControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleaseControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
}

void ReleaseControlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleaseControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseControlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ReleaseControlResponse)
  return target;
}

size_t ReleaseControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleaseControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseControlResponse::GetClassData() const { return &_class_data_; }


void ReleaseControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleaseControlResponse*>(&to_msg);
  auto& from = static_cast<const ReleaseControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseControlResponse::CopyFrom(const ReleaseControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseControlResponse::IsInitialized() const {
  return true;
}

void ReleaseControlResponse::InternalSwap(ReleaseControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[9]);
}

// ===================================================================

class SubscribeControlStatusRequest::_Internal {
 public:
};

SubscribeControlStatusRequest::SubscribeControlStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeControlStatusRequest)
}
SubscribeControlStatusRequest::SubscribeControlStatusRequest(const SubscribeControlStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeControlStatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeControlStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeControlStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeControlStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeControlStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[10]);
}

// ===================================================================

class ControlStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::ControlStatus& control_status(const ControlStatusResponse* msg);
};

const ::mavsdk::rpc::gimbal::ControlStatus&
ControlStatusResponse::_Internal::control_status(const ControlStatusResponse* msg) {
  return *msg->_impl_.control_status_;
}
ControlStatusResponse::ControlStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlStatusResponse)
}
ControlStatusResponse::ControlStatusResponse(const ControlStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control_status()) {
    _this->_impl_.control_status_ = new ::mavsdk::rpc::gimbal::ControlStatus(*from._impl_.control_status_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ControlStatusResponse)
}

inline void ControlStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.control_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlStatusResponse::~ControlStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.control_status_;
}

void ControlStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.control_status_ != nullptr) {
    delete _impl_.control_status_;
  }
  _impl_.control_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  if (this->_internal_has_control_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::control_status(this),
        _Internal::control_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlStatusResponse)
  return target;
}

size_t ControlStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  if (this->_internal_has_control_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStatusResponse::GetClassData() const { return &_class_data_; }


void ControlStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlStatusResponse*>(&to_msg);
  auto& from = static_cast<const ControlStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control_status()) {
    _this->_internal_mutable_control_status()->::mavsdk::rpc::gimbal::ControlStatus::MergeFrom(
        from._internal_control_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStatusResponse::CopyFrom(const ControlStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStatusResponse::IsInitialized() const {
  return true;
}

void ControlStatusResponse::InternalSwap(ControlStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.control_status_, other->_impl_.control_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[11]);
}

// ===================================================================

class GetControlStatusRequest::_Internal {
 public:
};

GetControlStatusRequest::GetControlStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GetControlStatusRequest)
}
GetControlStatusRequest::GetControlStatusRequest(const GetControlStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetControlStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gimbal_id_ = from._impl_.gimbal_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GetControlStatusRequest)
}

inline void GetControlStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetControlStatusRequest::~GetControlStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GetControlStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetControlStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetControlStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetControlStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GetControlStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbal_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetControlStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetControlStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GetControlStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GetControlStatusRequest)
  return target;
}

size_t GetControlStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GetControlStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetControlStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetControlStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetControlStatusRequest::GetClassData() const { return &_class_data_; }


void GetControlStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetControlStatusRequest*>(&to_msg);
  auto& from = static_cast<const GetControlStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GetControlStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetControlStatusRequest::CopyFrom(const GetControlStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GetControlStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetControlStatusRequest::IsInitialized() const {
  return true;
}

void GetControlStatusRequest::InternalSwap(GetControlStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_id_, other->_impl_.gimbal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetControlStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[12]);
}

// ===================================================================

class GetControlStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const GetControlStatusResponse* msg);
  static const ::mavsdk::rpc::gimbal::ControlStatus& control_status(const GetControlStatusResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
GetControlStatusResponse::_Internal::gimbal_result(const GetControlStatusResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
const ::mavsdk::rpc::gimbal::ControlStatus&
GetControlStatusResponse::_Internal::control_status(const GetControlStatusResponse* msg) {
  return *msg->_impl_.control_status_;
}
GetControlStatusResponse::GetControlStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GetControlStatusResponse)
}
GetControlStatusResponse::GetControlStatusResponse(const GetControlStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetControlStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , decltype(_impl_.control_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  if (from._internal_has_control_status()) {
    _this->_impl_.control_status_ = new ::mavsdk::rpc::gimbal::ControlStatus(*from._impl_.control_status_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GetControlStatusResponse)
}

inline void GetControlStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , decltype(_impl_.control_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetControlStatusResponse::~GetControlStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GetControlStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetControlStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
  if (this != internal_default_instance()) delete _impl_.control_status_;
}

void GetControlStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetControlStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GetControlStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.control_status_ != nullptr) {
    delete _impl_.control_status_;
  }
  _impl_.control_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetControlStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetControlStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GetControlStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
  if (this->_internal_has_control_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::control_status(this),
        _Internal::control_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GetControlStatusResponse)
  return target;
}

size_t GetControlStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GetControlStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
  if (this->_internal_has_control_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetControlStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetControlStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetControlStatusResponse::GetClassData() const { return &_class_data_; }


void GetControlStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetControlStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetControlStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GetControlStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  if (from._internal_has_control_status()) {
    _this->_internal_mutable_control_status()->::mavsdk::rpc::gimbal::ControlStatus::MergeFrom(
        from._internal_control_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetControlStatusResponse::CopyFrom(const GetControlStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GetControlStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetControlStatusResponse::IsInitialized() const {
  return true;
}

void GetControlStatusResponse::InternalSwap(GetControlStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetControlStatusResponse, _impl_.control_status_)
      + sizeof(GetControlStatusResponse::_impl_.control_status_)
      - PROTOBUF_FIELD_OFFSET(GetControlStatusResponse, _impl_.gimbal_result_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_result_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetControlStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[13]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.Quaternion)
}

inline void Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }


void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)
      + sizeof(Quaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[14]);
}

// ===================================================================

class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.EulerAngle)
}
EulerAngle::EulerAngle(const EulerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EulerAngle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_deg_){}
    , decltype(_impl_.pitch_deg_){}
    , decltype(_impl_.yaw_deg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_deg_, &from._impl_.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_deg_) -
    reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.EulerAngle)
}

inline void EulerAngle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_deg_){0}
    , decltype(_impl_.pitch_deg_){0}
    , decltype(_impl_.yaw_deg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.EulerAngle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EulerAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EulerAngle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.EulerAngle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EulerAngle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EulerAngle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.EulerAngle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.EulerAngle)
  return target;
}

size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.EulerAngle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EulerAngle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EulerAngle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EulerAngle::GetClassData() const { return &_class_data_; }


void EulerAngle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EulerAngle*>(&to_msg);
  auto& from = static_cast<const EulerAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.EulerAngle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_deg = from._internal_roll_deg();
  uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngle::IsInitialized() const {
  return true;
}

void EulerAngle::InternalSwap(EulerAngle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)
      + sizeof(EulerAngle::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)>(
          reinterpret_cast<char*>(&_impl_.roll_deg_),
          reinterpret_cast<char*>(&other->_impl_.roll_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[15]);
}

// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AngularVelocityBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_s_){}
    , decltype(_impl_.pitch_rad_s_){}
    , decltype(_impl_.yaw_rad_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_rad_s_, &from._impl_.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
    reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.AngularVelocityBody)
}

inline void AngularVelocityBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_s_){0}
    , decltype(_impl_.pitch_rad_s_){0}
    , decltype(_impl_.yaw_rad_s_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.AngularVelocityBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AngularVelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngularVelocityBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AngularVelocityBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngularVelocityBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AngularVelocityBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngularVelocityBody::GetClassData() const { return &_class_data_; }


void AngularVelocityBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AngularVelocityBody*>(&to_msg);
  auto& from = static_cast<const AngularVelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = from._internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    _this->_internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = from._internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    _this->_internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = from._internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    _this->_internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)
      + sizeof(AngularVelocityBody::_impl_.yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[16]);
}

// ===================================================================

class Attitude::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_forward(const Attitude* msg);
  static const ::mavsdk::rpc::gimbal::Quaternion& quaternion_forward(const Attitude* msg);
  static const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_north(const Attitude* msg);
  static const ::mavsdk::rpc::gimbal::Quaternion& quaternion_north(const Attitude* msg);
  static const ::mavsdk::rpc::gimbal::AngularVelocityBody& angular_velocity(const Attitude* msg);
};

const ::mavsdk::rpc::gimbal::EulerAngle&
Attitude::_Internal::euler_angle_forward(const Attitude* msg) {
  return *msg->_impl_.euler_angle_forward_;
}
const ::mavsdk::rpc::gimbal::Quaternion&
Attitude::_Internal::quaternion_forward(const Attitude* msg) {
  return *msg->_impl_.quaternion_forward_;
}
const ::mavsdk::rpc::gimbal::EulerAngle&
Attitude::_Internal::euler_angle_north(const Attitude* msg) {
  return *msg->_impl_.euler_angle_north_;
}
const ::mavsdk::rpc::gimbal::Quaternion&
Attitude::_Internal::quaternion_north(const Attitude* msg) {
  return *msg->_impl_.quaternion_north_;
}
const ::mavsdk::rpc::gimbal::AngularVelocityBody&
Attitude::_Internal::angular_velocity(const Attitude* msg) {
  return *msg->_impl_.angular_velocity_;
}
Attitude::Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attitude* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.euler_angle_forward_){nullptr}
    , decltype(_impl_.quaternion_forward_){nullptr}
    , decltype(_impl_.euler_angle_north_){nullptr}
    , decltype(_impl_.quaternion_north_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.timestamp_us_){}
    , decltype(_impl_.gimbal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_euler_angle_forward()) {
    _this->_impl_.euler_angle_forward_ = new ::mavsdk::rpc::gimbal::EulerAngle(*from._impl_.euler_angle_forward_);
  }
  if (from._internal_has_quaternion_forward()) {
    _this->_impl_.quaternion_forward_ = new ::mavsdk::rpc::gimbal::Quaternion(*from._impl_.quaternion_forward_);
  }
  if (from._internal_has_euler_angle_north()) {
    _this->_impl_.euler_angle_north_ = new ::mavsdk::rpc::gimbal::EulerAngle(*from._impl_.euler_angle_north_);
  }
  if (from._internal_has_quaternion_north()) {
    _this->_impl_.quaternion_north_ = new ::mavsdk::rpc::gimbal::Quaternion(*from._impl_.quaternion_north_);
  }
  if (from._internal_has_angular_velocity()) {
    _this->_impl_.angular_velocity_ = new ::mavsdk::rpc::gimbal::AngularVelocityBody(*from._impl_.angular_velocity_);
  }
  ::memcpy(&_impl_.timestamp_us_, &from._impl_.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gimbal_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.gimbal_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.Attitude)
}

inline void Attitude::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.euler_angle_forward_){nullptr}
    , decltype(_impl_.quaternion_forward_){nullptr}
    , decltype(_impl_.euler_angle_north_){nullptr}
    , decltype(_impl_.quaternion_north_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.timestamp_us_){uint64_t{0u}}
    , decltype(_impl_.gimbal_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.Attitude)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attitude::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.euler_angle_forward_;
  if (this != internal_default_instance()) delete _impl_.quaternion_forward_;
  if (this != internal_default_instance()) delete _impl_.euler_angle_north_;
  if (this != internal_default_instance()) delete _impl_.quaternion_north_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
}

void Attitude::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.Attitude)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.euler_angle_forward_ != nullptr) {
    delete _impl_.euler_angle_forward_;
  }
  _impl_.euler_angle_forward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quaternion_forward_ != nullptr) {
    delete _impl_.quaternion_forward_;
  }
  _impl_.quaternion_forward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.euler_angle_north_ != nullptr) {
    delete _impl_.euler_angle_north_;
  }
  _impl_.euler_angle_north_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quaternion_north_ != nullptr) {
    delete _impl_.quaternion_north_;
  }
  _impl_.quaternion_north_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
  ::memset(&_impl_.timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gimbal_id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.gimbal_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attitude::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angle_forward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion_forward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angle_north(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion_north(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attitude::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.Attitude)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
  if (this->_internal_has_euler_angle_forward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::euler_angle_forward(this),
        _Internal::euler_angle_forward(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
  if (this->_internal_has_quaternion_forward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::quaternion_forward(this),
        _Internal::quaternion_forward(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
  if (this->_internal_has_euler_angle_north()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::euler_angle_north(this),
        _Internal::euler_angle_north(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
  if (this->_internal_has_quaternion_north()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::quaternion_north(this),
        _Internal::quaternion_north(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
  if (this->_internal_has_angular_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp_us = 7;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.Attitude)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
  if (this->_internal_has_euler_angle_forward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.euler_angle_forward_);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
  if (this->_internal_has_quaternion_forward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quaternion_forward_);
  }

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
  if (this->_internal_has_euler_angle_north()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.euler_angle_north_);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
  if (this->_internal_has_quaternion_north()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quaternion_north_);
  }

  // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_velocity_);
  }

  // uint64 timestamp_us = 7;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_us());
  }

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attitude::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attitude::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attitude::GetClassData() const { return &_class_data_; }


void Attitude::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attitude*>(&to_msg);
  auto& from = static_cast<const Attitude&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.Attitude)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_euler_angle_forward()) {
    _this->_internal_mutable_euler_angle_forward()->::mavsdk::rpc::gimbal::EulerAngle::MergeFrom(
        from._internal_euler_angle_forward());
  }
  if (from._internal_has_quaternion_forward()) {
    _this->_internal_mutable_quaternion_forward()->::mavsdk::rpc::gimbal::Quaternion::MergeFrom(
        from._internal_quaternion_forward());
  }
  if (from._internal_has_euler_angle_north()) {
    _this->_internal_mutable_euler_angle_north()->::mavsdk::rpc::gimbal::EulerAngle::MergeFrom(
        from._internal_euler_angle_north());
  }
  if (from._internal_has_quaternion_north()) {
    _this->_internal_mutable_quaternion_north()->::mavsdk::rpc::gimbal::Quaternion::MergeFrom(
        from._internal_quaternion_north());
  }
  if (from._internal_has_angular_velocity()) {
    _this->_internal_mutable_angular_velocity()->::mavsdk::rpc::gimbal::AngularVelocityBody::MergeFrom(
        from._internal_angular_velocity());
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::InternalSwap(Attitude* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attitude, _impl_.gimbal_id_)
      + sizeof(Attitude::_impl_.gimbal_id_)
      - PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_forward_)>(
          reinterpret_cast<char*>(&_impl_.euler_angle_forward_),
          reinterpret_cast<char*>(&other->_impl_.euler_angle_forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attitude::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[17]);
}

// ===================================================================

class SubscribeAttitudeRequest::_Internal {
 public:
};

SubscribeAttitudeRequest::SubscribeAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
}
SubscribeAttitudeRequest::SubscribeAttitudeRequest(const SubscribeAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeAttitudeRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeAttitudeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeAttitudeRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[18]);
}

// ===================================================================

class AttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::Attitude& attitude(const AttitudeResponse* msg);
};

const ::mavsdk::rpc::gimbal::Attitude&
AttitudeResponse::_Internal::attitude(const AttitudeResponse* msg) {
  return *msg->_impl_.attitude_;
}
AttitudeResponse::AttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.AttitudeResponse)
}
AttitudeResponse::AttitudeResponse(const AttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttitudeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude()) {
    _this->_impl_.attitude_ = new ::mavsdk::rpc::gimbal::Attitude(*from._impl_.attitude_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.AttitudeResponse)
}

inline void AttitudeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttitudeResponse::~AttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.AttitudeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttitudeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attitude_;
}

void AttitudeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.AttitudeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.Attitude attitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttitudeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.AttitudeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  if (this->_internal_has_attitude()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attitude(this),
        _Internal::attitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.AttitudeResponse)
  return target;
}

size_t AttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.AttitudeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  if (this->_internal_has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttitudeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttitudeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttitudeResponse::GetClassData() const { return &_class_data_; }


void AttitudeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttitudeResponse*>(&to_msg);
  auto& from = static_cast<const AttitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.AttitudeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attitude()) {
    _this->_internal_mutable_attitude()->::mavsdk::rpc::gimbal::Attitude::MergeFrom(
        from._internal_attitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudeResponse::CopyFrom(const AttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.AttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeResponse::IsInitialized() const {
  return true;
}

void AttitudeResponse::InternalSwap(AttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.attitude_, other->_impl_.attitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[19]);
}

// ===================================================================

class GetAttitudeRequest::_Internal {
 public:
};

GetAttitudeRequest::GetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GetAttitudeRequest)
}
GetAttitudeRequest::GetAttitudeRequest(const GetAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAttitudeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gimbal_id_ = from._impl_.gimbal_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GetAttitudeRequest)
}

inline void GetAttitudeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAttitudeRequest::~GetAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GetAttitudeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAttitudeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetAttitudeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GetAttitudeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbal_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttitudeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAttitudeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GetAttitudeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GetAttitudeRequest)
  return target;
}

size_t GetAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GetAttitudeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAttitudeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAttitudeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAttitudeRequest::GetClassData() const { return &_class_data_; }


void GetAttitudeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAttitudeRequest*>(&to_msg);
  auto& from = static_cast<const GetAttitudeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GetAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAttitudeRequest::CopyFrom(const GetAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GetAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttitudeRequest::IsInitialized() const {
  return true;
}

void GetAttitudeRequest::InternalSwap(GetAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_id_, other->_impl_.gimbal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[20]);
}

// ===================================================================

class GetAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const GetAttitudeResponse* msg);
  static const ::mavsdk::rpc::gimbal::Attitude& attitude(const GetAttitudeResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
GetAttitudeResponse::_Internal::gimbal_result(const GetAttitudeResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
const ::mavsdk::rpc::gimbal::Attitude&
GetAttitudeResponse::_Internal::attitude(const GetAttitudeResponse* msg) {
  return *msg->_impl_.attitude_;
}
GetAttitudeResponse::GetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GetAttitudeResponse)
}
GetAttitudeResponse::GetAttitudeResponse(const GetAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAttitudeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    _this->_impl_.gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from._impl_.gimbal_result_);
  }
  if (from._internal_has_attitude()) {
    _this->_impl_.attitude_ = new ::mavsdk::rpc::gimbal::Attitude(*from._impl_.attitude_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GetAttitudeResponse)
}

inline void GetAttitudeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_result_){nullptr}
    , decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAttitudeResponse::~GetAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GetAttitudeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAttitudeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_result_;
  if (this != internal_default_instance()) delete _impl_.attitude_;
}

void GetAttitudeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GetAttitudeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_result_ != nullptr) {
    delete _impl_.gimbal_result_;
  }
  _impl_.gimbal_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttitudeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.Attitude attitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAttitudeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GetAttitudeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.Attitude attitude = 2;
  if (this->_internal_has_attitude()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attitude(this),
        _Internal::attitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GetAttitudeResponse)
  return target;
}

size_t GetAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GetAttitudeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->_internal_has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_result_);
  }

  // .mavsdk.rpc.gimbal.Attitude attitude = 2;
  if (this->_internal_has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAttitudeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAttitudeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAttitudeResponse::GetClassData() const { return &_class_data_; }


void GetAttitudeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAttitudeResponse*>(&to_msg);
  auto& from = static_cast<const GetAttitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GetAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_result()) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  if (from._internal_has_attitude()) {
    _this->_internal_mutable_attitude()->::mavsdk::rpc::gimbal::Attitude::MergeFrom(
        from._internal_attitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAttitudeResponse::CopyFrom(const GetAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GetAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttitudeResponse::IsInitialized() const {
  return true;
}

void GetAttitudeResponse::InternalSwap(GetAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAttitudeResponse, _impl_.attitude_)
      + sizeof(GetAttitudeResponse::_impl_.attitude_)
      - PROTOBUF_FIELD_OFFSET(GetAttitudeResponse, _impl_.gimbal_result_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_result_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[21]);
}

// ===================================================================

class SubscribeGimbalListRequest::_Internal {
 public:
};

SubscribeGimbalListRequest::SubscribeGimbalListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeGimbalListRequest)
}
SubscribeGimbalListRequest::SubscribeGimbalListRequest(const SubscribeGimbalListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeGimbalListRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeGimbalListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeGimbalListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeGimbalListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGimbalListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[22]);
}

// ===================================================================

class GimbalListResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalList& gimbal_list(const GimbalListResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalList&
GimbalListResponse::_Internal::gimbal_list(const GimbalListResponse* msg) {
  return *msg->_impl_.gimbal_list_;
}
GimbalListResponse::GimbalListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalListResponse)
}
GimbalListResponse::GimbalListResponse(const GimbalListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GimbalListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_list()) {
    _this->_impl_.gimbal_list_ = new ::mavsdk::rpc::gimbal::GimbalList(*from._impl_.gimbal_list_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalListResponse)
}

inline void GimbalListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GimbalListResponse::~GimbalListResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GimbalListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gimbal_list_;
}

void GimbalListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GimbalListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gimbal_list_ != nullptr) {
    delete _impl_.gimbal_list_;
  }
  _impl_.gimbal_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GimbalListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GimbalListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
  if (this->_internal_has_gimbal_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gimbal_list(this),
        _Internal::gimbal_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalListResponse)
  return target;
}

size_t GimbalListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
  if (this->_internal_has_gimbal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbal_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GimbalListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GimbalListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GimbalListResponse::GetClassData() const { return &_class_data_; }


void GimbalListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GimbalListResponse*>(&to_msg);
  auto& from = static_cast<const GimbalListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gimbal_list()) {
    _this->_internal_mutable_gimbal_list()->::mavsdk::rpc::gimbal::GimbalList::MergeFrom(
        from._internal_gimbal_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalListResponse::CopyFrom(const GimbalListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalListResponse::IsInitialized() const {
  return true;
}

void GimbalListResponse::InternalSwap(GimbalListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_list_, other->_impl_.gimbal_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GimbalListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[23]);
}

// ===================================================================

class GimbalItem::_Internal {
 public:
};

GimbalItem::GimbalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalItem)
}
GimbalItem::GimbalItem(const GimbalItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GimbalItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_name_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.custom_name_){}
    , decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.gimbal_manager_component_id_){}
    , decltype(_impl_.gimbal_device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor_name().empty()) {
    _this->_impl_.vendor_name_.Set(from._internal_vendor_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom_name().empty()) {
    _this->_impl_.custom_name_.Set(from._internal_custom_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gimbal_id_, &from._impl_.gimbal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gimbal_device_id_) -
    reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.gimbal_device_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalItem)
}

inline void GimbalItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_name_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.custom_name_){}
    , decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.gimbal_manager_component_id_){0}
    , decltype(_impl_.gimbal_device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GimbalItem::~GimbalItem() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GimbalItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_name_.Destroy();
  _impl_.model_name_.Destroy();
  _impl_.custom_name_.Destroy();
}

void GimbalItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GimbalItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_name_.ClearToEmpty();
  _impl_.model_name_.ClearToEmpty();
  _impl_.custom_name_.ClearToEmpty();
  ::memset(&_impl_.gimbal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gimbal_device_id_) -
      reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.gimbal_device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GimbalItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vendor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.gimbal.GimbalItem.vendor_name"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.gimbal.GimbalItem.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string custom_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_custom_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.gimbal.GimbalItem.custom_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 gimbal_manager_component_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gimbal_manager_component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gimbal_device_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gimbal_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GimbalItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // string vendor_name = 2;
  if (!this->_internal_vendor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalItem.vendor_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_name(), target);
  }

  // string model_name = 3;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalItem.model_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_name(), target);
  }

  // string custom_name = 4;
  if (!this->_internal_custom_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_name().data(), static_cast<int>(this->_internal_custom_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalItem.custom_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_custom_name(), target);
  }

  // int32 gimbal_manager_component_id = 5;
  if (this->_internal_gimbal_manager_component_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_gimbal_manager_component_id(), target);
  }

  // int32 gimbal_device_id = 6;
  if (this->_internal_gimbal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_gimbal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalItem)
  return target;
}

size_t GimbalItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 2;
  if (!this->_internal_vendor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // string model_name = 3;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string custom_name = 4;
  if (!this->_internal_custom_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_name());
  }

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // int32 gimbal_manager_component_id = 5;
  if (this->_internal_gimbal_manager_component_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_manager_component_id());
  }

  // int32 gimbal_device_id = 6;
  if (this->_internal_gimbal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GimbalItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GimbalItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GimbalItem::GetClassData() const { return &_class_data_; }


void GimbalItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GimbalItem*>(&to_msg);
  auto& from = static_cast<const GimbalItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor_name().empty()) {
    _this->_internal_set_vendor_name(from._internal_vendor_name());
  }
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_custom_name().empty()) {
    _this->_internal_set_custom_name(from._internal_custom_name());
  }
  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  if (from._internal_gimbal_manager_component_id() != 0) {
    _this->_internal_set_gimbal_manager_component_id(from._internal_gimbal_manager_component_id());
  }
  if (from._internal_gimbal_device_id() != 0) {
    _this->_internal_set_gimbal_device_id(from._internal_gimbal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalItem::CopyFrom(const GimbalItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalItem::IsInitialized() const {
  return true;
}

void GimbalItem::InternalSwap(GimbalItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_name_, lhs_arena,
      &other->_impl_.vendor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_name_, lhs_arena,
      &other->_impl_.custom_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GimbalItem, _impl_.gimbal_device_id_)
      + sizeof(GimbalItem::_impl_.gimbal_device_id_)
      - PROTOBUF_FIELD_OFFSET(GimbalItem, _impl_.gimbal_id_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_id_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GimbalItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[24]);
}

// ===================================================================

class GimbalList::_Internal {
 public:
};

GimbalList::GimbalList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalList)
}
GimbalList::GimbalList(const GimbalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GimbalList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbals_){from._impl_.gimbals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalList)
}

inline void GimbalList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GimbalList::~GimbalList() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GimbalList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gimbals_.~RepeatedPtrField();
}

void GimbalList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GimbalList::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GimbalList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gimbals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GimbalList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gimbals_size()); i < n; i++) {
    const auto& repfield = this->_internal_gimbals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalList)
  return target;
}

size_t GimbalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
  total_size += 1UL * this->_internal_gimbals_size();
  for (const auto& msg : this->_impl_.gimbals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GimbalList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GimbalList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GimbalList::GetClassData() const { return &_class_data_; }


void GimbalList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GimbalList*>(&to_msg);
  auto& from = static_cast<const GimbalList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gimbals_.MergeFrom(from._impl_.gimbals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalList::CopyFrom(const GimbalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalList::IsInitialized() const {
  return true;
}

void GimbalList::InternalSwap(GimbalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gimbals_.InternalSwap(&other->_impl_.gimbals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GimbalList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[25]);
}

// ===================================================================

class ControlStatus::_Internal {
 public:
};

ControlStatus::ControlStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlStatus)
}
ControlStatus::ControlStatus(const ControlStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){}
    , decltype(_impl_.control_mode_){}
    , decltype(_impl_.sysid_primary_control_){}
    , decltype(_impl_.compid_primary_control_){}
    , decltype(_impl_.sysid_secondary_control_){}
    , decltype(_impl_.compid_secondary_control_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gimbal_id_, &from._impl_.gimbal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compid_secondary_control_) -
    reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.compid_secondary_control_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ControlStatus)
}

inline void ControlStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gimbal_id_){0}
    , decltype(_impl_.control_mode_){0}
    , decltype(_impl_.sysid_primary_control_){0}
    , decltype(_impl_.compid_primary_control_){0}
    , decltype(_impl_.sysid_secondary_control_){0}
    , decltype(_impl_.compid_secondary_control_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlStatus::~ControlStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gimbal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compid_secondary_control_) -
      reinterpret_cast<char*>(&_impl_.gimbal_id_)) + sizeof(_impl_.compid_secondary_control_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gimbal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gimbal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::mavsdk::rpc::gimbal::ControlMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 sysid_primary_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sysid_primary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 compid_primary_control = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.compid_primary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sysid_secondary_control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sysid_secondary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 compid_secondary_control = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.compid_secondary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gimbal_id(), target);
  }

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode(), target);
  }

  // int32 sysid_primary_control = 3;
  if (this->_internal_sysid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sysid_primary_control(), target);
  }

  // int32 compid_primary_control = 4;
  if (this->_internal_compid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_compid_primary_control(), target);
  }

  // int32 sysid_secondary_control = 5;
  if (this->_internal_sysid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_sysid_secondary_control(), target);
  }

  // int32 compid_secondary_control = 6;
  if (this->_internal_compid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_compid_secondary_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlStatus)
  return target;
}

size_t ControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gimbal_id());
  }

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  // int32 sysid_primary_control = 3;
  if (this->_internal_sysid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sysid_primary_control());
  }

  // int32 compid_primary_control = 4;
  if (this->_internal_compid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compid_primary_control());
  }

  // int32 sysid_secondary_control = 5;
  if (this->_internal_sysid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sysid_secondary_control());
  }

  // int32 compid_secondary_control = 6;
  if (this->_internal_compid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compid_secondary_control());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStatus::GetClassData() const { return &_class_data_; }


void ControlStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlStatus*>(&to_msg);
  auto& from = static_cast<const ControlStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  if (from._internal_control_mode() != 0) {
    _this->_internal_set_control_mode(from._internal_control_mode());
  }
  if (from._internal_sysid_primary_control() != 0) {
    _this->_internal_set_sysid_primary_control(from._internal_sysid_primary_control());
  }
  if (from._internal_compid_primary_control() != 0) {
    _this->_internal_set_compid_primary_control(from._internal_compid_primary_control());
  }
  if (from._internal_sysid_secondary_control() != 0) {
    _this->_internal_set_sysid_secondary_control(from._internal_sysid_secondary_control());
  }
  if (from._internal_compid_secondary_control() != 0) {
    _this->_internal_set_compid_secondary_control(from._internal_compid_secondary_control());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStatus::CopyFrom(const ControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStatus::IsInitialized() const {
  return true;
}

void ControlStatus::InternalSwap(ControlStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_secondary_control_)
      + sizeof(ControlStatus::_impl_.compid_secondary_control_)
      - PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.gimbal_id_)>(
          reinterpret_cast<char*>(&_impl_.gimbal_id_),
          reinterpret_cast<char*>(&other->_impl_.gimbal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[26]);
}

// ===================================================================

class GimbalResult::_Internal {
 public:
};

GimbalResult::GimbalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalResult)
}
GimbalResult::GimbalResult(const GimbalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GimbalResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalResult)
}

inline void GimbalResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GimbalResult::~GimbalResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GimbalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void GimbalResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GimbalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GimbalResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::gimbal::GimbalResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.gimbal.GimbalResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GimbalResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalResult)
  return target;
}

size_t GimbalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GimbalResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GimbalResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GimbalResult::GetClassData() const { return &_class_data_; }


void GimbalResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GimbalResult*>(&to_msg);
  auto& from = static_cast<const GimbalResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalResult::CopyFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalResult::IsInitialized() const {
  return true;
}

void GimbalResult::InternalSwap(GimbalResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_str_, lhs_arena,
      &other->_impl_.result_str_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GimbalResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetAnglesRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetAnglesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetAnglesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetAnglesResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetAnglesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetAnglesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetAngularRatesRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetAngularRatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetAngularRatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetAngularRatesResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetAngularRatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetAngularRatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetRoiLocationRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetRoiLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetRoiLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetRoiLocationResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetRoiLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetRoiLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::TakeControlRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::TakeControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::TakeControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::TakeControlResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::TakeControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::TakeControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ReleaseControlRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ReleaseControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ReleaseControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ReleaseControlResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ReleaseControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ReleaseControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ControlStatusResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ControlStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ControlStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GetControlStatusRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GetControlStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GetControlStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GetControlStatusResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GetControlStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GetControlStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::Quaternion*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::EulerAngle*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::EulerAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::AngularVelocityBody*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::Attitude*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::Attitude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::Attitude >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::AttitudeResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::AttitudeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::AttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GetAttitudeRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GetAttitudeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GetAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GetAttitudeResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GetAttitudeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GetAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalListResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GimbalListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalItem*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GimbalItem >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalList*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GimbalList >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ControlStatus*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ControlStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ControlStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GimbalResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
