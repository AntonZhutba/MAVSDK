// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mocap/mocap.proto

#include "mocap/mocap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace mocap {
PROTOBUF_CONSTEXPR SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vision_position_estimate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVisionPositionEstimateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVisionPositionEstimateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVisionPositionEstimateRequestDefaultTypeInternal() {}
  union {
    SetVisionPositionEstimateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVisionPositionEstimateRequestDefaultTypeInternal _SetVisionPositionEstimateRequest_default_instance_;
PROTOBUF_CONSTEXPR SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mocap_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVisionPositionEstimateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVisionPositionEstimateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVisionPositionEstimateResponseDefaultTypeInternal() {}
  union {
    SetVisionPositionEstimateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVisionPositionEstimateResponseDefaultTypeInternal _SetVisionPositionEstimateResponse_default_instance_;
PROTOBUF_CONSTEXPR SetVisionSpeedEstimateRequest::SetVisionSpeedEstimateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vision_speed_estimate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVisionSpeedEstimateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVisionSpeedEstimateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVisionSpeedEstimateRequestDefaultTypeInternal() {}
  union {
    SetVisionSpeedEstimateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVisionSpeedEstimateRequestDefaultTypeInternal _SetVisionSpeedEstimateRequest_default_instance_;
PROTOBUF_CONSTEXPR SetVisionSpeedEstimateResponse::SetVisionSpeedEstimateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mocap_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVisionSpeedEstimateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVisionSpeedEstimateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVisionSpeedEstimateResponseDefaultTypeInternal() {}
  union {
    SetVisionSpeedEstimateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVisionSpeedEstimateResponseDefaultTypeInternal _SetVisionSpeedEstimateResponse_default_instance_;
PROTOBUF_CONSTEXPR SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attitude_position_mocap_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAttitudePositionMocapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAttitudePositionMocapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAttitudePositionMocapRequestDefaultTypeInternal() {}
  union {
    SetAttitudePositionMocapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAttitudePositionMocapRequestDefaultTypeInternal _SetAttitudePositionMocapRequest_default_instance_;
PROTOBUF_CONSTEXPR SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mocap_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetAttitudePositionMocapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAttitudePositionMocapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAttitudePositionMocapResponseDefaultTypeInternal() {}
  union {
    SetAttitudePositionMocapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAttitudePositionMocapResponseDefaultTypeInternal _SetAttitudePositionMocapResponse_default_instance_;
PROTOBUF_CONSTEXPR SetOdometryRequest::SetOdometryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.odometry_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetOdometryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOdometryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOdometryRequestDefaultTypeInternal() {}
  union {
    SetOdometryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOdometryRequestDefaultTypeInternal _SetOdometryRequest_default_instance_;
PROTOBUF_CONSTEXPR SetOdometryResponse::SetOdometryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mocap_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetOdometryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOdometryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOdometryResponseDefaultTypeInternal() {}
  union {
    SetOdometryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOdometryResponseDefaultTypeInternal _SetOdometryResponse_default_instance_;
PROTOBUF_CONSTEXPR PositionBody::PositionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_m_)*/0
  , /*decltype(_impl_.y_m_)*/0
  , /*decltype(_impl_.z_m_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionBodyDefaultTypeInternal() {}
  union {
    PositionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
PROTOBUF_CONSTEXPR AngleBody::AngleBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_rad_)*/0
  , /*decltype(_impl_.pitch_rad_)*/0
  , /*decltype(_impl_.yaw_rad_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AngleBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngleBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngleBodyDefaultTypeInternal() {}
  union {
    AngleBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngleBodyDefaultTypeInternal _AngleBody_default_instance_;
PROTOBUF_CONSTEXPR SpeedBody::SpeedBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_m_s_)*/0
  , /*decltype(_impl_.y_m_s_)*/0
  , /*decltype(_impl_.z_m_s_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeedBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedBodyDefaultTypeInternal() {}
  union {
    SpeedBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedBodyDefaultTypeInternal _SpeedBody_default_instance_;
PROTOBUF_CONSTEXPR SpeedNed::SpeedNed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.north_m_s_)*/0
  , /*decltype(_impl_.east_m_s_)*/0
  , /*decltype(_impl_.down_m_s_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeedNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedNedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedNedDefaultTypeInternal() {}
  union {
    SpeedNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedNedDefaultTypeInternal _SpeedNed_default_instance_;
PROTOBUF_CONSTEXPR AngularVelocityBody::AngularVelocityBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_rad_s_)*/0
  , /*decltype(_impl_.pitch_rad_s_)*/0
  , /*decltype(_impl_.yaw_rad_s_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AngularVelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
PROTOBUF_CONSTEXPR Covariance::Covariance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.covariance_matrix_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceDefaultTypeInternal() {}
  union {
    Covariance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceDefaultTypeInternal _Covariance_default_instance_;
PROTOBUF_CONSTEXPR Quaternion::Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;
PROTOBUF_CONSTEXPR VisionPositionEstimate::VisionPositionEstimate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_body_)*/nullptr
  , /*decltype(_impl_.angle_body_)*/nullptr
  , /*decltype(_impl_.pose_covariance_)*/nullptr
  , /*decltype(_impl_.time_usec_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisionPositionEstimateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionPositionEstimateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionPositionEstimateDefaultTypeInternal() {}
  union {
    VisionPositionEstimate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionPositionEstimateDefaultTypeInternal _VisionPositionEstimate_default_instance_;
PROTOBUF_CONSTEXPR VisionSpeedEstimate::VisionSpeedEstimate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_ned_)*/nullptr
  , /*decltype(_impl_.speed_covariance_)*/nullptr
  , /*decltype(_impl_.time_usec_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisionSpeedEstimateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionSpeedEstimateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionSpeedEstimateDefaultTypeInternal() {}
  union {
    VisionSpeedEstimate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionSpeedEstimateDefaultTypeInternal _VisionSpeedEstimate_default_instance_;
PROTOBUF_CONSTEXPR AttitudePositionMocap::AttitudePositionMocap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_.position_body_)*/nullptr
  , /*decltype(_impl_.pose_covariance_)*/nullptr
  , /*decltype(_impl_.time_usec_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttitudePositionMocapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudePositionMocapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudePositionMocapDefaultTypeInternal() {}
  union {
    AttitudePositionMocap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudePositionMocapDefaultTypeInternal _AttitudePositionMocap_default_instance_;
PROTOBUF_CONSTEXPR Odometry::Odometry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_body_)*/nullptr
  , /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_.speed_body_)*/nullptr
  , /*decltype(_impl_.angular_velocity_body_)*/nullptr
  , /*decltype(_impl_.pose_covariance_)*/nullptr
  , /*decltype(_impl_.velocity_covariance_)*/nullptr
  , /*decltype(_impl_.time_usec_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;
PROTOBUF_CONSTEXPR MocapResult::MocapResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MocapResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MocapResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MocapResultDefaultTypeInternal() {}
  union {
    MocapResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MocapResultDefaultTypeInternal _MocapResult_default_instance_;
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_mocap_2fmocap_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mocap_2fmocap_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mocap_2fmocap_2eproto = nullptr;

const uint32_t TableStruct_mocap_2fmocap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, _impl_.vision_position_estimate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, _impl_.mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, _impl_.vision_speed_estimate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, _impl_.mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, _impl_.attitude_position_mocap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, _impl_.mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryRequest, _impl_.odometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryResponse, _impl_.mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, _impl_.x_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, _impl_.y_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, _impl_.z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, _impl_.roll_rad_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, _impl_.pitch_rad_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, _impl_.yaw_rad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, _impl_.x_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, _impl_.y_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, _impl_.z_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedNed, _impl_.north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedNed, _impl_.east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedNed, _impl_.down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, _impl_.roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, _impl_.pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, _impl_.yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Covariance, _impl_.covariance_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _impl_.time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _impl_.position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _impl_.angle_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _impl_.pose_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionSpeedEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionSpeedEstimate, _impl_.time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionSpeedEstimate, _impl_.speed_ned_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionSpeedEstimate, _impl_.speed_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _impl_.time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _impl_.q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _impl_.position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _impl_.pose_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.speed_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.angular_velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _impl_.velocity_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, _impl_.result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest)},
  { 7, -1, -1, sizeof(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse)},
  { 14, -1, -1, sizeof(::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest)},
  { 21, -1, -1, sizeof(::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse)},
  { 28, -1, -1, sizeof(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest)},
  { 35, -1, -1, sizeof(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse)},
  { 42, -1, -1, sizeof(::mavsdk::rpc::mocap::SetOdometryRequest)},
  { 49, -1, -1, sizeof(::mavsdk::rpc::mocap::SetOdometryResponse)},
  { 56, -1, -1, sizeof(::mavsdk::rpc::mocap::PositionBody)},
  { 65, -1, -1, sizeof(::mavsdk::rpc::mocap::AngleBody)},
  { 74, -1, -1, sizeof(::mavsdk::rpc::mocap::SpeedBody)},
  { 83, -1, -1, sizeof(::mavsdk::rpc::mocap::SpeedNed)},
  { 92, -1, -1, sizeof(::mavsdk::rpc::mocap::AngularVelocityBody)},
  { 101, -1, -1, sizeof(::mavsdk::rpc::mocap::Covariance)},
  { 108, -1, -1, sizeof(::mavsdk::rpc::mocap::Quaternion)},
  { 118, -1, -1, sizeof(::mavsdk::rpc::mocap::VisionPositionEstimate)},
  { 128, -1, -1, sizeof(::mavsdk::rpc::mocap::VisionSpeedEstimate)},
  { 137, -1, -1, sizeof(::mavsdk::rpc::mocap::AttitudePositionMocap)},
  { 147, -1, -1, sizeof(::mavsdk::rpc::mocap::Odometry)},
  { 161, -1, -1, sizeof(::mavsdk::rpc::mocap::MocapResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::mocap::_SetVisionPositionEstimateRequest_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetVisionPositionEstimateResponse_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetVisionSpeedEstimateRequest_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetVisionSpeedEstimateResponse_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetAttitudePositionMocapRequest_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetAttitudePositionMocapResponse_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetOdometryRequest_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SetOdometryResponse_default_instance_._instance,
  &::mavsdk::rpc::mocap::_PositionBody_default_instance_._instance,
  &::mavsdk::rpc::mocap::_AngleBody_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SpeedBody_default_instance_._instance,
  &::mavsdk::rpc::mocap::_SpeedNed_default_instance_._instance,
  &::mavsdk::rpc::mocap::_AngularVelocityBody_default_instance_._instance,
  &::mavsdk::rpc::mocap::_Covariance_default_instance_._instance,
  &::mavsdk::rpc::mocap::_Quaternion_default_instance_._instance,
  &::mavsdk::rpc::mocap::_VisionPositionEstimate_default_instance_._instance,
  &::mavsdk::rpc::mocap::_VisionSpeedEstimate_default_instance_._instance,
  &::mavsdk::rpc::mocap::_AttitudePositionMocap_default_instance_._instance,
  &::mavsdk::rpc::mocap::_Odometry_default_instance_._instance,
  &::mavsdk::rpc::mocap::_MocapResult_default_instance_._instance,
};

const char descriptor_table_protodef_mocap_2fmocap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021mocap/mocap.proto\022\020mavsdk.rpc.mocap\032\024m"
  "avsdk_options.proto\"n\n SetVisionPosition"
  "EstimateRequest\022J\n\030vision_position_estim"
  "ate\030\001 \001(\0132(.mavsdk.rpc.mocap.VisionPosit"
  "ionEstimate\"X\n!SetVisionPositionEstimate"
  "Response\0223\n\014mocap_result\030\001 \001(\0132\035.mavsdk."
  "rpc.mocap.MocapResult\"e\n\035SetVisionSpeedE"
  "stimateRequest\022D\n\025vision_speed_estimate\030"
  "\001 \001(\0132%.mavsdk.rpc.mocap.VisionSpeedEsti"
  "mate\"U\n\036SetVisionSpeedEstimateResponse\0223"
  "\n\014mocap_result\030\001 \001(\0132\035.mavsdk.rpc.mocap."
  "MocapResult\"k\n\037SetAttitudePositionMocapR"
  "equest\022H\n\027attitude_position_mocap\030\001 \001(\0132"
  "\'.mavsdk.rpc.mocap.AttitudePositionMocap"
  "\"W\n SetAttitudePositionMocapResponse\0223\n\014"
  "mocap_result\030\001 \001(\0132\035.mavsdk.rpc.mocap.Mo"
  "capResult\"B\n\022SetOdometryRequest\022,\n\010odome"
  "try\030\001 \001(\0132\032.mavsdk.rpc.mocap.Odometry\"J\n"
  "\023SetOdometryResponse\0223\n\014mocap_result\030\001 \001"
  "(\0132\035.mavsdk.rpc.mocap.MocapResult\"5\n\014Pos"
  "itionBody\022\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030\002 \001(\002\022\013\n\003z"
  "_m\030\003 \001(\002\"A\n\tAngleBody\022\020\n\010roll_rad\030\001 \001(\002\022"
  "\021\n\tpitch_rad\030\002 \001(\002\022\017\n\007yaw_rad\030\003 \001(\002\"8\n\tS"
  "peedBody\022\r\n\005x_m_s\030\001 \001(\002\022\r\n\005y_m_s\030\002 \001(\002\022\r"
  "\n\005z_m_s\030\003 \001(\002\"A\n\010SpeedNed\022\021\n\tnorth_m_s\030\001"
  " \001(\002\022\020\n\010east_m_s\030\002 \001(\002\022\020\n\010down_m_s\030\003 \001(\002"
  "\"Q\n\023AngularVelocityBody\022\022\n\nroll_rad_s\030\001 "
  "\001(\002\022\023\n\013pitch_rad_s\030\002 \001(\002\022\021\n\tyaw_rad_s\030\003 "
  "\001(\002\"\'\n\nCovariance\022\031\n\021covariance_matrix\030\001"
  " \003(\002\"8\n\nQuaternion\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002"
  "\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\312\001\n\026VisionPositio"
  "nEstimate\022\021\n\ttime_usec\030\001 \001(\004\0225\n\rposition"
  "_body\030\002 \001(\0132\036.mavsdk.rpc.mocap.PositionB"
  "ody\022/\n\nangle_body\030\003 \001(\0132\033.mavsdk.rpc.moc"
  "ap.AngleBody\0225\n\017pose_covariance\030\004 \001(\0132\034."
  "mavsdk.rpc.mocap.Covariance\"\217\001\n\023VisionSp"
  "eedEstimate\022\021\n\ttime_usec\030\001 \001(\004\022-\n\tspeed_"
  "ned\030\002 \001(\0132\032.mavsdk.rpc.mocap.SpeedNed\0226\n"
  "\020speed_covariance\030\003 \001(\0132\034.mavsdk.rpc.moc"
  "ap.Covariance\"\301\001\n\025AttitudePositionMocap\022"
  "\021\n\ttime_usec\030\001 \001(\004\022\'\n\001q\030\002 \001(\0132\034.mavsdk.r"
  "pc.mocap.Quaternion\0225\n\rposition_body\030\003 \001"
  "(\0132\036.mavsdk.rpc.mocap.PositionBody\0225\n\017po"
  "se_covariance\030\004 \001(\0132\034.mavsdk.rpc.mocap.C"
  "ovariance\"\333\003\n\010Odometry\022\021\n\ttime_usec\030\001 \001("
  "\004\0225\n\010frame_id\030\002 \001(\0162#.mavsdk.rpc.mocap.O"
  "dometry.MavFrame\0225\n\rposition_body\030\003 \001(\0132"
  "\036.mavsdk.rpc.mocap.PositionBody\022\'\n\001q\030\004 \001"
  "(\0132\034.mavsdk.rpc.mocap.Quaternion\022/\n\nspee"
  "d_body\030\005 \001(\0132\033.mavsdk.rpc.mocap.SpeedBod"
  "y\022D\n\025angular_velocity_body\030\006 \001(\0132%.mavsd"
  "k.rpc.mocap.AngularVelocityBody\0225\n\017pose_"
  "covariance\030\007 \001(\0132\034.mavsdk.rpc.mocap.Cova"
  "riance\0229\n\023velocity_covariance\030\010 \001(\0132\034.ma"
  "vsdk.rpc.mocap.Covariance\"<\n\010MavFrame\022\027\n"
  "\023MAV_FRAME_MOCAP_NED\020\000\022\027\n\023MAV_FRAME_LOCA"
  "L_FRD\020\001\"\366\001\n\013MocapResult\0224\n\006result\030\001 \001(\0162"
  "$.mavsdk.rpc.mocap.MocapResult.Result\022\022\n"
  "\nresult_str\030\002 \001(\t\"\234\001\n\006Result\022\022\n\016RESULT_U"
  "NKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_N"
  "O_SYSTEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022"
  "\037\n\033RESULT_INVALID_REQUEST_DATA\020\004\022\026\n\022RESU"
  "LT_UNSUPPORTED\020\0052\213\004\n\014MocapService\022\212\001\n\031Se"
  "tVisionPositionEstimate\0222.mavsdk.rpc.moc"
  "ap.SetVisionPositionEstimateRequest\0323.ma"
  "vsdk.rpc.mocap.SetVisionPositionEstimate"
  "Response\"\004\200\265\030\001\022\201\001\n\026SetVisionSpeedEstimat"
  "e\022/.mavsdk.rpc.mocap.SetVisionSpeedEstim"
  "ateRequest\0320.mavsdk.rpc.mocap.SetVisionS"
  "peedEstimateResponse\"\004\200\265\030\001\022\207\001\n\030SetAttitu"
  "dePositionMocap\0221.mavsdk.rpc.mocap.SetAt"
  "titudePositionMocapRequest\0322.mavsdk.rpc."
  "mocap.SetAttitudePositionMocapResponse\"\004"
  "\200\265\030\001\022`\n\013SetOdometry\022$.mavsdk.rpc.mocap.S"
  "etOdometryRequest\032%.mavsdk.rpc.mocap.Set"
  "OdometryResponse\"\004\200\265\030\001B\035\n\017io.mavsdk.moca"
  "pB\nMocapProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_mocap_2fmocap_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_mocap_2fmocap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mocap_2fmocap_2eproto = {
    false, false, 3061, descriptor_table_protodef_mocap_2fmocap_2eproto,
    "mocap/mocap.proto",
    &descriptor_table_mocap_2fmocap_2eproto_once, descriptor_table_mocap_2fmocap_2eproto_deps, 1, 20,
    schemas, file_default_instances, TableStruct_mocap_2fmocap_2eproto::offsets,
    file_level_metadata_mocap_2fmocap_2eproto, file_level_enum_descriptors_mocap_2fmocap_2eproto,
    file_level_service_descriptors_mocap_2fmocap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mocap_2fmocap_2eproto_getter() {
  return &descriptor_table_mocap_2fmocap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mocap_2fmocap_2eproto(&descriptor_table_mocap_2fmocap_2eproto);
namespace mavsdk {
namespace rpc {
namespace mocap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mocap_2fmocap_2eproto);
  return file_level_enum_descriptors_mocap_2fmocap_2eproto[0];
}
bool Odometry_MavFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Odometry_MavFrame Odometry::MAV_FRAME_MOCAP_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_LOCAL_FRD;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MocapResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mocap_2fmocap_2eproto);
  return file_level_enum_descriptors_mocap_2fmocap_2eproto[1];
}
bool MocapResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MocapResult_Result MocapResult::RESULT_UNKNOWN;
constexpr MocapResult_Result MocapResult::RESULT_SUCCESS;
constexpr MocapResult_Result MocapResult::RESULT_NO_SYSTEM;
constexpr MocapResult_Result MocapResult::RESULT_CONNECTION_ERROR;
constexpr MocapResult_Result MocapResult::RESULT_INVALID_REQUEST_DATA;
constexpr MocapResult_Result MocapResult::RESULT_UNSUPPORTED;
constexpr MocapResult_Result MocapResult::Result_MIN;
constexpr MocapResult_Result MocapResult::Result_MAX;
constexpr int MocapResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SetVisionPositionEstimateRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::VisionPositionEstimate& vision_position_estimate(const SetVisionPositionEstimateRequest* msg);
};

const ::mavsdk::rpc::mocap::VisionPositionEstimate&
SetVisionPositionEstimateRequest::_Internal::vision_position_estimate(const SetVisionPositionEstimateRequest* msg) {
  return *msg->_impl_.vision_position_estimate_;
}
SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
}
SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(const SetVisionPositionEstimateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVisionPositionEstimateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_position_estimate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vision_position_estimate()) {
    _this->_impl_.vision_position_estimate_ = new ::mavsdk::rpc::mocap::VisionPositionEstimate(*from._impl_.vision_position_estimate_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
}

inline void SetVisionPositionEstimateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_position_estimate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVisionPositionEstimateRequest::~SetVisionPositionEstimateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVisionPositionEstimateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vision_position_estimate_;
}

void SetVisionPositionEstimateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVisionPositionEstimateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vision_position_estimate_ != nullptr) {
    delete _impl_.vision_position_estimate_;
  }
  _impl_.vision_position_estimate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionPositionEstimateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_position_estimate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVisionPositionEstimateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  if (this->_internal_has_vision_position_estimate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vision_position_estimate(this),
        _Internal::vision_position_estimate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  return target;
}

size_t SetVisionPositionEstimateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  if (this->_internal_has_vision_position_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vision_position_estimate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionPositionEstimateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVisionPositionEstimateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionPositionEstimateRequest::GetClassData() const { return &_class_data_; }


void SetVisionPositionEstimateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVisionPositionEstimateRequest*>(&to_msg);
  auto& from = static_cast<const SetVisionPositionEstimateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vision_position_estimate()) {
    _this->_internal_mutable_vision_position_estimate()->::mavsdk::rpc::mocap::VisionPositionEstimate::MergeFrom(
        from._internal_vision_position_estimate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionPositionEstimateRequest::CopyFrom(const SetVisionPositionEstimateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionPositionEstimateRequest::IsInitialized() const {
  return true;
}

void SetVisionPositionEstimateRequest::InternalSwap(SetVisionPositionEstimateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vision_position_estimate_, other->_impl_.vision_position_estimate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionPositionEstimateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[0]);
}

// ===================================================================

class SetVisionPositionEstimateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetVisionPositionEstimateResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetVisionPositionEstimateResponse::_Internal::mocap_result(const SetVisionPositionEstimateResponse* msg) {
  return *msg->_impl_.mocap_result_;
}
SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
}
SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(const SetVisionPositionEstimateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVisionPositionEstimateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    _this->_impl_.mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from._impl_.mocap_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
}

inline void SetVisionPositionEstimateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVisionPositionEstimateResponse::~SetVisionPositionEstimateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVisionPositionEstimateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mocap_result_;
}

void SetVisionPositionEstimateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVisionPositionEstimateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mocap_result_ != nullptr) {
    delete _impl_.mocap_result_;
  }
  _impl_.mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionPositionEstimateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVisionPositionEstimateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mocap_result(this),
        _Internal::mocap_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  return target;
}

size_t SetVisionPositionEstimateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mocap_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionPositionEstimateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVisionPositionEstimateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionPositionEstimateResponse::GetClassData() const { return &_class_data_; }


void SetVisionPositionEstimateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVisionPositionEstimateResponse*>(&to_msg);
  auto& from = static_cast<const SetVisionPositionEstimateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _this->_internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(
        from._internal_mocap_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionPositionEstimateResponse::CopyFrom(const SetVisionPositionEstimateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionPositionEstimateResponse::IsInitialized() const {
  return true;
}

void SetVisionPositionEstimateResponse::InternalSwap(SetVisionPositionEstimateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mocap_result_, other->_impl_.mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionPositionEstimateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[1]);
}

// ===================================================================

class SetVisionSpeedEstimateRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::VisionSpeedEstimate& vision_speed_estimate(const SetVisionSpeedEstimateRequest* msg);
};

const ::mavsdk::rpc::mocap::VisionSpeedEstimate&
SetVisionSpeedEstimateRequest::_Internal::vision_speed_estimate(const SetVisionSpeedEstimateRequest* msg) {
  return *msg->_impl_.vision_speed_estimate_;
}
SetVisionSpeedEstimateRequest::SetVisionSpeedEstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
}
SetVisionSpeedEstimateRequest::SetVisionSpeedEstimateRequest(const SetVisionSpeedEstimateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVisionSpeedEstimateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_speed_estimate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vision_speed_estimate()) {
    _this->_impl_.vision_speed_estimate_ = new ::mavsdk::rpc::mocap::VisionSpeedEstimate(*from._impl_.vision_speed_estimate_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
}

inline void SetVisionSpeedEstimateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_speed_estimate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVisionSpeedEstimateRequest::~SetVisionSpeedEstimateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVisionSpeedEstimateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vision_speed_estimate_;
}

void SetVisionSpeedEstimateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVisionSpeedEstimateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vision_speed_estimate_ != nullptr) {
    delete _impl_.vision_speed_estimate_;
  }
  _impl_.vision_speed_estimate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionSpeedEstimateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.VisionSpeedEstimate vision_speed_estimate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_speed_estimate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVisionSpeedEstimateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionSpeedEstimate vision_speed_estimate = 1;
  if (this->_internal_has_vision_speed_estimate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vision_speed_estimate(this),
        _Internal::vision_speed_estimate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  return target;
}

size_t SetVisionSpeedEstimateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionSpeedEstimate vision_speed_estimate = 1;
  if (this->_internal_has_vision_speed_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vision_speed_estimate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionSpeedEstimateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVisionSpeedEstimateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionSpeedEstimateRequest::GetClassData() const { return &_class_data_; }


void SetVisionSpeedEstimateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVisionSpeedEstimateRequest*>(&to_msg);
  auto& from = static_cast<const SetVisionSpeedEstimateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vision_speed_estimate()) {
    _this->_internal_mutable_vision_speed_estimate()->::mavsdk::rpc::mocap::VisionSpeedEstimate::MergeFrom(
        from._internal_vision_speed_estimate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionSpeedEstimateRequest::CopyFrom(const SetVisionSpeedEstimateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionSpeedEstimateRequest::IsInitialized() const {
  return true;
}

void SetVisionSpeedEstimateRequest::InternalSwap(SetVisionSpeedEstimateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vision_speed_estimate_, other->_impl_.vision_speed_estimate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionSpeedEstimateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[2]);
}

// ===================================================================

class SetVisionSpeedEstimateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetVisionSpeedEstimateResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetVisionSpeedEstimateResponse::_Internal::mocap_result(const SetVisionSpeedEstimateResponse* msg) {
  return *msg->_impl_.mocap_result_;
}
SetVisionSpeedEstimateResponse::SetVisionSpeedEstimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
}
SetVisionSpeedEstimateResponse::SetVisionSpeedEstimateResponse(const SetVisionSpeedEstimateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVisionSpeedEstimateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    _this->_impl_.mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from._impl_.mocap_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
}

inline void SetVisionSpeedEstimateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVisionSpeedEstimateResponse::~SetVisionSpeedEstimateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVisionSpeedEstimateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mocap_result_;
}

void SetVisionSpeedEstimateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVisionSpeedEstimateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mocap_result_ != nullptr) {
    delete _impl_.mocap_result_;
  }
  _impl_.mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionSpeedEstimateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVisionSpeedEstimateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mocap_result(this),
        _Internal::mocap_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  return target;
}

size_t SetVisionSpeedEstimateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mocap_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionSpeedEstimateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVisionSpeedEstimateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionSpeedEstimateResponse::GetClassData() const { return &_class_data_; }


void SetVisionSpeedEstimateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVisionSpeedEstimateResponse*>(&to_msg);
  auto& from = static_cast<const SetVisionSpeedEstimateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _this->_internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(
        from._internal_mocap_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionSpeedEstimateResponse::CopyFrom(const SetVisionSpeedEstimateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionSpeedEstimateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionSpeedEstimateResponse::IsInitialized() const {
  return true;
}

void SetVisionSpeedEstimateResponse::InternalSwap(SetVisionSpeedEstimateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mocap_result_, other->_impl_.mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionSpeedEstimateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[3]);
}

// ===================================================================

class SetAttitudePositionMocapRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::AttitudePositionMocap& attitude_position_mocap(const SetAttitudePositionMocapRequest* msg);
};

const ::mavsdk::rpc::mocap::AttitudePositionMocap&
SetAttitudePositionMocapRequest::_Internal::attitude_position_mocap(const SetAttitudePositionMocapRequest* msg) {
  return *msg->_impl_.attitude_position_mocap_;
}
SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
}
SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(const SetAttitudePositionMocapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAttitudePositionMocapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_position_mocap_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_position_mocap()) {
    _this->_impl_.attitude_position_mocap_ = new ::mavsdk::rpc::mocap::AttitudePositionMocap(*from._impl_.attitude_position_mocap_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
}

inline void SetAttitudePositionMocapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_position_mocap_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAttitudePositionMocapRequest::~SetAttitudePositionMocapRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAttitudePositionMocapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attitude_position_mocap_;
}

void SetAttitudePositionMocapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAttitudePositionMocapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attitude_position_mocap_ != nullptr) {
    delete _impl_.attitude_position_mocap_;
  }
  _impl_.attitude_position_mocap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudePositionMocapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_position_mocap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAttitudePositionMocapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  if (this->_internal_has_attitude_position_mocap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attitude_position_mocap(this),
        _Internal::attitude_position_mocap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  return target;
}

size_t SetAttitudePositionMocapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  if (this->_internal_has_attitude_position_mocap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attitude_position_mocap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAttitudePositionMocapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAttitudePositionMocapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAttitudePositionMocapRequest::GetClassData() const { return &_class_data_; }


void SetAttitudePositionMocapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAttitudePositionMocapRequest*>(&to_msg);
  auto& from = static_cast<const SetAttitudePositionMocapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attitude_position_mocap()) {
    _this->_internal_mutable_attitude_position_mocap()->::mavsdk::rpc::mocap::AttitudePositionMocap::MergeFrom(
        from._internal_attitude_position_mocap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitudePositionMocapRequest::CopyFrom(const SetAttitudePositionMocapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudePositionMocapRequest::IsInitialized() const {
  return true;
}

void SetAttitudePositionMocapRequest::InternalSwap(SetAttitudePositionMocapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.attitude_position_mocap_, other->_impl_.attitude_position_mocap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudePositionMocapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[4]);
}

// ===================================================================

class SetAttitudePositionMocapResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetAttitudePositionMocapResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetAttitudePositionMocapResponse::_Internal::mocap_result(const SetAttitudePositionMocapResponse* msg) {
  return *msg->_impl_.mocap_result_;
}
SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
}
SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(const SetAttitudePositionMocapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetAttitudePositionMocapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    _this->_impl_.mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from._impl_.mocap_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
}

inline void SetAttitudePositionMocapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetAttitudePositionMocapResponse::~SetAttitudePositionMocapResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAttitudePositionMocapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mocap_result_;
}

void SetAttitudePositionMocapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAttitudePositionMocapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mocap_result_ != nullptr) {
    delete _impl_.mocap_result_;
  }
  _impl_.mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudePositionMocapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAttitudePositionMocapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mocap_result(this),
        _Internal::mocap_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  return target;
}

size_t SetAttitudePositionMocapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mocap_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAttitudePositionMocapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetAttitudePositionMocapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAttitudePositionMocapResponse::GetClassData() const { return &_class_data_; }


void SetAttitudePositionMocapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetAttitudePositionMocapResponse*>(&to_msg);
  auto& from = static_cast<const SetAttitudePositionMocapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _this->_internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(
        from._internal_mocap_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitudePositionMocapResponse::CopyFrom(const SetAttitudePositionMocapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudePositionMocapResponse::IsInitialized() const {
  return true;
}

void SetAttitudePositionMocapResponse::InternalSwap(SetAttitudePositionMocapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mocap_result_, other->_impl_.mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudePositionMocapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[5]);
}

// ===================================================================

class SetOdometryRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::Odometry& odometry(const SetOdometryRequest* msg);
};

const ::mavsdk::rpc::mocap::Odometry&
SetOdometryRequest::_Internal::odometry(const SetOdometryRequest* msg) {
  return *msg->_impl_.odometry_;
}
SetOdometryRequest::SetOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetOdometryRequest)
}
SetOdometryRequest::SetOdometryRequest(const SetOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetOdometryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.odometry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    _this->_impl_.odometry_ = new ::mavsdk::rpc::mocap::Odometry(*from._impl_.odometry_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetOdometryRequest)
}

inline void SetOdometryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.odometry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetOdometryRequest::~SetOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetOdometryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetOdometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.odometry_;
}

void SetOdometryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetOdometryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.odometry_ != nullptr) {
    delete _impl_.odometry_;
  }
  _impl_.odometry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOdometryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.Odometry odometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetOdometryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetOdometryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  if (this->_internal_has_odometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::odometry(this),
        _Internal::odometry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetOdometryRequest)
  return target;
}

size_t SetOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetOdometryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  if (this->_internal_has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.odometry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOdometryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetOdometryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOdometryRequest::GetClassData() const { return &_class_data_; }


void SetOdometryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetOdometryRequest*>(&to_msg);
  auto& from = static_cast<const SetOdometryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetOdometryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_odometry()) {
    _this->_internal_mutable_odometry()->::mavsdk::rpc::mocap::Odometry::MergeFrom(
        from._internal_odometry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOdometryRequest::CopyFrom(const SetOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOdometryRequest::IsInitialized() const {
  return true;
}

void SetOdometryRequest::InternalSwap(SetOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.odometry_, other->_impl_.odometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOdometryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[6]);
}

// ===================================================================

class SetOdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetOdometryResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetOdometryResponse::_Internal::mocap_result(const SetOdometryResponse* msg) {
  return *msg->_impl_.mocap_result_;
}
SetOdometryResponse::SetOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetOdometryResponse)
}
SetOdometryResponse::SetOdometryResponse(const SetOdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetOdometryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    _this->_impl_.mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from._impl_.mocap_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetOdometryResponse)
}

inline void SetOdometryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mocap_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetOdometryResponse::~SetOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetOdometryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetOdometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mocap_result_;
}

void SetOdometryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetOdometryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mocap_result_ != nullptr) {
    delete _impl_.mocap_result_;
  }
  _impl_.mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOdometryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetOdometryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetOdometryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mocap_result(this),
        _Internal::mocap_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetOdometryResponse)
  return target;
}

size_t SetOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetOdometryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mocap_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOdometryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetOdometryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOdometryResponse::GetClassData() const { return &_class_data_; }


void SetOdometryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetOdometryResponse*>(&to_msg);
  auto& from = static_cast<const SetOdometryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetOdometryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _this->_internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(
        from._internal_mocap_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOdometryResponse::CopyFrom(const SetOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOdometryResponse::IsInitialized() const {
  return true;
}

void SetOdometryResponse::InternalSwap(SetOdometryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mocap_result_, other->_impl_.mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOdometryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[7]);
}

// ===================================================================

class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.PositionBody)
}
PositionBody::PositionBody(const PositionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_m_){}
    , decltype(_impl_.y_m_){}
    , decltype(_impl_.z_m_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_m_, &from._impl_.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_m_) -
    reinterpret_cast<char*>(&_impl_.x_m_)) + sizeof(_impl_.z_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.PositionBody)
}

inline void PositionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_m_){0}
    , decltype(_impl_.y_m_){0}
    , decltype(_impl_.z_m_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.PositionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.PositionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_) -
      reinterpret_cast<char*>(&_impl_.x_m_)) + sizeof(_impl_.z_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.PositionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m = this->_internal_x_m();
  uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m = this->_internal_y_m();
  uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m = this->_internal_z_m();
  uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.PositionBody)
  return target;
}

size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.PositionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m = this->_internal_x_m();
  uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    total_size += 1 + 4;
  }

  // float y_m = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m = this->_internal_y_m();
  uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    total_size += 1 + 4;
  }

  // float z_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m = this->_internal_z_m();
  uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionBody::GetClassData() const { return &_class_data_; }


void PositionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionBody*>(&to_msg);
  auto& from = static_cast<const PositionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.PositionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m = from._internal_x_m();
  uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    _this->_internal_set_x_m(from._internal_x_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m = from._internal_y_m();
  uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    _this->_internal_set_y_m(from._internal_y_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m = from._internal_z_m();
  uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    _this->_internal_set_z_m(from._internal_z_m());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBody::IsInitialized() const {
  return true;
}

void PositionBody::InternalSwap(PositionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_)
      + sizeof(PositionBody::_impl_.z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_)>(
          reinterpret_cast<char*>(&_impl_.x_m_),
          reinterpret_cast<char*>(&other->_impl_.x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[8]);
}

// ===================================================================

class AngleBody::_Internal {
 public:
};

AngleBody::AngleBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AngleBody)
}
AngleBody::AngleBody(const AngleBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AngleBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_){}
    , decltype(_impl_.pitch_rad_){}
    , decltype(_impl_.yaw_rad_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_rad_, &from._impl_.roll_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_rad_) -
    reinterpret_cast<char*>(&_impl_.roll_rad_)) + sizeof(_impl_.yaw_rad_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AngleBody)
}

inline void AngleBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_){0}
    , decltype(_impl_.pitch_rad_){0}
    , decltype(_impl_.yaw_rad_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AngleBody::~AngleBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AngleBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AngleBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngleBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AngleBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AngleBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_)) + sizeof(_impl_.yaw_rad_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngleBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_rad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AngleBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AngleBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad = this->_internal_roll_rad();
  uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad(), target);
  }

  // float pitch_rad = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad = this->_internal_pitch_rad();
  uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad(), target);
  }

  // float yaw_rad = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad = this->_internal_yaw_rad();
  uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AngleBody)
  return target;
}

size_t AngleBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AngleBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad = this->_internal_roll_rad();
  uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rad = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad = this->_internal_pitch_rad();
  uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rad = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad = this->_internal_yaw_rad();
  uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngleBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AngleBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngleBody::GetClassData() const { return &_class_data_; }


void AngleBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AngleBody*>(&to_msg);
  auto& from = static_cast<const AngleBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AngleBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad = from._internal_roll_rad();
  uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    _this->_internal_set_roll_rad(from._internal_roll_rad());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad = from._internal_pitch_rad();
  uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    _this->_internal_set_pitch_rad(from._internal_pitch_rad());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad = from._internal_yaw_rad();
  uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    _this->_internal_set_yaw_rad(from._internal_yaw_rad());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngleBody::CopyFrom(const AngleBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AngleBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleBody::IsInitialized() const {
  return true;
}

void AngleBody::InternalSwap(AngleBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngleBody, _impl_.yaw_rad_)
      + sizeof(AngleBody::_impl_.yaw_rad_)
      - PROTOBUF_FIELD_OFFSET(AngleBody, _impl_.roll_rad_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngleBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[9]);
}

// ===================================================================

class SpeedBody::_Internal {
 public:
};

SpeedBody::SpeedBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SpeedBody)
}
SpeedBody::SpeedBody(const SpeedBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeedBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_m_s_){}
    , decltype(_impl_.y_m_s_){}
    , decltype(_impl_.z_m_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_m_s_, &from._impl_.x_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_m_s_) -
    reinterpret_cast<char*>(&_impl_.x_m_s_)) + sizeof(_impl_.z_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SpeedBody)
}

inline void SpeedBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_m_s_){0}
    , decltype(_impl_.y_m_s_){0}
    , decltype(_impl_.z_m_s_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpeedBody::~SpeedBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SpeedBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SpeedBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_s_) -
      reinterpret_cast<char*>(&_impl_.x_m_s_)) + sizeof(_impl_.z_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SpeedBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m_s = this->_internal_x_m_s();
  uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m_s = this->_internal_y_m_s();
  uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m_s = this->_internal_z_m_s();
  uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SpeedBody)
  return target;
}

size_t SpeedBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SpeedBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m_s = this->_internal_x_m_s();
  uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    total_size += 1 + 4;
  }

  // float y_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m_s = this->_internal_y_m_s();
  uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    total_size += 1 + 4;
  }

  // float z_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m_s = this->_internal_z_m_s();
  uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeedBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedBody::GetClassData() const { return &_class_data_; }


void SpeedBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeedBody*>(&to_msg);
  auto& from = static_cast<const SpeedBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SpeedBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_m_s = from._internal_x_m_s();
  uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    _this->_internal_set_x_m_s(from._internal_x_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_m_s = from._internal_y_m_s();
  uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    _this->_internal_set_y_m_s(from._internal_y_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_m_s = from._internal_z_m_s();
  uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    _this->_internal_set_z_m_s(from._internal_z_m_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedBody::CopyFrom(const SpeedBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SpeedBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBody::IsInitialized() const {
  return true;
}

void SpeedBody::InternalSwap(SpeedBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedBody, _impl_.z_m_s_)
      + sizeof(SpeedBody::_impl_.z_m_s_)
      - PROTOBUF_FIELD_OFFSET(SpeedBody, _impl_.x_m_s_)>(
          reinterpret_cast<char*>(&_impl_.x_m_s_),
          reinterpret_cast<char*>(&other->_impl_.x_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[10]);
}

// ===================================================================

class SpeedNed::_Internal {
 public:
};

SpeedNed::SpeedNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SpeedNed)
}
SpeedNed::SpeedNed(const SpeedNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeedNed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.north_m_s_){}
    , decltype(_impl_.east_m_s_){}
    , decltype(_impl_.down_m_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.north_m_s_, &from._impl_.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_m_s_) -
    reinterpret_cast<char*>(&_impl_.north_m_s_)) + sizeof(_impl_.down_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SpeedNed)
}

inline void SpeedNed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.north_m_s_){0}
    , decltype(_impl_.east_m_s_){0}
    , decltype(_impl_.down_m_s_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpeedNed::~SpeedNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SpeedNed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedNed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedNed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SpeedNed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_s_) -
      reinterpret_cast<char*>(&_impl_.north_m_s_)) + sizeof(_impl_.down_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedNed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedNed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SpeedNed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SpeedNed)
  return target;
}

size_t SpeedNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SpeedNed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedNed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeedNed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedNed::GetClassData() const { return &_class_data_; }


void SpeedNed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeedNed*>(&to_msg);
  auto& from = static_cast<const SpeedNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SpeedNed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = from._internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    _this->_internal_set_north_m_s(from._internal_north_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = from._internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    _this->_internal_set_east_m_s(from._internal_east_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = from._internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    _this->_internal_set_down_m_s(from._internal_down_m_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedNed::CopyFrom(const SpeedNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SpeedNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedNed::IsInitialized() const {
  return true;
}

void SpeedNed::InternalSwap(SpeedNed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedNed, _impl_.down_m_s_)
      + sizeof(SpeedNed::_impl_.down_m_s_)
      - PROTOBUF_FIELD_OFFSET(SpeedNed, _impl_.north_m_s_)>(
          reinterpret_cast<char*>(&_impl_.north_m_s_),
          reinterpret_cast<char*>(&other->_impl_.north_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedNed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[11]);
}

// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AngularVelocityBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_s_){}
    , decltype(_impl_.pitch_rad_s_){}
    , decltype(_impl_.yaw_rad_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_rad_s_, &from._impl_.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
    reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AngularVelocityBody)
}

inline void AngularVelocityBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_rad_s_){0}
    , decltype(_impl_.pitch_rad_s_){0}
    , decltype(_impl_.yaw_rad_s_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AngularVelocityBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AngularVelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngularVelocityBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AngularVelocityBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_rad_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch_rad_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_rad_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AngularVelocityBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AngularVelocityBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AngularVelocityBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngularVelocityBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AngularVelocityBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngularVelocityBody::GetClassData() const { return &_class_data_; }


void AngularVelocityBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AngularVelocityBody*>(&to_msg);
  auto& from = static_cast<const AngularVelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll_rad_s = from._internal_roll_rad_s();
  uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    _this->_internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch_rad_s = from._internal_pitch_rad_s();
  uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    _this->_internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_rad_s = from._internal_yaw_rad_s();
  uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    _this->_internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)
      + sizeof(AngularVelocityBody::_impl_.yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[12]);
}

// ===================================================================

class Covariance::_Internal {
 public:
};

Covariance::Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Covariance)
}
Covariance::Covariance(const Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Covariance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.covariance_matrix_){from._impl_.covariance_matrix_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Covariance)
}

inline void Covariance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.covariance_matrix_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Covariance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.covariance_matrix_.~RepeatedField();
}

void Covariance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Covariance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Covariance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float covariance_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_covariance_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Covariance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Covariance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Covariance)
  return target;
}

size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Covariance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Covariance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Covariance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Covariance::GetClassData() const { return &_class_data_; }


void Covariance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Covariance*>(&to_msg);
  auto& from = static_cast<const Covariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Covariance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.covariance_matrix_.MergeFrom(from._impl_.covariance_matrix_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Covariance::IsInitialized() const {
  return true;
}

void Covariance::InternalSwap(Covariance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.covariance_matrix_.InternalSwap(&other->_impl_.covariance_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Covariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[13]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Quaternion)
}

inline void Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }


void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)
      + sizeof(Quaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[14]);
}

// ===================================================================

class VisionPositionEstimate::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const VisionPositionEstimate* msg);
  static const ::mavsdk::rpc::mocap::AngleBody& angle_body(const VisionPositionEstimate* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const VisionPositionEstimate* msg);
};

const ::mavsdk::rpc::mocap::PositionBody&
VisionPositionEstimate::_Internal::position_body(const VisionPositionEstimate* msg) {
  return *msg->_impl_.position_body_;
}
const ::mavsdk::rpc::mocap::AngleBody&
VisionPositionEstimate::_Internal::angle_body(const VisionPositionEstimate* msg) {
  return *msg->_impl_.angle_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
VisionPositionEstimate::_Internal::pose_covariance(const VisionPositionEstimate* msg) {
  return *msg->_impl_.pose_covariance_;
}
VisionPositionEstimate::VisionPositionEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.VisionPositionEstimate)
}
VisionPositionEstimate::VisionPositionEstimate(const VisionPositionEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisionPositionEstimate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.angle_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.time_usec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    _this->_impl_.position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from._impl_.position_body_);
  }
  if (from._internal_has_angle_body()) {
    _this->_impl_.angle_body_ = new ::mavsdk::rpc::mocap::AngleBody(*from._impl_.angle_body_);
  }
  if (from._internal_has_pose_covariance()) {
    _this->_impl_.pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from._impl_.pose_covariance_);
  }
  _this->_impl_.time_usec_ = from._impl_.time_usec_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.VisionPositionEstimate)
}

inline void VisionPositionEstimate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.angle_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.time_usec_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VisionPositionEstimate::~VisionPositionEstimate() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.VisionPositionEstimate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisionPositionEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_body_;
  if (this != internal_default_instance()) delete _impl_.angle_body_;
  if (this != internal_default_instance()) delete _impl_.pose_covariance_;
}

void VisionPositionEstimate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisionPositionEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_body_ != nullptr) {
    delete _impl_.position_body_;
  }
  _impl_.position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angle_body_ != nullptr) {
    delete _impl_.angle_body_;
  }
  _impl_.angle_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_covariance_ != nullptr) {
    delete _impl_.pose_covariance_;
  }
  _impl_.pose_covariance_ = nullptr;
  _impl_.time_usec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionPositionEstimate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisionPositionEstimate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  if (this->_internal_has_position_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position_body(this),
        _Internal::position_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  if (this->_internal_has_angle_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::angle_body(this),
        _Internal::angle_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pose_covariance(this),
        _Internal::pose_covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.VisionPositionEstimate)
  return target;
}

size_t VisionPositionEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_body_);
  }

  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  if (this->_internal_has_angle_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angle_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_usec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionPositionEstimate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisionPositionEstimate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionPositionEstimate::GetClassData() const { return &_class_data_; }


void VisionPositionEstimate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisionPositionEstimate*>(&to_msg);
  auto& from = static_cast<const VisionPositionEstimate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_body()) {
    _this->_internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(
        from._internal_position_body());
  }
  if (from._internal_has_angle_body()) {
    _this->_internal_mutable_angle_body()->::mavsdk::rpc::mocap::AngleBody::MergeFrom(
        from._internal_angle_body());
  }
  if (from._internal_has_pose_covariance()) {
    _this->_internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(
        from._internal_pose_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _this->_internal_set_time_usec(from._internal_time_usec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionPositionEstimate::CopyFrom(const VisionPositionEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionPositionEstimate::IsInitialized() const {
  return true;
}

void VisionPositionEstimate::InternalSwap(VisionPositionEstimate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionPositionEstimate, _impl_.time_usec_)
      + sizeof(VisionPositionEstimate::_impl_.time_usec_)
      - PROTOBUF_FIELD_OFFSET(VisionPositionEstimate, _impl_.position_body_)>(
          reinterpret_cast<char*>(&_impl_.position_body_),
          reinterpret_cast<char*>(&other->_impl_.position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionPositionEstimate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[15]);
}

// ===================================================================

class VisionSpeedEstimate::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::SpeedNed& speed_ned(const VisionSpeedEstimate* msg);
  static const ::mavsdk::rpc::mocap::Covariance& speed_covariance(const VisionSpeedEstimate* msg);
};

const ::mavsdk::rpc::mocap::SpeedNed&
VisionSpeedEstimate::_Internal::speed_ned(const VisionSpeedEstimate* msg) {
  return *msg->_impl_.speed_ned_;
}
const ::mavsdk::rpc::mocap::Covariance&
VisionSpeedEstimate::_Internal::speed_covariance(const VisionSpeedEstimate* msg) {
  return *msg->_impl_.speed_covariance_;
}
VisionSpeedEstimate::VisionSpeedEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.VisionSpeedEstimate)
}
VisionSpeedEstimate::VisionSpeedEstimate(const VisionSpeedEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisionSpeedEstimate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_ned_){nullptr}
    , decltype(_impl_.speed_covariance_){nullptr}
    , decltype(_impl_.time_usec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speed_ned()) {
    _this->_impl_.speed_ned_ = new ::mavsdk::rpc::mocap::SpeedNed(*from._impl_.speed_ned_);
  }
  if (from._internal_has_speed_covariance()) {
    _this->_impl_.speed_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from._impl_.speed_covariance_);
  }
  _this->_impl_.time_usec_ = from._impl_.time_usec_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.VisionSpeedEstimate)
}

inline void VisionSpeedEstimate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_ned_){nullptr}
    , decltype(_impl_.speed_covariance_){nullptr}
    , decltype(_impl_.time_usec_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VisionSpeedEstimate::~VisionSpeedEstimate() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.VisionSpeedEstimate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisionSpeedEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.speed_ned_;
  if (this != internal_default_instance()) delete _impl_.speed_covariance_;
}

void VisionSpeedEstimate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisionSpeedEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.VisionSpeedEstimate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.speed_ned_ != nullptr) {
    delete _impl_.speed_ned_;
  }
  _impl_.speed_ned_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.speed_covariance_ != nullptr) {
    delete _impl_.speed_covariance_;
  }
  _impl_.speed_covariance_ = nullptr;
  _impl_.time_usec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionSpeedEstimate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.SpeedNed speed_ned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_ned(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance speed_covariance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisionSpeedEstimate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.VisionSpeedEstimate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.SpeedNed speed_ned = 2;
  if (this->_internal_has_speed_ned()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::speed_ned(this),
        _Internal::speed_ned(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance speed_covariance = 3;
  if (this->_internal_has_speed_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::speed_covariance(this),
        _Internal::speed_covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.VisionSpeedEstimate)
  return target;
}

size_t VisionSpeedEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.VisionSpeedEstimate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.SpeedNed speed_ned = 2;
  if (this->_internal_has_speed_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speed_ned_);
  }

  // .mavsdk.rpc.mocap.Covariance speed_covariance = 3;
  if (this->_internal_has_speed_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speed_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_usec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionSpeedEstimate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisionSpeedEstimate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionSpeedEstimate::GetClassData() const { return &_class_data_; }


void VisionSpeedEstimate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisionSpeedEstimate*>(&to_msg);
  auto& from = static_cast<const VisionSpeedEstimate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.VisionSpeedEstimate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_speed_ned()) {
    _this->_internal_mutable_speed_ned()->::mavsdk::rpc::mocap::SpeedNed::MergeFrom(
        from._internal_speed_ned());
  }
  if (from._internal_has_speed_covariance()) {
    _this->_internal_mutable_speed_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(
        from._internal_speed_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _this->_internal_set_time_usec(from._internal_time_usec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionSpeedEstimate::CopyFrom(const VisionSpeedEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.VisionSpeedEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionSpeedEstimate::IsInitialized() const {
  return true;
}

void VisionSpeedEstimate::InternalSwap(VisionSpeedEstimate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionSpeedEstimate, _impl_.time_usec_)
      + sizeof(VisionSpeedEstimate::_impl_.time_usec_)
      - PROTOBUF_FIELD_OFFSET(VisionSpeedEstimate, _impl_.speed_ned_)>(
          reinterpret_cast<char*>(&_impl_.speed_ned_),
          reinterpret_cast<char*>(&other->_impl_.speed_ned_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionSpeedEstimate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[16]);
}

// ===================================================================

class AttitudePositionMocap::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::Quaternion& q(const AttitudePositionMocap* msg);
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const AttitudePositionMocap* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const AttitudePositionMocap* msg);
};

const ::mavsdk::rpc::mocap::Quaternion&
AttitudePositionMocap::_Internal::q(const AttitudePositionMocap* msg) {
  return *msg->_impl_.q_;
}
const ::mavsdk::rpc::mocap::PositionBody&
AttitudePositionMocap::_Internal::position_body(const AttitudePositionMocap* msg) {
  return *msg->_impl_.position_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
AttitudePositionMocap::_Internal::pose_covariance(const AttitudePositionMocap* msg) {
  return *msg->_impl_.pose_covariance_;
}
AttitudePositionMocap::AttitudePositionMocap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AttitudePositionMocap)
}
AttitudePositionMocap::AttitudePositionMocap(const AttitudePositionMocap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttitudePositionMocap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){nullptr}
    , decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.time_usec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::mavsdk::rpc::mocap::Quaternion(*from._impl_.q_);
  }
  if (from._internal_has_position_body()) {
    _this->_impl_.position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from._impl_.position_body_);
  }
  if (from._internal_has_pose_covariance()) {
    _this->_impl_.pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from._impl_.pose_covariance_);
  }
  _this->_impl_.time_usec_ = from._impl_.time_usec_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AttitudePositionMocap)
}

inline void AttitudePositionMocap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){nullptr}
    , decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.time_usec_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttitudePositionMocap::~AttitudePositionMocap() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AttitudePositionMocap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttitudePositionMocap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.q_;
  if (this != internal_default_instance()) delete _impl_.position_body_;
  if (this != internal_default_instance()) delete _impl_.pose_covariance_;
}

void AttitudePositionMocap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttitudePositionMocap::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_body_ != nullptr) {
    delete _impl_.position_body_;
  }
  _impl_.position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_covariance_ != nullptr) {
    delete _impl_.pose_covariance_;
  }
  _impl_.pose_covariance_ = nullptr;
  _impl_.time_usec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudePositionMocap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Quaternion q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttitudePositionMocap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 2;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position_body(this),
        _Internal::position_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pose_covariance(this),
        _Internal::pose_covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AttitudePositionMocap)
  return target;
}

size_t AttitudePositionMocap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Quaternion q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_usec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttitudePositionMocap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttitudePositionMocap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttitudePositionMocap::GetClassData() const { return &_class_data_; }


void AttitudePositionMocap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttitudePositionMocap*>(&to_msg);
  auto& from = static_cast<const AttitudePositionMocap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::mavsdk::rpc::mocap::Quaternion::MergeFrom(
        from._internal_q());
  }
  if (from._internal_has_position_body()) {
    _this->_internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(
        from._internal_position_body());
  }
  if (from._internal_has_pose_covariance()) {
    _this->_internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(
        from._internal_pose_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _this->_internal_set_time_usec(from._internal_time_usec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudePositionMocap::CopyFrom(const AttitudePositionMocap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudePositionMocap::IsInitialized() const {
  return true;
}

void AttitudePositionMocap::InternalSwap(AttitudePositionMocap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttitudePositionMocap, _impl_.time_usec_)
      + sizeof(AttitudePositionMocap::_impl_.time_usec_)
      - PROTOBUF_FIELD_OFFSET(AttitudePositionMocap, _impl_.q_)>(
          reinterpret_cast<char*>(&_impl_.q_),
          reinterpret_cast<char*>(&other->_impl_.q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudePositionMocap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[17]);
}

// ===================================================================

class Odometry::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Quaternion& q(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::SpeedBody& speed_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Covariance& velocity_covariance(const Odometry* msg);
};

const ::mavsdk::rpc::mocap::PositionBody&
Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->_impl_.position_body_;
}
const ::mavsdk::rpc::mocap::Quaternion&
Odometry::_Internal::q(const Odometry* msg) {
  return *msg->_impl_.q_;
}
const ::mavsdk::rpc::mocap::SpeedBody&
Odometry::_Internal::speed_body(const Odometry* msg) {
  return *msg->_impl_.speed_body_;
}
const ::mavsdk::rpc::mocap::AngularVelocityBody&
Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->_impl_.angular_velocity_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->_impl_.pose_covariance_;
}
const ::mavsdk::rpc::mocap::Covariance&
Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->_impl_.velocity_covariance_;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Odometry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , decltype(_impl_.speed_body_){nullptr}
    , decltype(_impl_.angular_velocity_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.velocity_covariance_){nullptr}
    , decltype(_impl_.time_usec_){}
    , decltype(_impl_.frame_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    _this->_impl_.position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from._impl_.position_body_);
  }
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::mavsdk::rpc::mocap::Quaternion(*from._impl_.q_);
  }
  if (from._internal_has_speed_body()) {
    _this->_impl_.speed_body_ = new ::mavsdk::rpc::mocap::SpeedBody(*from._impl_.speed_body_);
  }
  if (from._internal_has_angular_velocity_body()) {
    _this->_impl_.angular_velocity_body_ = new ::mavsdk::rpc::mocap::AngularVelocityBody(*from._impl_.angular_velocity_body_);
  }
  if (from._internal_has_pose_covariance()) {
    _this->_impl_.pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from._impl_.pose_covariance_);
  }
  if (from._internal_has_velocity_covariance()) {
    _this->_impl_.velocity_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from._impl_.velocity_covariance_);
  }
  ::memcpy(&_impl_.time_usec_, &from._impl_.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_id_) -
    reinterpret_cast<char*>(&_impl_.time_usec_)) + sizeof(_impl_.frame_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Odometry)
}

inline void Odometry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_body_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , decltype(_impl_.speed_body_){nullptr}
    , decltype(_impl_.angular_velocity_body_){nullptr}
    , decltype(_impl_.pose_covariance_){nullptr}
    , decltype(_impl_.velocity_covariance_){nullptr}
    , decltype(_impl_.time_usec_){uint64_t{0u}}
    , decltype(_impl_.frame_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Odometry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_body_;
  if (this != internal_default_instance()) delete _impl_.q_;
  if (this != internal_default_instance()) delete _impl_.speed_body_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_body_;
  if (this != internal_default_instance()) delete _impl_.pose_covariance_;
  if (this != internal_default_instance()) delete _impl_.velocity_covariance_;
}

void Odometry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Odometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_body_ != nullptr) {
    delete _impl_.position_body_;
  }
  _impl_.position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.speed_body_ != nullptr) {
    delete _impl_.speed_body_;
  }
  _impl_.speed_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_body_ != nullptr) {
    delete _impl_.angular_velocity_body_;
  }
  _impl_.angular_velocity_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_covariance_ != nullptr) {
    delete _impl_.pose_covariance_;
  }
  _impl_.pose_covariance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_covariance_ != nullptr) {
    delete _impl_.velocity_covariance_;
  }
  _impl_.velocity_covariance_ = nullptr;
  ::memset(&_impl_.time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_id_) -
      reinterpret_cast<char*>(&_impl_.time_usec_)) + sizeof(_impl_.frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_id(static_cast<::mavsdk::rpc::mocap::Odometry_MavFrame>(val));
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Quaternion q = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Odometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Odometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position_body(this),
        _Internal::position_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 4;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  if (this->_internal_has_speed_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::speed_body(this),
        _Internal::speed_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  if (this->_internal_has_angular_velocity_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::angular_velocity_body(this),
        _Internal::angular_velocity_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  if (this->_internal_has_pose_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pose_covariance(this),
        _Internal::pose_covariance(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  if (this->_internal_has_velocity_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::velocity_covariance(this),
        _Internal::velocity_covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Odometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_body_);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 4;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  if (this->_internal_has_speed_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speed_body_);
  }

  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  if (this->_internal_has_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_velocity_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_covariance_);
  }

  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  if (this->_internal_has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_usec());
  }

  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Odometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Odometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Odometry::GetClassData() const { return &_class_data_; }


void Odometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Odometry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_body()) {
    _this->_internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(
        from._internal_position_body());
  }
  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::mavsdk::rpc::mocap::Quaternion::MergeFrom(
        from._internal_q());
  }
  if (from._internal_has_speed_body()) {
    _this->_internal_mutable_speed_body()->::mavsdk::rpc::mocap::SpeedBody::MergeFrom(
        from._internal_speed_body());
  }
  if (from._internal_has_angular_velocity_body()) {
    _this->_internal_mutable_angular_velocity_body()->::mavsdk::rpc::mocap::AngularVelocityBody::MergeFrom(
        from._internal_angular_velocity_body());
  }
  if (from._internal_has_pose_covariance()) {
    _this->_internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(
        from._internal_pose_covariance());
  }
  if (from._internal_has_velocity_covariance()) {
    _this->_internal_mutable_velocity_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(
        from._internal_velocity_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _this->_internal_set_time_usec(from._internal_time_usec());
  }
  if (from._internal_frame_id() != 0) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.frame_id_)
      + sizeof(Odometry::_impl_.frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_)>(
          reinterpret_cast<char*>(&_impl_.position_body_),
          reinterpret_cast<char*>(&other->_impl_.position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[18]);
}

// ===================================================================

class MocapResult::_Internal {
 public:
};

MocapResult::MocapResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.MocapResult)
}
MocapResult::MocapResult(const MocapResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MocapResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.MocapResult)
}

inline void MocapResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MocapResult::~MocapResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.MocapResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MocapResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void MocapResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MocapResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.MocapResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MocapResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::mocap::MocapResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.mocap.MocapResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MocapResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.MocapResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.mocap.MocapResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.MocapResult)
  return target;
}

size_t MocapResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.MocapResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MocapResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MocapResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MocapResult::GetClassData() const { return &_class_data_; }


void MocapResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MocapResult*>(&to_msg);
  auto& from = static_cast<const MocapResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.MocapResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MocapResult::CopyFrom(const MocapResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.MocapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocapResult::IsInitialized() const {
  return true;
}

void MocapResult::InternalSwap(MocapResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_str_, lhs_arena,
      &other->_impl_.result_str_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MocapResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetOdometryRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetOdometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetOdometryResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetOdometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetOdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::PositionBody*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::PositionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::PositionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AngleBody*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AngleBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AngleBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SpeedBody*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SpeedBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SpeedBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SpeedNed*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SpeedNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SpeedNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AngularVelocityBody*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Covariance*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Quaternion*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::VisionPositionEstimate*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::VisionPositionEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::VisionPositionEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::VisionSpeedEstimate*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::VisionSpeedEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::VisionSpeedEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AttitudePositionMocap*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AttitudePositionMocap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AttitudePositionMocap >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Odometry*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::MocapResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::MocapResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::MocapResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
