// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: striker/striker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_striker_2fstriker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_striker_2fstriker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_striker_2fstriker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_striker_2fstriker_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_striker_2fstriker_2eproto;
namespace mavsdk {
namespace rpc {
namespace striker {
class BatteryVoltages;
struct BatteryVoltagesDefaultTypeInternal;
extern BatteryVoltagesDefaultTypeInternal _BatteryVoltages_default_instance_;
class BatteryVoltagesResponse;
struct BatteryVoltagesResponseDefaultTypeInternal;
extern BatteryVoltagesResponseDefaultTypeInternal _BatteryVoltagesResponse_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class Magnitometer;
struct MagnitometerDefaultTypeInternal;
extern MagnitometerDefaultTypeInternal _Magnitometer_default_instance_;
class MagnitometerResponse;
struct MagnitometerResponseDefaultTypeInternal;
extern MagnitometerResponseDefaultTypeInternal _MagnitometerResponse_default_instance_;
class RcChannel;
struct RcChannelDefaultTypeInternal;
extern RcChannelDefaultTypeInternal _RcChannel_default_instance_;
class RcChannelResponse;
struct RcChannelResponseDefaultTypeInternal;
extern RcChannelResponseDefaultTypeInternal _RcChannelResponse_default_instance_;
class SubscribeBatteryVoltagesRequest;
struct SubscribeBatteryVoltagesRequestDefaultTypeInternal;
extern SubscribeBatteryVoltagesRequestDefaultTypeInternal _SubscribeBatteryVoltagesRequest_default_instance_;
class SubscribeHeartbeatRequest;
struct SubscribeHeartbeatRequestDefaultTypeInternal;
extern SubscribeHeartbeatRequestDefaultTypeInternal _SubscribeHeartbeatRequest_default_instance_;
class SubscribeMagnitometerRequest;
struct SubscribeMagnitometerRequestDefaultTypeInternal;
extern SubscribeMagnitometerRequestDefaultTypeInternal _SubscribeMagnitometerRequest_default_instance_;
class SubscribeRcChannelRequest;
struct SubscribeRcChannelRequestDefaultTypeInternal;
extern SubscribeRcChannelRequestDefaultTypeInternal _SubscribeRcChannelRequest_default_instance_;
class SubscribeSysStatusRequest;
struct SubscribeSysStatusRequestDefaultTypeInternal;
extern SubscribeSysStatusRequestDefaultTypeInternal _SubscribeSysStatusRequest_default_instance_;
class SysStatus;
struct SysStatusDefaultTypeInternal;
extern SysStatusDefaultTypeInternal _SysStatus_default_instance_;
class SysStatusResponse;
struct SysStatusResponseDefaultTypeInternal;
extern SysStatusResponseDefaultTypeInternal _SysStatusResponse_default_instance_;
}  // namespace striker
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::striker::BatteryVoltages* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::BatteryVoltages>(Arena*);
template<> ::mavsdk::rpc::striker::BatteryVoltagesResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::BatteryVoltagesResponse>(Arena*);
template<> ::mavsdk::rpc::striker::Heartbeat* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::Heartbeat>(Arena*);
template<> ::mavsdk::rpc::striker::HeartbeatResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::HeartbeatResponse>(Arena*);
template<> ::mavsdk::rpc::striker::Magnitometer* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::Magnitometer>(Arena*);
template<> ::mavsdk::rpc::striker::MagnitometerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::MagnitometerResponse>(Arena*);
template<> ::mavsdk::rpc::striker::RcChannel* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::RcChannel>(Arena*);
template<> ::mavsdk::rpc::striker::RcChannelResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::RcChannelResponse>(Arena*);
template<> ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest>(Arena*);
template<> ::mavsdk::rpc::striker::SubscribeHeartbeatRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SubscribeHeartbeatRequest>(Arena*);
template<> ::mavsdk::rpc::striker::SubscribeMagnitometerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SubscribeMagnitometerRequest>(Arena*);
template<> ::mavsdk::rpc::striker::SubscribeRcChannelRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SubscribeRcChannelRequest>(Arena*);
template<> ::mavsdk::rpc::striker::SubscribeSysStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SubscribeSysStatusRequest>(Arena*);
template<> ::mavsdk::rpc::striker::SysStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SysStatus>(Arena*);
template<> ::mavsdk::rpc::striker::SysStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::striker::SysStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace striker {

// ===================================================================

class SubscribeHeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SubscribeHeartbeatRequest) */ {
 public:
  inline SubscribeHeartbeatRequest() : SubscribeHeartbeatRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeHeartbeatRequest(const SubscribeHeartbeatRequest& from);
  SubscribeHeartbeatRequest(SubscribeHeartbeatRequest&& from) noexcept
    : SubscribeHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHeartbeatRequest& operator=(const SubscribeHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHeartbeatRequest& operator=(SubscribeHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHeartbeatRequest*>(
               &_SubscribeHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeHeartbeatRequest& a, SubscribeHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeHeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeHeartbeatRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeHeartbeatRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SubscribeHeartbeatRequest";
  }
  protected:
  explicit SubscribeHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SubscribeHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  ~HeartbeatResponse() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatResponse(const HeartbeatResponse& from);
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatResponse& from) {
    HeartbeatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.HeartbeatResponse";
  }
  protected:
  explicit HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
  };
  // .mavsdk.rpc.striker.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::mavsdk::rpc::striker::Heartbeat& heartbeat() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::striker::Heartbeat* release_heartbeat();
  ::mavsdk::rpc::striker::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::mavsdk::rpc::striker::Heartbeat* heartbeat);
  private:
  const ::mavsdk::rpc::striker::Heartbeat& _internal_heartbeat() const;
  ::mavsdk::rpc::striker::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::mavsdk::rpc::striker::Heartbeat* heartbeat);
  ::mavsdk::rpc::striker::Heartbeat* unsafe_arena_release_heartbeat();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.HeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::striker::Heartbeat* heartbeat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SubscribeSysStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SubscribeSysStatusRequest) */ {
 public:
  inline SubscribeSysStatusRequest() : SubscribeSysStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeSysStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeSysStatusRequest(const SubscribeSysStatusRequest& from);
  SubscribeSysStatusRequest(SubscribeSysStatusRequest&& from) noexcept
    : SubscribeSysStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSysStatusRequest& operator=(const SubscribeSysStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSysStatusRequest& operator=(SubscribeSysStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeSysStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeSysStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSysStatusRequest*>(
               &_SubscribeSysStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeSysStatusRequest& a, SubscribeSysStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSysStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeSysStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeSysStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeSysStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeSysStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeSysStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SubscribeSysStatusRequest";
  }
  protected:
  explicit SubscribeSysStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SubscribeSysStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SysStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SysStatusResponse) */ {
 public:
  inline SysStatusResponse() : SysStatusResponse(nullptr) {}
  ~SysStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR SysStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStatusResponse(const SysStatusResponse& from);
  SysStatusResponse(SysStatusResponse&& from) noexcept
    : SysStatusResponse() {
    *this = ::std::move(from);
  }

  inline SysStatusResponse& operator=(const SysStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStatusResponse& operator=(SysStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SysStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SysStatusResponse*>(
               &_SysStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SysStatusResponse& a, SysStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SysStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SysStatusResponse& from) {
    SysStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SysStatusResponse";
  }
  protected:
  explicit SysStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.striker.SysStatus sys_status = 1;
  bool has_sys_status() const;
  private:
  bool _internal_has_sys_status() const;
  public:
  void clear_sys_status();
  const ::mavsdk::rpc::striker::SysStatus& sys_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::striker::SysStatus* release_sys_status();
  ::mavsdk::rpc::striker::SysStatus* mutable_sys_status();
  void set_allocated_sys_status(::mavsdk::rpc::striker::SysStatus* sys_status);
  private:
  const ::mavsdk::rpc::striker::SysStatus& _internal_sys_status() const;
  ::mavsdk::rpc::striker::SysStatus* _internal_mutable_sys_status();
  public:
  void unsafe_arena_set_allocated_sys_status(
      ::mavsdk::rpc::striker::SysStatus* sys_status);
  ::mavsdk::rpc::striker::SysStatus* unsafe_arena_release_sys_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SysStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::striker::SysStatus* sys_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRcChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SubscribeRcChannelRequest) */ {
 public:
  inline SubscribeRcChannelRequest() : SubscribeRcChannelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeRcChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRcChannelRequest(const SubscribeRcChannelRequest& from);
  SubscribeRcChannelRequest(SubscribeRcChannelRequest&& from) noexcept
    : SubscribeRcChannelRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRcChannelRequest& operator=(const SubscribeRcChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRcChannelRequest& operator=(SubscribeRcChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRcChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRcChannelRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRcChannelRequest*>(
               &_SubscribeRcChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeRcChannelRequest& a, SubscribeRcChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRcChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRcChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRcChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRcChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeRcChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeRcChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SubscribeRcChannelRequest";
  }
  protected:
  explicit SubscribeRcChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SubscribeRcChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class RcChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.RcChannelResponse) */ {
 public:
  inline RcChannelResponse() : RcChannelResponse(nullptr) {}
  ~RcChannelResponse() override;
  explicit PROTOBUF_CONSTEXPR RcChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcChannelResponse(const RcChannelResponse& from);
  RcChannelResponse(RcChannelResponse&& from) noexcept
    : RcChannelResponse() {
    *this = ::std::move(from);
  }

  inline RcChannelResponse& operator=(const RcChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcChannelResponse& operator=(RcChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcChannelResponse* internal_default_instance() {
    return reinterpret_cast<const RcChannelResponse*>(
               &_RcChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RcChannelResponse& a, RcChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RcChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcChannelResponse& from) {
    RcChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.RcChannelResponse";
  }
  protected:
  explicit RcChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcChannelFieldNumber = 1,
  };
  // .mavsdk.rpc.striker.RcChannel rc_channel = 1;
  bool has_rc_channel() const;
  private:
  bool _internal_has_rc_channel() const;
  public:
  void clear_rc_channel();
  const ::mavsdk::rpc::striker::RcChannel& rc_channel() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::striker::RcChannel* release_rc_channel();
  ::mavsdk::rpc::striker::RcChannel* mutable_rc_channel();
  void set_allocated_rc_channel(::mavsdk::rpc::striker::RcChannel* rc_channel);
  private:
  const ::mavsdk::rpc::striker::RcChannel& _internal_rc_channel() const;
  ::mavsdk::rpc::striker::RcChannel* _internal_mutable_rc_channel();
  public:
  void unsafe_arena_set_allocated_rc_channel(
      ::mavsdk::rpc::striker::RcChannel* rc_channel);
  ::mavsdk::rpc::striker::RcChannel* unsafe_arena_release_rc_channel();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.RcChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::striker::RcChannel* rc_channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMagnitometerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SubscribeMagnitometerRequest) */ {
 public:
  inline SubscribeMagnitometerRequest() : SubscribeMagnitometerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeMagnitometerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeMagnitometerRequest(const SubscribeMagnitometerRequest& from);
  SubscribeMagnitometerRequest(SubscribeMagnitometerRequest&& from) noexcept
    : SubscribeMagnitometerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMagnitometerRequest& operator=(const SubscribeMagnitometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMagnitometerRequest& operator=(SubscribeMagnitometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeMagnitometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeMagnitometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMagnitometerRequest*>(
               &_SubscribeMagnitometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeMagnitometerRequest& a, SubscribeMagnitometerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMagnitometerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMagnitometerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeMagnitometerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeMagnitometerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeMagnitometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeMagnitometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SubscribeMagnitometerRequest";
  }
  protected:
  explicit SubscribeMagnitometerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SubscribeMagnitometerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class MagnitometerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.MagnitometerResponse) */ {
 public:
  inline MagnitometerResponse() : MagnitometerResponse(nullptr) {}
  ~MagnitometerResponse() override;
  explicit PROTOBUF_CONSTEXPR MagnitometerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MagnitometerResponse(const MagnitometerResponse& from);
  MagnitometerResponse(MagnitometerResponse&& from) noexcept
    : MagnitometerResponse() {
    *this = ::std::move(from);
  }

  inline MagnitometerResponse& operator=(const MagnitometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagnitometerResponse& operator=(MagnitometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagnitometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagnitometerResponse* internal_default_instance() {
    return reinterpret_cast<const MagnitometerResponse*>(
               &_MagnitometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MagnitometerResponse& a, MagnitometerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MagnitometerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagnitometerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagnitometerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MagnitometerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MagnitometerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MagnitometerResponse& from) {
    MagnitometerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagnitometerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.MagnitometerResponse";
  }
  protected:
  explicit MagnitometerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagnitometerFieldNumber = 1,
  };
  // .mavsdk.rpc.striker.Magnitometer magnitometer = 1;
  bool has_magnitometer() const;
  private:
  bool _internal_has_magnitometer() const;
  public:
  void clear_magnitometer();
  const ::mavsdk::rpc::striker::Magnitometer& magnitometer() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::striker::Magnitometer* release_magnitometer();
  ::mavsdk::rpc::striker::Magnitometer* mutable_magnitometer();
  void set_allocated_magnitometer(::mavsdk::rpc::striker::Magnitometer* magnitometer);
  private:
  const ::mavsdk::rpc::striker::Magnitometer& _internal_magnitometer() const;
  ::mavsdk::rpc::striker::Magnitometer* _internal_mutable_magnitometer();
  public:
  void unsafe_arena_set_allocated_magnitometer(
      ::mavsdk::rpc::striker::Magnitometer* magnitometer);
  ::mavsdk::rpc::striker::Magnitometer* unsafe_arena_release_magnitometer();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.MagnitometerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::striker::Magnitometer* magnitometer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBatteryVoltagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SubscribeBatteryVoltagesRequest) */ {
 public:
  inline SubscribeBatteryVoltagesRequest() : SubscribeBatteryVoltagesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeBatteryVoltagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeBatteryVoltagesRequest(const SubscribeBatteryVoltagesRequest& from);
  SubscribeBatteryVoltagesRequest(SubscribeBatteryVoltagesRequest&& from) noexcept
    : SubscribeBatteryVoltagesRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeBatteryVoltagesRequest& operator=(const SubscribeBatteryVoltagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBatteryVoltagesRequest& operator=(SubscribeBatteryVoltagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeBatteryVoltagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeBatteryVoltagesRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeBatteryVoltagesRequest*>(
               &_SubscribeBatteryVoltagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeBatteryVoltagesRequest& a, SubscribeBatteryVoltagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBatteryVoltagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeBatteryVoltagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeBatteryVoltagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeBatteryVoltagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeBatteryVoltagesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeBatteryVoltagesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SubscribeBatteryVoltagesRequest";
  }
  protected:
  explicit SubscribeBatteryVoltagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SubscribeBatteryVoltagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class BatteryVoltagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.BatteryVoltagesResponse) */ {
 public:
  inline BatteryVoltagesResponse() : BatteryVoltagesResponse(nullptr) {}
  ~BatteryVoltagesResponse() override;
  explicit PROTOBUF_CONSTEXPR BatteryVoltagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryVoltagesResponse(const BatteryVoltagesResponse& from);
  BatteryVoltagesResponse(BatteryVoltagesResponse&& from) noexcept
    : BatteryVoltagesResponse() {
    *this = ::std::move(from);
  }

  inline BatteryVoltagesResponse& operator=(const BatteryVoltagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryVoltagesResponse& operator=(BatteryVoltagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryVoltagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryVoltagesResponse* internal_default_instance() {
    return reinterpret_cast<const BatteryVoltagesResponse*>(
               &_BatteryVoltagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BatteryVoltagesResponse& a, BatteryVoltagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryVoltagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryVoltagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryVoltagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryVoltagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryVoltagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryVoltagesResponse& from) {
    BatteryVoltagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryVoltagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.BatteryVoltagesResponse";
  }
  protected:
  explicit BatteryVoltagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryVoltagesFieldNumber = 1,
  };
  // .mavsdk.rpc.striker.BatteryVoltages battery_voltages = 1;
  bool has_battery_voltages() const;
  private:
  bool _internal_has_battery_voltages() const;
  public:
  void clear_battery_voltages();
  const ::mavsdk::rpc::striker::BatteryVoltages& battery_voltages() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::striker::BatteryVoltages* release_battery_voltages();
  ::mavsdk::rpc::striker::BatteryVoltages* mutable_battery_voltages();
  void set_allocated_battery_voltages(::mavsdk::rpc::striker::BatteryVoltages* battery_voltages);
  private:
  const ::mavsdk::rpc::striker::BatteryVoltages& _internal_battery_voltages() const;
  ::mavsdk::rpc::striker::BatteryVoltages* _internal_mutable_battery_voltages();
  public:
  void unsafe_arena_set_allocated_battery_voltages(
      ::mavsdk::rpc::striker::BatteryVoltages* battery_voltages);
  ::mavsdk::rpc::striker::BatteryVoltages* unsafe_arena_release_battery_voltages();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.BatteryVoltagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mavsdk::rpc::striker::BatteryVoltages* battery_voltages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heartbeat& from) {
    Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomModeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAutopilotFieldNumber = 3,
    kBaseModeFieldNumber = 4,
    kSystemStatusFieldNumber = 5,
    kMavlinkVersionFieldNumber = 6,
  };
  // uint32 custom_mode = 1;
  void clear_custom_mode();
  uint32_t custom_mode() const;
  void set_custom_mode(uint32_t value);
  private:
  uint32_t _internal_custom_mode() const;
  void _internal_set_custom_mode(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 autopilot = 3;
  void clear_autopilot();
  uint32_t autopilot() const;
  void set_autopilot(uint32_t value);
  private:
  uint32_t _internal_autopilot() const;
  void _internal_set_autopilot(uint32_t value);
  public:

  // uint32 base_mode = 4;
  void clear_base_mode();
  uint32_t base_mode() const;
  void set_base_mode(uint32_t value);
  private:
  uint32_t _internal_base_mode() const;
  void _internal_set_base_mode(uint32_t value);
  public:

  // uint32 system_status = 5;
  void clear_system_status();
  uint32_t system_status() const;
  void set_system_status(uint32_t value);
  private:
  uint32_t _internal_system_status() const;
  void _internal_set_system_status(uint32_t value);
  public:

  // uint32 mavlink_version = 6;
  void clear_mavlink_version();
  uint32_t mavlink_version() const;
  void set_mavlink_version(uint32_t value);
  private:
  uint32_t _internal_mavlink_version() const;
  void _internal_set_mavlink_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t custom_mode_;
    uint32_t type_;
    uint32_t autopilot_;
    uint32_t base_mode_;
    uint32_t system_status_;
    uint32_t mavlink_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class SysStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.SysStatus) */ {
 public:
  inline SysStatus() : SysStatus(nullptr) {}
  ~SysStatus() override;
  explicit PROTOBUF_CONSTEXPR SysStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStatus(const SysStatus& from);
  SysStatus(SysStatus&& from) noexcept
    : SysStatus() {
    *this = ::std::move(from);
  }

  inline SysStatus& operator=(const SysStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStatus& operator=(SysStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SysStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStatus* internal_default_instance() {
    return reinterpret_cast<const SysStatus*>(
               &_SysStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SysStatus& a, SysStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SysStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SysStatus& from) {
    SysStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.SysStatus";
  }
  protected:
  explicit SysStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnboardControlSensorsPresentFieldNumber = 1,
    kOnboardControlSensorsEnabledFieldNumber = 2,
    kOnboardControlSensorsHealthFieldNumber = 3,
    kLoadFieldNumber = 4,
    kVoltageBatteryFieldNumber = 5,
    kCurrentBatteryFieldNumber = 6,
    kDropRateCommFieldNumber = 7,
    kErrorsCommFieldNumber = 8,
    kErrorsCount1FieldNumber = 9,
    kErrorsCount2FieldNumber = 10,
    kErrorsCount3FieldNumber = 11,
    kErrorsCount4FieldNumber = 12,
    kBatteryRemainingFieldNumber = 13,
    kOnboardControlSensorsPresentExtendedFieldNumber = 14,
    kOnboardControlSensorsEnabledExtendedFieldNumber = 15,
    kOnboardControlSensorsHealthExtendedFieldNumber = 16,
  };
  // uint32 onboard_control_sensors_present = 1;
  void clear_onboard_control_sensors_present();
  uint32_t onboard_control_sensors_present() const;
  void set_onboard_control_sensors_present(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_present() const;
  void _internal_set_onboard_control_sensors_present(uint32_t value);
  public:

  // uint32 onboard_control_sensors_enabled = 2;
  void clear_onboard_control_sensors_enabled();
  uint32_t onboard_control_sensors_enabled() const;
  void set_onboard_control_sensors_enabled(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_enabled() const;
  void _internal_set_onboard_control_sensors_enabled(uint32_t value);
  public:

  // uint32 onboard_control_sensors_health = 3;
  void clear_onboard_control_sensors_health();
  uint32_t onboard_control_sensors_health() const;
  void set_onboard_control_sensors_health(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_health() const;
  void _internal_set_onboard_control_sensors_health(uint32_t value);
  public:

  // uint32 load = 4;
  void clear_load();
  uint32_t load() const;
  void set_load(uint32_t value);
  private:
  uint32_t _internal_load() const;
  void _internal_set_load(uint32_t value);
  public:

  // uint32 voltage_battery = 5;
  void clear_voltage_battery();
  uint32_t voltage_battery() const;
  void set_voltage_battery(uint32_t value);
  private:
  uint32_t _internal_voltage_battery() const;
  void _internal_set_voltage_battery(uint32_t value);
  public:

  // int32 current_battery = 6;
  void clear_current_battery();
  int32_t current_battery() const;
  void set_current_battery(int32_t value);
  private:
  int32_t _internal_current_battery() const;
  void _internal_set_current_battery(int32_t value);
  public:

  // uint32 drop_rate_comm = 7;
  void clear_drop_rate_comm();
  uint32_t drop_rate_comm() const;
  void set_drop_rate_comm(uint32_t value);
  private:
  uint32_t _internal_drop_rate_comm() const;
  void _internal_set_drop_rate_comm(uint32_t value);
  public:

  // uint32 errors_comm = 8;
  void clear_errors_comm();
  uint32_t errors_comm() const;
  void set_errors_comm(uint32_t value);
  private:
  uint32_t _internal_errors_comm() const;
  void _internal_set_errors_comm(uint32_t value);
  public:

  // uint32 errors_count1 = 9;
  void clear_errors_count1();
  uint32_t errors_count1() const;
  void set_errors_count1(uint32_t value);
  private:
  uint32_t _internal_errors_count1() const;
  void _internal_set_errors_count1(uint32_t value);
  public:

  // uint32 errors_count2 = 10;
  void clear_errors_count2();
  uint32_t errors_count2() const;
  void set_errors_count2(uint32_t value);
  private:
  uint32_t _internal_errors_count2() const;
  void _internal_set_errors_count2(uint32_t value);
  public:

  // uint32 errors_count3 = 11;
  void clear_errors_count3();
  uint32_t errors_count3() const;
  void set_errors_count3(uint32_t value);
  private:
  uint32_t _internal_errors_count3() const;
  void _internal_set_errors_count3(uint32_t value);
  public:

  // uint32 errors_count4 = 12;
  void clear_errors_count4();
  uint32_t errors_count4() const;
  void set_errors_count4(uint32_t value);
  private:
  uint32_t _internal_errors_count4() const;
  void _internal_set_errors_count4(uint32_t value);
  public:

  // int32 battery_remaining = 13;
  void clear_battery_remaining();
  int32_t battery_remaining() const;
  void set_battery_remaining(int32_t value);
  private:
  int32_t _internal_battery_remaining() const;
  void _internal_set_battery_remaining(int32_t value);
  public:

  // uint32 onboard_control_sensors_present_extended = 14;
  void clear_onboard_control_sensors_present_extended();
  uint32_t onboard_control_sensors_present_extended() const;
  void set_onboard_control_sensors_present_extended(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_present_extended() const;
  void _internal_set_onboard_control_sensors_present_extended(uint32_t value);
  public:

  // uint32 onboard_control_sensors_enabled_extended = 15;
  void clear_onboard_control_sensors_enabled_extended();
  uint32_t onboard_control_sensors_enabled_extended() const;
  void set_onboard_control_sensors_enabled_extended(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_enabled_extended() const;
  void _internal_set_onboard_control_sensors_enabled_extended(uint32_t value);
  public:

  // uint32 onboard_control_sensors_health_extended = 16;
  void clear_onboard_control_sensors_health_extended();
  uint32_t onboard_control_sensors_health_extended() const;
  void set_onboard_control_sensors_health_extended(uint32_t value);
  private:
  uint32_t _internal_onboard_control_sensors_health_extended() const;
  void _internal_set_onboard_control_sensors_health_extended(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.SysStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t onboard_control_sensors_present_;
    uint32_t onboard_control_sensors_enabled_;
    uint32_t onboard_control_sensors_health_;
    uint32_t load_;
    uint32_t voltage_battery_;
    int32_t current_battery_;
    uint32_t drop_rate_comm_;
    uint32_t errors_comm_;
    uint32_t errors_count1_;
    uint32_t errors_count2_;
    uint32_t errors_count3_;
    uint32_t errors_count4_;
    int32_t battery_remaining_;
    uint32_t onboard_control_sensors_present_extended_;
    uint32_t onboard_control_sensors_enabled_extended_;
    uint32_t onboard_control_sensors_health_extended_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class RcChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.RcChannel) */ {
 public:
  inline RcChannel() : RcChannel(nullptr) {}
  ~RcChannel() override;
  explicit PROTOBUF_CONSTEXPR RcChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcChannel(const RcChannel& from);
  RcChannel(RcChannel&& from) noexcept
    : RcChannel() {
    *this = ::std::move(from);
  }

  inline RcChannel& operator=(const RcChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcChannel& operator=(RcChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcChannel* internal_default_instance() {
    return reinterpret_cast<const RcChannel*>(
               &_RcChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RcChannel& a, RcChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(RcChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcChannel& from) {
    RcChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.RcChannel";
  }
  protected:
  explicit RcChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeBootMsFieldNumber = 1,
    kChan1RawFieldNumber = 2,
    kChan2RawFieldNumber = 3,
    kChan3RawFieldNumber = 4,
    kChan4RawFieldNumber = 5,
    kChan5RawFieldNumber = 6,
    kChan6RawFieldNumber = 7,
    kChan7RawFieldNumber = 8,
    kChan8RawFieldNumber = 9,
    kChan9RawFieldNumber = 10,
    kChan10RawFieldNumber = 11,
    kChan11RawFieldNumber = 12,
    kChan12RawFieldNumber = 13,
    kChan13RawFieldNumber = 14,
    kChan14RawFieldNumber = 15,
    kChan15RawFieldNumber = 16,
    kChan16RawFieldNumber = 17,
    kChan17RawFieldNumber = 18,
    kChan18RawFieldNumber = 19,
    kChancountFieldNumber = 20,
    kRssiFieldNumber = 21,
  };
  // uint32 time_boot_ms = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_time_boot_ms();
  uint32_t time_boot_ms() const;
  void set_time_boot_ms(uint32_t value);
  private:
  uint32_t _internal_time_boot_ms() const;
  void _internal_set_time_boot_ms(uint32_t value);
  public:

  // uint32 chan1_raw = 2 [(.mavsdk.options.default_value) = "0"];
  void clear_chan1_raw();
  uint32_t chan1_raw() const;
  void set_chan1_raw(uint32_t value);
  private:
  uint32_t _internal_chan1_raw() const;
  void _internal_set_chan1_raw(uint32_t value);
  public:

  // uint32 chan2_raw = 3 [(.mavsdk.options.default_value) = "0"];
  void clear_chan2_raw();
  uint32_t chan2_raw() const;
  void set_chan2_raw(uint32_t value);
  private:
  uint32_t _internal_chan2_raw() const;
  void _internal_set_chan2_raw(uint32_t value);
  public:

  // uint32 chan3_raw = 4 [(.mavsdk.options.default_value) = "0"];
  void clear_chan3_raw();
  uint32_t chan3_raw() const;
  void set_chan3_raw(uint32_t value);
  private:
  uint32_t _internal_chan3_raw() const;
  void _internal_set_chan3_raw(uint32_t value);
  public:

  // uint32 chan4_raw = 5 [(.mavsdk.options.default_value) = "0"];
  void clear_chan4_raw();
  uint32_t chan4_raw() const;
  void set_chan4_raw(uint32_t value);
  private:
  uint32_t _internal_chan4_raw() const;
  void _internal_set_chan4_raw(uint32_t value);
  public:

  // uint32 chan5_raw = 6 [(.mavsdk.options.default_value) = "0"];
  void clear_chan5_raw();
  uint32_t chan5_raw() const;
  void set_chan5_raw(uint32_t value);
  private:
  uint32_t _internal_chan5_raw() const;
  void _internal_set_chan5_raw(uint32_t value);
  public:

  // uint32 chan6_raw = 7 [(.mavsdk.options.default_value) = "0"];
  void clear_chan6_raw();
  uint32_t chan6_raw() const;
  void set_chan6_raw(uint32_t value);
  private:
  uint32_t _internal_chan6_raw() const;
  void _internal_set_chan6_raw(uint32_t value);
  public:

  // uint32 chan7_raw = 8 [(.mavsdk.options.default_value) = "0"];
  void clear_chan7_raw();
  uint32_t chan7_raw() const;
  void set_chan7_raw(uint32_t value);
  private:
  uint32_t _internal_chan7_raw() const;
  void _internal_set_chan7_raw(uint32_t value);
  public:

  // uint32 chan8_raw = 9 [(.mavsdk.options.default_value) = "0"];
  void clear_chan8_raw();
  uint32_t chan8_raw() const;
  void set_chan8_raw(uint32_t value);
  private:
  uint32_t _internal_chan8_raw() const;
  void _internal_set_chan8_raw(uint32_t value);
  public:

  // uint32 chan9_raw = 10 [(.mavsdk.options.default_value) = "0"];
  void clear_chan9_raw();
  uint32_t chan9_raw() const;
  void set_chan9_raw(uint32_t value);
  private:
  uint32_t _internal_chan9_raw() const;
  void _internal_set_chan9_raw(uint32_t value);
  public:

  // uint32 chan10_raw = 11 [(.mavsdk.options.default_value) = "0"];
  void clear_chan10_raw();
  uint32_t chan10_raw() const;
  void set_chan10_raw(uint32_t value);
  private:
  uint32_t _internal_chan10_raw() const;
  void _internal_set_chan10_raw(uint32_t value);
  public:

  // uint32 chan11_raw = 12 [(.mavsdk.options.default_value) = "0"];
  void clear_chan11_raw();
  uint32_t chan11_raw() const;
  void set_chan11_raw(uint32_t value);
  private:
  uint32_t _internal_chan11_raw() const;
  void _internal_set_chan11_raw(uint32_t value);
  public:

  // uint32 chan12_raw = 13 [(.mavsdk.options.default_value) = "0"];
  void clear_chan12_raw();
  uint32_t chan12_raw() const;
  void set_chan12_raw(uint32_t value);
  private:
  uint32_t _internal_chan12_raw() const;
  void _internal_set_chan12_raw(uint32_t value);
  public:

  // uint32 chan13_raw = 14 [(.mavsdk.options.default_value) = "0"];
  void clear_chan13_raw();
  uint32_t chan13_raw() const;
  void set_chan13_raw(uint32_t value);
  private:
  uint32_t _internal_chan13_raw() const;
  void _internal_set_chan13_raw(uint32_t value);
  public:

  // uint32 chan14_raw = 15 [(.mavsdk.options.default_value) = "0"];
  void clear_chan14_raw();
  uint32_t chan14_raw() const;
  void set_chan14_raw(uint32_t value);
  private:
  uint32_t _internal_chan14_raw() const;
  void _internal_set_chan14_raw(uint32_t value);
  public:

  // uint32 chan15_raw = 16 [(.mavsdk.options.default_value) = "0"];
  void clear_chan15_raw();
  uint32_t chan15_raw() const;
  void set_chan15_raw(uint32_t value);
  private:
  uint32_t _internal_chan15_raw() const;
  void _internal_set_chan15_raw(uint32_t value);
  public:

  // uint32 chan16_raw = 17 [(.mavsdk.options.default_value) = "0"];
  void clear_chan16_raw();
  uint32_t chan16_raw() const;
  void set_chan16_raw(uint32_t value);
  private:
  uint32_t _internal_chan16_raw() const;
  void _internal_set_chan16_raw(uint32_t value);
  public:

  // uint32 chan17_raw = 18 [(.mavsdk.options.default_value) = "0"];
  void clear_chan17_raw();
  uint32_t chan17_raw() const;
  void set_chan17_raw(uint32_t value);
  private:
  uint32_t _internal_chan17_raw() const;
  void _internal_set_chan17_raw(uint32_t value);
  public:

  // uint32 chan18_raw = 19 [(.mavsdk.options.default_value) = "0"];
  void clear_chan18_raw();
  uint32_t chan18_raw() const;
  void set_chan18_raw(uint32_t value);
  private:
  uint32_t _internal_chan18_raw() const;
  void _internal_set_chan18_raw(uint32_t value);
  public:

  // uint32 chancount = 20 [(.mavsdk.options.default_value) = "0"];
  void clear_chancount();
  uint32_t chancount() const;
  void set_chancount(uint32_t value);
  private:
  uint32_t _internal_chancount() const;
  void _internal_set_chancount(uint32_t value);
  public:

  // uint32 rssi = 21 [(.mavsdk.options.default_value) = "0"];
  void clear_rssi();
  uint32_t rssi() const;
  void set_rssi(uint32_t value);
  private:
  uint32_t _internal_rssi() const;
  void _internal_set_rssi(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.RcChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t time_boot_ms_;
    uint32_t chan1_raw_;
    uint32_t chan2_raw_;
    uint32_t chan3_raw_;
    uint32_t chan4_raw_;
    uint32_t chan5_raw_;
    uint32_t chan6_raw_;
    uint32_t chan7_raw_;
    uint32_t chan8_raw_;
    uint32_t chan9_raw_;
    uint32_t chan10_raw_;
    uint32_t chan11_raw_;
    uint32_t chan12_raw_;
    uint32_t chan13_raw_;
    uint32_t chan14_raw_;
    uint32_t chan15_raw_;
    uint32_t chan16_raw_;
    uint32_t chan17_raw_;
    uint32_t chan18_raw_;
    uint32_t chancount_;
    uint32_t rssi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class Magnitometer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.Magnitometer) */ {
 public:
  inline Magnitometer() : Magnitometer(nullptr) {}
  ~Magnitometer() override;
  explicit PROTOBUF_CONSTEXPR Magnitometer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Magnitometer(const Magnitometer& from);
  Magnitometer(Magnitometer&& from) noexcept
    : Magnitometer() {
    *this = ::std::move(from);
  }

  inline Magnitometer& operator=(const Magnitometer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Magnitometer& operator=(Magnitometer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Magnitometer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Magnitometer* internal_default_instance() {
    return reinterpret_cast<const Magnitometer*>(
               &_Magnitometer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Magnitometer& a, Magnitometer& b) {
    a.Swap(&b);
  }
  inline void Swap(Magnitometer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Magnitometer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Magnitometer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Magnitometer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Magnitometer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Magnitometer& from) {
    Magnitometer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Magnitometer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.Magnitometer";
  }
  protected:
  explicit Magnitometer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kMagneticHeadingFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double magnetic_heading = 4;
  void clear_magnetic_heading();
  double magnetic_heading() const;
  void set_magnetic_heading(double value);
  private:
  double _internal_magnetic_heading() const;
  void _internal_set_magnetic_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.Magnitometer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double magnetic_heading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// -------------------------------------------------------------------

class BatteryVoltages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.striker.BatteryVoltages) */ {
 public:
  inline BatteryVoltages() : BatteryVoltages(nullptr) {}
  ~BatteryVoltages() override;
  explicit PROTOBUF_CONSTEXPR BatteryVoltages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryVoltages(const BatteryVoltages& from);
  BatteryVoltages(BatteryVoltages&& from) noexcept
    : BatteryVoltages() {
    *this = ::std::move(from);
  }

  inline BatteryVoltages& operator=(const BatteryVoltages& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryVoltages& operator=(BatteryVoltages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryVoltages& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryVoltages* internal_default_instance() {
    return reinterpret_cast<const BatteryVoltages*>(
               &_BatteryVoltages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BatteryVoltages& a, BatteryVoltages& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryVoltages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryVoltages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryVoltages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryVoltages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryVoltages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryVoltages& from) {
    BatteryVoltages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryVoltages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.striker.BatteryVoltages";
  }
  protected:
  explicit BatteryVoltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltagesFieldNumber = 1,
    kExtVoltagesFieldNumber = 2,
  };
  // repeated uint32 voltages = 1;
  int voltages_size() const;
  private:
  int _internal_voltages_size() const;
  public:
  void clear_voltages();
  private:
  uint32_t _internal_voltages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_voltages() const;
  void _internal_add_voltages(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_voltages();
  public:
  uint32_t voltages(int index) const;
  void set_voltages(int index, uint32_t value);
  void add_voltages(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      voltages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_voltages();

  // repeated uint32 ext_voltages = 2;
  int ext_voltages_size() const;
  private:
  int _internal_ext_voltages_size() const;
  public:
  void clear_ext_voltages();
  private:
  uint32_t _internal_ext_voltages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ext_voltages() const;
  void _internal_add_ext_voltages(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ext_voltages();
  public:
  uint32_t ext_voltages(int index) const;
  void set_ext_voltages(int index, uint32_t value);
  void add_ext_voltages(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ext_voltages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ext_voltages();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.striker.BatteryVoltages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > voltages_;
    mutable std::atomic<int> _voltages_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ext_voltages_;
    mutable std::atomic<int> _ext_voltages_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_striker_2fstriker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeHeartbeatRequest

// -------------------------------------------------------------------

// HeartbeatResponse

// .mavsdk.rpc.striker.Heartbeat heartbeat = 1;
inline bool HeartbeatResponse::_internal_has_heartbeat() const {
  return this != internal_default_instance() && _impl_.heartbeat_ != nullptr;
}
inline bool HeartbeatResponse::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void HeartbeatResponse::clear_heartbeat() {
  if (GetArenaForAllocation() == nullptr && _impl_.heartbeat_ != nullptr) {
    delete _impl_.heartbeat_;
  }
  _impl_.heartbeat_ = nullptr;
}
inline const ::mavsdk::rpc::striker::Heartbeat& HeartbeatResponse::_internal_heartbeat() const {
  const ::mavsdk::rpc::striker::Heartbeat* p = _impl_.heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::striker::Heartbeat&>(
      ::mavsdk::rpc::striker::_Heartbeat_default_instance_);
}
inline const ::mavsdk::rpc::striker::Heartbeat& HeartbeatResponse::heartbeat() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.HeartbeatResponse.heartbeat)
  return _internal_heartbeat();
}
inline void HeartbeatResponse::unsafe_arena_set_allocated_heartbeat(
    ::mavsdk::rpc::striker::Heartbeat* heartbeat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heartbeat_);
  }
  _impl_.heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.striker.HeartbeatResponse.heartbeat)
}
inline ::mavsdk::rpc::striker::Heartbeat* HeartbeatResponse::release_heartbeat() {
  
  ::mavsdk::rpc::striker::Heartbeat* temp = _impl_.heartbeat_;
  _impl_.heartbeat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::striker::Heartbeat* HeartbeatResponse::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.striker.HeartbeatResponse.heartbeat)
  
  ::mavsdk::rpc::striker::Heartbeat* temp = _impl_.heartbeat_;
  _impl_.heartbeat_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::striker::Heartbeat* HeartbeatResponse::_internal_mutable_heartbeat() {
  
  if (_impl_.heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::striker::Heartbeat>(GetArenaForAllocation());
    _impl_.heartbeat_ = p;
  }
  return _impl_.heartbeat_;
}
inline ::mavsdk::rpc::striker::Heartbeat* HeartbeatResponse::mutable_heartbeat() {
  ::mavsdk::rpc::striker::Heartbeat* _msg = _internal_mutable_heartbeat();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.striker.HeartbeatResponse.heartbeat)
  return _msg;
}
inline void HeartbeatResponse::set_allocated_heartbeat(::mavsdk::rpc::striker::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.striker.HeartbeatResponse.heartbeat)
}

// -------------------------------------------------------------------

// SubscribeSysStatusRequest

// -------------------------------------------------------------------

// SysStatusResponse

// .mavsdk.rpc.striker.SysStatus sys_status = 1;
inline bool SysStatusResponse::_internal_has_sys_status() const {
  return this != internal_default_instance() && _impl_.sys_status_ != nullptr;
}
inline bool SysStatusResponse::has_sys_status() const {
  return _internal_has_sys_status();
}
inline void SysStatusResponse::clear_sys_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.sys_status_ != nullptr) {
    delete _impl_.sys_status_;
  }
  _impl_.sys_status_ = nullptr;
}
inline const ::mavsdk::rpc::striker::SysStatus& SysStatusResponse::_internal_sys_status() const {
  const ::mavsdk::rpc::striker::SysStatus* p = _impl_.sys_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::striker::SysStatus&>(
      ::mavsdk::rpc::striker::_SysStatus_default_instance_);
}
inline const ::mavsdk::rpc::striker::SysStatus& SysStatusResponse::sys_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatusResponse.sys_status)
  return _internal_sys_status();
}
inline void SysStatusResponse::unsafe_arena_set_allocated_sys_status(
    ::mavsdk::rpc::striker::SysStatus* sys_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sys_status_);
  }
  _impl_.sys_status_ = sys_status;
  if (sys_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.striker.SysStatusResponse.sys_status)
}
inline ::mavsdk::rpc::striker::SysStatus* SysStatusResponse::release_sys_status() {
  
  ::mavsdk::rpc::striker::SysStatus* temp = _impl_.sys_status_;
  _impl_.sys_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::striker::SysStatus* SysStatusResponse::unsafe_arena_release_sys_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.striker.SysStatusResponse.sys_status)
  
  ::mavsdk::rpc::striker::SysStatus* temp = _impl_.sys_status_;
  _impl_.sys_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::striker::SysStatus* SysStatusResponse::_internal_mutable_sys_status() {
  
  if (_impl_.sys_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::striker::SysStatus>(GetArenaForAllocation());
    _impl_.sys_status_ = p;
  }
  return _impl_.sys_status_;
}
inline ::mavsdk::rpc::striker::SysStatus* SysStatusResponse::mutable_sys_status() {
  ::mavsdk::rpc::striker::SysStatus* _msg = _internal_mutable_sys_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.striker.SysStatusResponse.sys_status)
  return _msg;
}
inline void SysStatusResponse::set_allocated_sys_status(::mavsdk::rpc::striker::SysStatus* sys_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sys_status_;
  }
  if (sys_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sys_status);
    if (message_arena != submessage_arena) {
      sys_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sys_status_ = sys_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.striker.SysStatusResponse.sys_status)
}

// -------------------------------------------------------------------

// SubscribeRcChannelRequest

// -------------------------------------------------------------------

// RcChannelResponse

// .mavsdk.rpc.striker.RcChannel rc_channel = 1;
inline bool RcChannelResponse::_internal_has_rc_channel() const {
  return this != internal_default_instance() && _impl_.rc_channel_ != nullptr;
}
inline bool RcChannelResponse::has_rc_channel() const {
  return _internal_has_rc_channel();
}
inline void RcChannelResponse::clear_rc_channel() {
  if (GetArenaForAllocation() == nullptr && _impl_.rc_channel_ != nullptr) {
    delete _impl_.rc_channel_;
  }
  _impl_.rc_channel_ = nullptr;
}
inline const ::mavsdk::rpc::striker::RcChannel& RcChannelResponse::_internal_rc_channel() const {
  const ::mavsdk::rpc::striker::RcChannel* p = _impl_.rc_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::striker::RcChannel&>(
      ::mavsdk::rpc::striker::_RcChannel_default_instance_);
}
inline const ::mavsdk::rpc::striker::RcChannel& RcChannelResponse::rc_channel() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannelResponse.rc_channel)
  return _internal_rc_channel();
}
inline void RcChannelResponse::unsafe_arena_set_allocated_rc_channel(
    ::mavsdk::rpc::striker::RcChannel* rc_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rc_channel_);
  }
  _impl_.rc_channel_ = rc_channel;
  if (rc_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.striker.RcChannelResponse.rc_channel)
}
inline ::mavsdk::rpc::striker::RcChannel* RcChannelResponse::release_rc_channel() {
  
  ::mavsdk::rpc::striker::RcChannel* temp = _impl_.rc_channel_;
  _impl_.rc_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::striker::RcChannel* RcChannelResponse::unsafe_arena_release_rc_channel() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.striker.RcChannelResponse.rc_channel)
  
  ::mavsdk::rpc::striker::RcChannel* temp = _impl_.rc_channel_;
  _impl_.rc_channel_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::striker::RcChannel* RcChannelResponse::_internal_mutable_rc_channel() {
  
  if (_impl_.rc_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::striker::RcChannel>(GetArenaForAllocation());
    _impl_.rc_channel_ = p;
  }
  return _impl_.rc_channel_;
}
inline ::mavsdk::rpc::striker::RcChannel* RcChannelResponse::mutable_rc_channel() {
  ::mavsdk::rpc::striker::RcChannel* _msg = _internal_mutable_rc_channel();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.striker.RcChannelResponse.rc_channel)
  return _msg;
}
inline void RcChannelResponse::set_allocated_rc_channel(::mavsdk::rpc::striker::RcChannel* rc_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rc_channel_;
  }
  if (rc_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rc_channel);
    if (message_arena != submessage_arena) {
      rc_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rc_channel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rc_channel_ = rc_channel;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.striker.RcChannelResponse.rc_channel)
}

// -------------------------------------------------------------------

// SubscribeMagnitometerRequest

// -------------------------------------------------------------------

// MagnitometerResponse

// .mavsdk.rpc.striker.Magnitometer magnitometer = 1;
inline bool MagnitometerResponse::_internal_has_magnitometer() const {
  return this != internal_default_instance() && _impl_.magnitometer_ != nullptr;
}
inline bool MagnitometerResponse::has_magnitometer() const {
  return _internal_has_magnitometer();
}
inline void MagnitometerResponse::clear_magnitometer() {
  if (GetArenaForAllocation() == nullptr && _impl_.magnitometer_ != nullptr) {
    delete _impl_.magnitometer_;
  }
  _impl_.magnitometer_ = nullptr;
}
inline const ::mavsdk::rpc::striker::Magnitometer& MagnitometerResponse::_internal_magnitometer() const {
  const ::mavsdk::rpc::striker::Magnitometer* p = _impl_.magnitometer_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::striker::Magnitometer&>(
      ::mavsdk::rpc::striker::_Magnitometer_default_instance_);
}
inline const ::mavsdk::rpc::striker::Magnitometer& MagnitometerResponse::magnitometer() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.MagnitometerResponse.magnitometer)
  return _internal_magnitometer();
}
inline void MagnitometerResponse::unsafe_arena_set_allocated_magnitometer(
    ::mavsdk::rpc::striker::Magnitometer* magnitometer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.magnitometer_);
  }
  _impl_.magnitometer_ = magnitometer;
  if (magnitometer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.striker.MagnitometerResponse.magnitometer)
}
inline ::mavsdk::rpc::striker::Magnitometer* MagnitometerResponse::release_magnitometer() {
  
  ::mavsdk::rpc::striker::Magnitometer* temp = _impl_.magnitometer_;
  _impl_.magnitometer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::striker::Magnitometer* MagnitometerResponse::unsafe_arena_release_magnitometer() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.striker.MagnitometerResponse.magnitometer)
  
  ::mavsdk::rpc::striker::Magnitometer* temp = _impl_.magnitometer_;
  _impl_.magnitometer_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::striker::Magnitometer* MagnitometerResponse::_internal_mutable_magnitometer() {
  
  if (_impl_.magnitometer_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::striker::Magnitometer>(GetArenaForAllocation());
    _impl_.magnitometer_ = p;
  }
  return _impl_.magnitometer_;
}
inline ::mavsdk::rpc::striker::Magnitometer* MagnitometerResponse::mutable_magnitometer() {
  ::mavsdk::rpc::striker::Magnitometer* _msg = _internal_mutable_magnitometer();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.striker.MagnitometerResponse.magnitometer)
  return _msg;
}
inline void MagnitometerResponse::set_allocated_magnitometer(::mavsdk::rpc::striker::Magnitometer* magnitometer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.magnitometer_;
  }
  if (magnitometer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(magnitometer);
    if (message_arena != submessage_arena) {
      magnitometer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnitometer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.magnitometer_ = magnitometer;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.striker.MagnitometerResponse.magnitometer)
}

// -------------------------------------------------------------------

// SubscribeBatteryVoltagesRequest

// -------------------------------------------------------------------

// BatteryVoltagesResponse

// .mavsdk.rpc.striker.BatteryVoltages battery_voltages = 1;
inline bool BatteryVoltagesResponse::_internal_has_battery_voltages() const {
  return this != internal_default_instance() && _impl_.battery_voltages_ != nullptr;
}
inline bool BatteryVoltagesResponse::has_battery_voltages() const {
  return _internal_has_battery_voltages();
}
inline void BatteryVoltagesResponse::clear_battery_voltages() {
  if (GetArenaForAllocation() == nullptr && _impl_.battery_voltages_ != nullptr) {
    delete _impl_.battery_voltages_;
  }
  _impl_.battery_voltages_ = nullptr;
}
inline const ::mavsdk::rpc::striker::BatteryVoltages& BatteryVoltagesResponse::_internal_battery_voltages() const {
  const ::mavsdk::rpc::striker::BatteryVoltages* p = _impl_.battery_voltages_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::striker::BatteryVoltages&>(
      ::mavsdk::rpc::striker::_BatteryVoltages_default_instance_);
}
inline const ::mavsdk::rpc::striker::BatteryVoltages& BatteryVoltagesResponse::battery_voltages() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.BatteryVoltagesResponse.battery_voltages)
  return _internal_battery_voltages();
}
inline void BatteryVoltagesResponse::unsafe_arena_set_allocated_battery_voltages(
    ::mavsdk::rpc::striker::BatteryVoltages* battery_voltages) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battery_voltages_);
  }
  _impl_.battery_voltages_ = battery_voltages;
  if (battery_voltages) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.striker.BatteryVoltagesResponse.battery_voltages)
}
inline ::mavsdk::rpc::striker::BatteryVoltages* BatteryVoltagesResponse::release_battery_voltages() {
  
  ::mavsdk::rpc::striker::BatteryVoltages* temp = _impl_.battery_voltages_;
  _impl_.battery_voltages_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::striker::BatteryVoltages* BatteryVoltagesResponse::unsafe_arena_release_battery_voltages() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.striker.BatteryVoltagesResponse.battery_voltages)
  
  ::mavsdk::rpc::striker::BatteryVoltages* temp = _impl_.battery_voltages_;
  _impl_.battery_voltages_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::striker::BatteryVoltages* BatteryVoltagesResponse::_internal_mutable_battery_voltages() {
  
  if (_impl_.battery_voltages_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::striker::BatteryVoltages>(GetArenaForAllocation());
    _impl_.battery_voltages_ = p;
  }
  return _impl_.battery_voltages_;
}
inline ::mavsdk::rpc::striker::BatteryVoltages* BatteryVoltagesResponse::mutable_battery_voltages() {
  ::mavsdk::rpc::striker::BatteryVoltages* _msg = _internal_mutable_battery_voltages();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.striker.BatteryVoltagesResponse.battery_voltages)
  return _msg;
}
inline void BatteryVoltagesResponse::set_allocated_battery_voltages(::mavsdk::rpc::striker::BatteryVoltages* battery_voltages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.battery_voltages_;
  }
  if (battery_voltages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery_voltages);
    if (message_arena != submessage_arena) {
      battery_voltages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery_voltages, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.battery_voltages_ = battery_voltages;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.striker.BatteryVoltagesResponse.battery_voltages)
}

// -------------------------------------------------------------------

// Heartbeat

// uint32 custom_mode = 1;
inline void Heartbeat::clear_custom_mode() {
  _impl_.custom_mode_ = 0u;
}
inline uint32_t Heartbeat::_internal_custom_mode() const {
  return _impl_.custom_mode_;
}
inline uint32_t Heartbeat::custom_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.custom_mode)
  return _internal_custom_mode();
}
inline void Heartbeat::_internal_set_custom_mode(uint32_t value) {
  
  _impl_.custom_mode_ = value;
}
inline void Heartbeat::set_custom_mode(uint32_t value) {
  _internal_set_custom_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.custom_mode)
}

// uint32 type = 2;
inline void Heartbeat::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Heartbeat::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Heartbeat::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.type)
  return _internal_type();
}
inline void Heartbeat::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Heartbeat::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.type)
}

// uint32 autopilot = 3;
inline void Heartbeat::clear_autopilot() {
  _impl_.autopilot_ = 0u;
}
inline uint32_t Heartbeat::_internal_autopilot() const {
  return _impl_.autopilot_;
}
inline uint32_t Heartbeat::autopilot() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.autopilot)
  return _internal_autopilot();
}
inline void Heartbeat::_internal_set_autopilot(uint32_t value) {
  
  _impl_.autopilot_ = value;
}
inline void Heartbeat::set_autopilot(uint32_t value) {
  _internal_set_autopilot(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.autopilot)
}

// uint32 base_mode = 4;
inline void Heartbeat::clear_base_mode() {
  _impl_.base_mode_ = 0u;
}
inline uint32_t Heartbeat::_internal_base_mode() const {
  return _impl_.base_mode_;
}
inline uint32_t Heartbeat::base_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.base_mode)
  return _internal_base_mode();
}
inline void Heartbeat::_internal_set_base_mode(uint32_t value) {
  
  _impl_.base_mode_ = value;
}
inline void Heartbeat::set_base_mode(uint32_t value) {
  _internal_set_base_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.base_mode)
}

// uint32 system_status = 5;
inline void Heartbeat::clear_system_status() {
  _impl_.system_status_ = 0u;
}
inline uint32_t Heartbeat::_internal_system_status() const {
  return _impl_.system_status_;
}
inline uint32_t Heartbeat::system_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.system_status)
  return _internal_system_status();
}
inline void Heartbeat::_internal_set_system_status(uint32_t value) {
  
  _impl_.system_status_ = value;
}
inline void Heartbeat::set_system_status(uint32_t value) {
  _internal_set_system_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.system_status)
}

// uint32 mavlink_version = 6;
inline void Heartbeat::clear_mavlink_version() {
  _impl_.mavlink_version_ = 0u;
}
inline uint32_t Heartbeat::_internal_mavlink_version() const {
  return _impl_.mavlink_version_;
}
inline uint32_t Heartbeat::mavlink_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Heartbeat.mavlink_version)
  return _internal_mavlink_version();
}
inline void Heartbeat::_internal_set_mavlink_version(uint32_t value) {
  
  _impl_.mavlink_version_ = value;
}
inline void Heartbeat::set_mavlink_version(uint32_t value) {
  _internal_set_mavlink_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Heartbeat.mavlink_version)
}

// -------------------------------------------------------------------

// SysStatus

// uint32 onboard_control_sensors_present = 1;
inline void SysStatus::clear_onboard_control_sensors_present() {
  _impl_.onboard_control_sensors_present_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_present() const {
  return _impl_.onboard_control_sensors_present_;
}
inline uint32_t SysStatus::onboard_control_sensors_present() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_present)
  return _internal_onboard_control_sensors_present();
}
inline void SysStatus::_internal_set_onboard_control_sensors_present(uint32_t value) {
  
  _impl_.onboard_control_sensors_present_ = value;
}
inline void SysStatus::set_onboard_control_sensors_present(uint32_t value) {
  _internal_set_onboard_control_sensors_present(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_present)
}

// uint32 onboard_control_sensors_enabled = 2;
inline void SysStatus::clear_onboard_control_sensors_enabled() {
  _impl_.onboard_control_sensors_enabled_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_enabled() const {
  return _impl_.onboard_control_sensors_enabled_;
}
inline uint32_t SysStatus::onboard_control_sensors_enabled() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_enabled)
  return _internal_onboard_control_sensors_enabled();
}
inline void SysStatus::_internal_set_onboard_control_sensors_enabled(uint32_t value) {
  
  _impl_.onboard_control_sensors_enabled_ = value;
}
inline void SysStatus::set_onboard_control_sensors_enabled(uint32_t value) {
  _internal_set_onboard_control_sensors_enabled(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_enabled)
}

// uint32 onboard_control_sensors_health = 3;
inline void SysStatus::clear_onboard_control_sensors_health() {
  _impl_.onboard_control_sensors_health_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_health() const {
  return _impl_.onboard_control_sensors_health_;
}
inline uint32_t SysStatus::onboard_control_sensors_health() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_health)
  return _internal_onboard_control_sensors_health();
}
inline void SysStatus::_internal_set_onboard_control_sensors_health(uint32_t value) {
  
  _impl_.onboard_control_sensors_health_ = value;
}
inline void SysStatus::set_onboard_control_sensors_health(uint32_t value) {
  _internal_set_onboard_control_sensors_health(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_health)
}

// uint32 load = 4;
inline void SysStatus::clear_load() {
  _impl_.load_ = 0u;
}
inline uint32_t SysStatus::_internal_load() const {
  return _impl_.load_;
}
inline uint32_t SysStatus::load() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.load)
  return _internal_load();
}
inline void SysStatus::_internal_set_load(uint32_t value) {
  
  _impl_.load_ = value;
}
inline void SysStatus::set_load(uint32_t value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.load)
}

// uint32 voltage_battery = 5;
inline void SysStatus::clear_voltage_battery() {
  _impl_.voltage_battery_ = 0u;
}
inline uint32_t SysStatus::_internal_voltage_battery() const {
  return _impl_.voltage_battery_;
}
inline uint32_t SysStatus::voltage_battery() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.voltage_battery)
  return _internal_voltage_battery();
}
inline void SysStatus::_internal_set_voltage_battery(uint32_t value) {
  
  _impl_.voltage_battery_ = value;
}
inline void SysStatus::set_voltage_battery(uint32_t value) {
  _internal_set_voltage_battery(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.voltage_battery)
}

// int32 current_battery = 6;
inline void SysStatus::clear_current_battery() {
  _impl_.current_battery_ = 0;
}
inline int32_t SysStatus::_internal_current_battery() const {
  return _impl_.current_battery_;
}
inline int32_t SysStatus::current_battery() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.current_battery)
  return _internal_current_battery();
}
inline void SysStatus::_internal_set_current_battery(int32_t value) {
  
  _impl_.current_battery_ = value;
}
inline void SysStatus::set_current_battery(int32_t value) {
  _internal_set_current_battery(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.current_battery)
}

// uint32 drop_rate_comm = 7;
inline void SysStatus::clear_drop_rate_comm() {
  _impl_.drop_rate_comm_ = 0u;
}
inline uint32_t SysStatus::_internal_drop_rate_comm() const {
  return _impl_.drop_rate_comm_;
}
inline uint32_t SysStatus::drop_rate_comm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.drop_rate_comm)
  return _internal_drop_rate_comm();
}
inline void SysStatus::_internal_set_drop_rate_comm(uint32_t value) {
  
  _impl_.drop_rate_comm_ = value;
}
inline void SysStatus::set_drop_rate_comm(uint32_t value) {
  _internal_set_drop_rate_comm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.drop_rate_comm)
}

// uint32 errors_comm = 8;
inline void SysStatus::clear_errors_comm() {
  _impl_.errors_comm_ = 0u;
}
inline uint32_t SysStatus::_internal_errors_comm() const {
  return _impl_.errors_comm_;
}
inline uint32_t SysStatus::errors_comm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.errors_comm)
  return _internal_errors_comm();
}
inline void SysStatus::_internal_set_errors_comm(uint32_t value) {
  
  _impl_.errors_comm_ = value;
}
inline void SysStatus::set_errors_comm(uint32_t value) {
  _internal_set_errors_comm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.errors_comm)
}

// uint32 errors_count1 = 9;
inline void SysStatus::clear_errors_count1() {
  _impl_.errors_count1_ = 0u;
}
inline uint32_t SysStatus::_internal_errors_count1() const {
  return _impl_.errors_count1_;
}
inline uint32_t SysStatus::errors_count1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.errors_count1)
  return _internal_errors_count1();
}
inline void SysStatus::_internal_set_errors_count1(uint32_t value) {
  
  _impl_.errors_count1_ = value;
}
inline void SysStatus::set_errors_count1(uint32_t value) {
  _internal_set_errors_count1(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.errors_count1)
}

// uint32 errors_count2 = 10;
inline void SysStatus::clear_errors_count2() {
  _impl_.errors_count2_ = 0u;
}
inline uint32_t SysStatus::_internal_errors_count2() const {
  return _impl_.errors_count2_;
}
inline uint32_t SysStatus::errors_count2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.errors_count2)
  return _internal_errors_count2();
}
inline void SysStatus::_internal_set_errors_count2(uint32_t value) {
  
  _impl_.errors_count2_ = value;
}
inline void SysStatus::set_errors_count2(uint32_t value) {
  _internal_set_errors_count2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.errors_count2)
}

// uint32 errors_count3 = 11;
inline void SysStatus::clear_errors_count3() {
  _impl_.errors_count3_ = 0u;
}
inline uint32_t SysStatus::_internal_errors_count3() const {
  return _impl_.errors_count3_;
}
inline uint32_t SysStatus::errors_count3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.errors_count3)
  return _internal_errors_count3();
}
inline void SysStatus::_internal_set_errors_count3(uint32_t value) {
  
  _impl_.errors_count3_ = value;
}
inline void SysStatus::set_errors_count3(uint32_t value) {
  _internal_set_errors_count3(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.errors_count3)
}

// uint32 errors_count4 = 12;
inline void SysStatus::clear_errors_count4() {
  _impl_.errors_count4_ = 0u;
}
inline uint32_t SysStatus::_internal_errors_count4() const {
  return _impl_.errors_count4_;
}
inline uint32_t SysStatus::errors_count4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.errors_count4)
  return _internal_errors_count4();
}
inline void SysStatus::_internal_set_errors_count4(uint32_t value) {
  
  _impl_.errors_count4_ = value;
}
inline void SysStatus::set_errors_count4(uint32_t value) {
  _internal_set_errors_count4(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.errors_count4)
}

// int32 battery_remaining = 13;
inline void SysStatus::clear_battery_remaining() {
  _impl_.battery_remaining_ = 0;
}
inline int32_t SysStatus::_internal_battery_remaining() const {
  return _impl_.battery_remaining_;
}
inline int32_t SysStatus::battery_remaining() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.battery_remaining)
  return _internal_battery_remaining();
}
inline void SysStatus::_internal_set_battery_remaining(int32_t value) {
  
  _impl_.battery_remaining_ = value;
}
inline void SysStatus::set_battery_remaining(int32_t value) {
  _internal_set_battery_remaining(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.battery_remaining)
}

// uint32 onboard_control_sensors_present_extended = 14;
inline void SysStatus::clear_onboard_control_sensors_present_extended() {
  _impl_.onboard_control_sensors_present_extended_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_present_extended() const {
  return _impl_.onboard_control_sensors_present_extended_;
}
inline uint32_t SysStatus::onboard_control_sensors_present_extended() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_present_extended)
  return _internal_onboard_control_sensors_present_extended();
}
inline void SysStatus::_internal_set_onboard_control_sensors_present_extended(uint32_t value) {
  
  _impl_.onboard_control_sensors_present_extended_ = value;
}
inline void SysStatus::set_onboard_control_sensors_present_extended(uint32_t value) {
  _internal_set_onboard_control_sensors_present_extended(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_present_extended)
}

// uint32 onboard_control_sensors_enabled_extended = 15;
inline void SysStatus::clear_onboard_control_sensors_enabled_extended() {
  _impl_.onboard_control_sensors_enabled_extended_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_enabled_extended() const {
  return _impl_.onboard_control_sensors_enabled_extended_;
}
inline uint32_t SysStatus::onboard_control_sensors_enabled_extended() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_enabled_extended)
  return _internal_onboard_control_sensors_enabled_extended();
}
inline void SysStatus::_internal_set_onboard_control_sensors_enabled_extended(uint32_t value) {
  
  _impl_.onboard_control_sensors_enabled_extended_ = value;
}
inline void SysStatus::set_onboard_control_sensors_enabled_extended(uint32_t value) {
  _internal_set_onboard_control_sensors_enabled_extended(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_enabled_extended)
}

// uint32 onboard_control_sensors_health_extended = 16;
inline void SysStatus::clear_onboard_control_sensors_health_extended() {
  _impl_.onboard_control_sensors_health_extended_ = 0u;
}
inline uint32_t SysStatus::_internal_onboard_control_sensors_health_extended() const {
  return _impl_.onboard_control_sensors_health_extended_;
}
inline uint32_t SysStatus::onboard_control_sensors_health_extended() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_health_extended)
  return _internal_onboard_control_sensors_health_extended();
}
inline void SysStatus::_internal_set_onboard_control_sensors_health_extended(uint32_t value) {
  
  _impl_.onboard_control_sensors_health_extended_ = value;
}
inline void SysStatus::set_onboard_control_sensors_health_extended(uint32_t value) {
  _internal_set_onboard_control_sensors_health_extended(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.SysStatus.onboard_control_sensors_health_extended)
}

// -------------------------------------------------------------------

// RcChannel

// uint32 time_boot_ms = 1 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_time_boot_ms() {
  _impl_.time_boot_ms_ = 0u;
}
inline uint32_t RcChannel::_internal_time_boot_ms() const {
  return _impl_.time_boot_ms_;
}
inline uint32_t RcChannel::time_boot_ms() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.time_boot_ms)
  return _internal_time_boot_ms();
}
inline void RcChannel::_internal_set_time_boot_ms(uint32_t value) {
  
  _impl_.time_boot_ms_ = value;
}
inline void RcChannel::set_time_boot_ms(uint32_t value) {
  _internal_set_time_boot_ms(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.time_boot_ms)
}

// uint32 chan1_raw = 2 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan1_raw() {
  _impl_.chan1_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan1_raw() const {
  return _impl_.chan1_raw_;
}
inline uint32_t RcChannel::chan1_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan1_raw)
  return _internal_chan1_raw();
}
inline void RcChannel::_internal_set_chan1_raw(uint32_t value) {
  
  _impl_.chan1_raw_ = value;
}
inline void RcChannel::set_chan1_raw(uint32_t value) {
  _internal_set_chan1_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan1_raw)
}

// uint32 chan2_raw = 3 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan2_raw() {
  _impl_.chan2_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan2_raw() const {
  return _impl_.chan2_raw_;
}
inline uint32_t RcChannel::chan2_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan2_raw)
  return _internal_chan2_raw();
}
inline void RcChannel::_internal_set_chan2_raw(uint32_t value) {
  
  _impl_.chan2_raw_ = value;
}
inline void RcChannel::set_chan2_raw(uint32_t value) {
  _internal_set_chan2_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan2_raw)
}

// uint32 chan3_raw = 4 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan3_raw() {
  _impl_.chan3_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan3_raw() const {
  return _impl_.chan3_raw_;
}
inline uint32_t RcChannel::chan3_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan3_raw)
  return _internal_chan3_raw();
}
inline void RcChannel::_internal_set_chan3_raw(uint32_t value) {
  
  _impl_.chan3_raw_ = value;
}
inline void RcChannel::set_chan3_raw(uint32_t value) {
  _internal_set_chan3_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan3_raw)
}

// uint32 chan4_raw = 5 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan4_raw() {
  _impl_.chan4_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan4_raw() const {
  return _impl_.chan4_raw_;
}
inline uint32_t RcChannel::chan4_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan4_raw)
  return _internal_chan4_raw();
}
inline void RcChannel::_internal_set_chan4_raw(uint32_t value) {
  
  _impl_.chan4_raw_ = value;
}
inline void RcChannel::set_chan4_raw(uint32_t value) {
  _internal_set_chan4_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan4_raw)
}

// uint32 chan5_raw = 6 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan5_raw() {
  _impl_.chan5_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan5_raw() const {
  return _impl_.chan5_raw_;
}
inline uint32_t RcChannel::chan5_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan5_raw)
  return _internal_chan5_raw();
}
inline void RcChannel::_internal_set_chan5_raw(uint32_t value) {
  
  _impl_.chan5_raw_ = value;
}
inline void RcChannel::set_chan5_raw(uint32_t value) {
  _internal_set_chan5_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan5_raw)
}

// uint32 chan6_raw = 7 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan6_raw() {
  _impl_.chan6_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan6_raw() const {
  return _impl_.chan6_raw_;
}
inline uint32_t RcChannel::chan6_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan6_raw)
  return _internal_chan6_raw();
}
inline void RcChannel::_internal_set_chan6_raw(uint32_t value) {
  
  _impl_.chan6_raw_ = value;
}
inline void RcChannel::set_chan6_raw(uint32_t value) {
  _internal_set_chan6_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan6_raw)
}

// uint32 chan7_raw = 8 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan7_raw() {
  _impl_.chan7_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan7_raw() const {
  return _impl_.chan7_raw_;
}
inline uint32_t RcChannel::chan7_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan7_raw)
  return _internal_chan7_raw();
}
inline void RcChannel::_internal_set_chan7_raw(uint32_t value) {
  
  _impl_.chan7_raw_ = value;
}
inline void RcChannel::set_chan7_raw(uint32_t value) {
  _internal_set_chan7_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan7_raw)
}

// uint32 chan8_raw = 9 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan8_raw() {
  _impl_.chan8_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan8_raw() const {
  return _impl_.chan8_raw_;
}
inline uint32_t RcChannel::chan8_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan8_raw)
  return _internal_chan8_raw();
}
inline void RcChannel::_internal_set_chan8_raw(uint32_t value) {
  
  _impl_.chan8_raw_ = value;
}
inline void RcChannel::set_chan8_raw(uint32_t value) {
  _internal_set_chan8_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan8_raw)
}

// uint32 chan9_raw = 10 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan9_raw() {
  _impl_.chan9_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan9_raw() const {
  return _impl_.chan9_raw_;
}
inline uint32_t RcChannel::chan9_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan9_raw)
  return _internal_chan9_raw();
}
inline void RcChannel::_internal_set_chan9_raw(uint32_t value) {
  
  _impl_.chan9_raw_ = value;
}
inline void RcChannel::set_chan9_raw(uint32_t value) {
  _internal_set_chan9_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan9_raw)
}

// uint32 chan10_raw = 11 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan10_raw() {
  _impl_.chan10_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan10_raw() const {
  return _impl_.chan10_raw_;
}
inline uint32_t RcChannel::chan10_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan10_raw)
  return _internal_chan10_raw();
}
inline void RcChannel::_internal_set_chan10_raw(uint32_t value) {
  
  _impl_.chan10_raw_ = value;
}
inline void RcChannel::set_chan10_raw(uint32_t value) {
  _internal_set_chan10_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan10_raw)
}

// uint32 chan11_raw = 12 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan11_raw() {
  _impl_.chan11_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan11_raw() const {
  return _impl_.chan11_raw_;
}
inline uint32_t RcChannel::chan11_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan11_raw)
  return _internal_chan11_raw();
}
inline void RcChannel::_internal_set_chan11_raw(uint32_t value) {
  
  _impl_.chan11_raw_ = value;
}
inline void RcChannel::set_chan11_raw(uint32_t value) {
  _internal_set_chan11_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan11_raw)
}

// uint32 chan12_raw = 13 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan12_raw() {
  _impl_.chan12_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan12_raw() const {
  return _impl_.chan12_raw_;
}
inline uint32_t RcChannel::chan12_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan12_raw)
  return _internal_chan12_raw();
}
inline void RcChannel::_internal_set_chan12_raw(uint32_t value) {
  
  _impl_.chan12_raw_ = value;
}
inline void RcChannel::set_chan12_raw(uint32_t value) {
  _internal_set_chan12_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan12_raw)
}

// uint32 chan13_raw = 14 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan13_raw() {
  _impl_.chan13_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan13_raw() const {
  return _impl_.chan13_raw_;
}
inline uint32_t RcChannel::chan13_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan13_raw)
  return _internal_chan13_raw();
}
inline void RcChannel::_internal_set_chan13_raw(uint32_t value) {
  
  _impl_.chan13_raw_ = value;
}
inline void RcChannel::set_chan13_raw(uint32_t value) {
  _internal_set_chan13_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan13_raw)
}

// uint32 chan14_raw = 15 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan14_raw() {
  _impl_.chan14_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan14_raw() const {
  return _impl_.chan14_raw_;
}
inline uint32_t RcChannel::chan14_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan14_raw)
  return _internal_chan14_raw();
}
inline void RcChannel::_internal_set_chan14_raw(uint32_t value) {
  
  _impl_.chan14_raw_ = value;
}
inline void RcChannel::set_chan14_raw(uint32_t value) {
  _internal_set_chan14_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan14_raw)
}

// uint32 chan15_raw = 16 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan15_raw() {
  _impl_.chan15_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan15_raw() const {
  return _impl_.chan15_raw_;
}
inline uint32_t RcChannel::chan15_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan15_raw)
  return _internal_chan15_raw();
}
inline void RcChannel::_internal_set_chan15_raw(uint32_t value) {
  
  _impl_.chan15_raw_ = value;
}
inline void RcChannel::set_chan15_raw(uint32_t value) {
  _internal_set_chan15_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan15_raw)
}

// uint32 chan16_raw = 17 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan16_raw() {
  _impl_.chan16_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan16_raw() const {
  return _impl_.chan16_raw_;
}
inline uint32_t RcChannel::chan16_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan16_raw)
  return _internal_chan16_raw();
}
inline void RcChannel::_internal_set_chan16_raw(uint32_t value) {
  
  _impl_.chan16_raw_ = value;
}
inline void RcChannel::set_chan16_raw(uint32_t value) {
  _internal_set_chan16_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan16_raw)
}

// uint32 chan17_raw = 18 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan17_raw() {
  _impl_.chan17_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan17_raw() const {
  return _impl_.chan17_raw_;
}
inline uint32_t RcChannel::chan17_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan17_raw)
  return _internal_chan17_raw();
}
inline void RcChannel::_internal_set_chan17_raw(uint32_t value) {
  
  _impl_.chan17_raw_ = value;
}
inline void RcChannel::set_chan17_raw(uint32_t value) {
  _internal_set_chan17_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan17_raw)
}

// uint32 chan18_raw = 19 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chan18_raw() {
  _impl_.chan18_raw_ = 0u;
}
inline uint32_t RcChannel::_internal_chan18_raw() const {
  return _impl_.chan18_raw_;
}
inline uint32_t RcChannel::chan18_raw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chan18_raw)
  return _internal_chan18_raw();
}
inline void RcChannel::_internal_set_chan18_raw(uint32_t value) {
  
  _impl_.chan18_raw_ = value;
}
inline void RcChannel::set_chan18_raw(uint32_t value) {
  _internal_set_chan18_raw(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chan18_raw)
}

// uint32 chancount = 20 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_chancount() {
  _impl_.chancount_ = 0u;
}
inline uint32_t RcChannel::_internal_chancount() const {
  return _impl_.chancount_;
}
inline uint32_t RcChannel::chancount() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.chancount)
  return _internal_chancount();
}
inline void RcChannel::_internal_set_chancount(uint32_t value) {
  
  _impl_.chancount_ = value;
}
inline void RcChannel::set_chancount(uint32_t value) {
  _internal_set_chancount(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.chancount)
}

// uint32 rssi = 21 [(.mavsdk.options.default_value) = "0"];
inline void RcChannel::clear_rssi() {
  _impl_.rssi_ = 0u;
}
inline uint32_t RcChannel::_internal_rssi() const {
  return _impl_.rssi_;
}
inline uint32_t RcChannel::rssi() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.RcChannel.rssi)
  return _internal_rssi();
}
inline void RcChannel::_internal_set_rssi(uint32_t value) {
  
  _impl_.rssi_ = value;
}
inline void RcChannel::set_rssi(uint32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.RcChannel.rssi)
}

// -------------------------------------------------------------------

// Magnitometer

// double x = 1;
inline void Magnitometer::clear_x() {
  _impl_.x_ = 0;
}
inline double Magnitometer::_internal_x() const {
  return _impl_.x_;
}
inline double Magnitometer::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Magnitometer.x)
  return _internal_x();
}
inline void Magnitometer::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Magnitometer::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Magnitometer.x)
}

// double y = 2;
inline void Magnitometer::clear_y() {
  _impl_.y_ = 0;
}
inline double Magnitometer::_internal_y() const {
  return _impl_.y_;
}
inline double Magnitometer::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Magnitometer.y)
  return _internal_y();
}
inline void Magnitometer::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Magnitometer::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Magnitometer.y)
}

// double z = 3;
inline void Magnitometer::clear_z() {
  _impl_.z_ = 0;
}
inline double Magnitometer::_internal_z() const {
  return _impl_.z_;
}
inline double Magnitometer::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Magnitometer.z)
  return _internal_z();
}
inline void Magnitometer::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Magnitometer::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Magnitometer.z)
}

// double magnetic_heading = 4;
inline void Magnitometer::clear_magnetic_heading() {
  _impl_.magnetic_heading_ = 0;
}
inline double Magnitometer::_internal_magnetic_heading() const {
  return _impl_.magnetic_heading_;
}
inline double Magnitometer::magnetic_heading() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.Magnitometer.magnetic_heading)
  return _internal_magnetic_heading();
}
inline void Magnitometer::_internal_set_magnetic_heading(double value) {
  
  _impl_.magnetic_heading_ = value;
}
inline void Magnitometer::set_magnetic_heading(double value) {
  _internal_set_magnetic_heading(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.Magnitometer.magnetic_heading)
}

// -------------------------------------------------------------------

// BatteryVoltages

// repeated uint32 voltages = 1;
inline int BatteryVoltages::_internal_voltages_size() const {
  return _impl_.voltages_.size();
}
inline int BatteryVoltages::voltages_size() const {
  return _internal_voltages_size();
}
inline void BatteryVoltages::clear_voltages() {
  _impl_.voltages_.Clear();
}
inline uint32_t BatteryVoltages::_internal_voltages(int index) const {
  return _impl_.voltages_.Get(index);
}
inline uint32_t BatteryVoltages::voltages(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.BatteryVoltages.voltages)
  return _internal_voltages(index);
}
inline void BatteryVoltages::set_voltages(int index, uint32_t value) {
  _impl_.voltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.BatteryVoltages.voltages)
}
inline void BatteryVoltages::_internal_add_voltages(uint32_t value) {
  _impl_.voltages_.Add(value);
}
inline void BatteryVoltages::add_voltages(uint32_t value) {
  _internal_add_voltages(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.striker.BatteryVoltages.voltages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BatteryVoltages::_internal_voltages() const {
  return _impl_.voltages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BatteryVoltages::voltages() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.striker.BatteryVoltages.voltages)
  return _internal_voltages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BatteryVoltages::_internal_mutable_voltages() {
  return &_impl_.voltages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BatteryVoltages::mutable_voltages() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.striker.BatteryVoltages.voltages)
  return _internal_mutable_voltages();
}

// repeated uint32 ext_voltages = 2;
inline int BatteryVoltages::_internal_ext_voltages_size() const {
  return _impl_.ext_voltages_.size();
}
inline int BatteryVoltages::ext_voltages_size() const {
  return _internal_ext_voltages_size();
}
inline void BatteryVoltages::clear_ext_voltages() {
  _impl_.ext_voltages_.Clear();
}
inline uint32_t BatteryVoltages::_internal_ext_voltages(int index) const {
  return _impl_.ext_voltages_.Get(index);
}
inline uint32_t BatteryVoltages::ext_voltages(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.striker.BatteryVoltages.ext_voltages)
  return _internal_ext_voltages(index);
}
inline void BatteryVoltages::set_ext_voltages(int index, uint32_t value) {
  _impl_.ext_voltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.striker.BatteryVoltages.ext_voltages)
}
inline void BatteryVoltages::_internal_add_ext_voltages(uint32_t value) {
  _impl_.ext_voltages_.Add(value);
}
inline void BatteryVoltages::add_ext_voltages(uint32_t value) {
  _internal_add_ext_voltages(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.striker.BatteryVoltages.ext_voltages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BatteryVoltages::_internal_ext_voltages() const {
  return _impl_.ext_voltages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BatteryVoltages::ext_voltages() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.striker.BatteryVoltages.ext_voltages)
  return _internal_ext_voltages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BatteryVoltages::_internal_mutable_ext_voltages() {
  return &_impl_.ext_voltages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BatteryVoltages::mutable_ext_voltages() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.striker.BatteryVoltages.ext_voltages)
  return _internal_mutable_ext_voltages();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace striker
}  // namespace rpc
}  // namespace mavsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_striker_2fstriker_2eproto
