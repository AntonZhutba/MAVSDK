// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: striker/striker.proto

#include "striker/striker.pb.h"
#include "striker/striker.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace striker {

static const char* StrikerService_method_names[] = {
  "/mavsdk.rpc.striker.StrikerService/SubscribeHeartbeat",
  "/mavsdk.rpc.striker.StrikerService/SubscribeSysStatus",
  "/mavsdk.rpc.striker.StrikerService/SubscribeRcChannel",
  "/mavsdk.rpc.striker.StrikerService/SubscribeMagnitometer",
  "/mavsdk.rpc.striker.StrikerService/SubscribeBatteryVoltages",
  "/mavsdk.rpc.striker.StrikerService/SubscribeAvailableModes",
  "/mavsdk.rpc.striker.StrikerService/SetManualFlightMode",
  "/mavsdk.rpc.striker.StrikerService/SubscribeActuatorServosStatus",
  "/mavsdk.rpc.striker.StrikerService/SetRateActuatorServosStatus",
};

std::unique_ptr< StrikerService::Stub> StrikerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StrikerService::Stub> stub(new StrikerService::Stub(channel, options));
  return stub;
}

StrikerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribeHeartbeat_(StrikerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeSysStatus_(StrikerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeRcChannel_(StrikerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMagnitometer_(StrikerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeBatteryVoltages_(StrikerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeAvailableModes_(StrikerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetManualFlightMode_(StrikerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeActuatorServosStatus_(StrikerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetRateActuatorServosStatus_(StrikerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::striker::HeartbeatResponse>* StrikerService::Stub::SubscribeHeartbeatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::HeartbeatResponse>::Create(channel_.get(), rpcmethod_SubscribeHeartbeat_, context, request);
}

void StrikerService::Stub::async::SubscribeHeartbeat(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::HeartbeatResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::HeartbeatResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeHeartbeat_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::HeartbeatResponse>* StrikerService::Stub::AsyncSubscribeHeartbeatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::HeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeHeartbeat_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::HeartbeatResponse>* StrikerService::Stub::PrepareAsyncSubscribeHeartbeatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::HeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeHeartbeat_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::striker::SysStatusResponse>* StrikerService::Stub::SubscribeSysStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeSysStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::SysStatusResponse>::Create(channel_.get(), rpcmethod_SubscribeSysStatus_, context, request);
}

void StrikerService::Stub::async::SubscribeSysStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeSysStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::SysStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::SysStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeSysStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::SysStatusResponse>* StrikerService::Stub::AsyncSubscribeSysStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeSysStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::SysStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSysStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::SysStatusResponse>* StrikerService::Stub::PrepareAsyncSubscribeSysStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeSysStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::SysStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSysStatus_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::striker::RcChannelResponse>* StrikerService::Stub::SubscribeRcChannelRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeRcChannelRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::RcChannelResponse>::Create(channel_.get(), rpcmethod_SubscribeRcChannel_, context, request);
}

void StrikerService::Stub::async::SubscribeRcChannel(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeRcChannelRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::RcChannelResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::RcChannelResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeRcChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::RcChannelResponse>* StrikerService::Stub::AsyncSubscribeRcChannelRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeRcChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::RcChannelResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeRcChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::RcChannelResponse>* StrikerService::Stub::PrepareAsyncSubscribeRcChannelRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeRcChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::RcChannelResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeRcChannel_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::striker::MagnitometerResponse>* StrikerService::Stub::SubscribeMagnitometerRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::MagnitometerResponse>::Create(channel_.get(), rpcmethod_SubscribeMagnitometer_, context, request);
}

void StrikerService::Stub::async::SubscribeMagnitometer(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::MagnitometerResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::MagnitometerResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMagnitometer_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::MagnitometerResponse>* StrikerService::Stub::AsyncSubscribeMagnitometerRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::MagnitometerResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMagnitometer_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::MagnitometerResponse>* StrikerService::Stub::PrepareAsyncSubscribeMagnitometerRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::MagnitometerResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMagnitometer_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::striker::BatteryVoltagesResponse>* StrikerService::Stub::SubscribeBatteryVoltagesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::BatteryVoltagesResponse>::Create(channel_.get(), rpcmethod_SubscribeBatteryVoltages_, context, request);
}

void StrikerService::Stub::async::SubscribeBatteryVoltages(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::BatteryVoltagesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::BatteryVoltagesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeBatteryVoltages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::BatteryVoltagesResponse>* StrikerService::Stub::AsyncSubscribeBatteryVoltagesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::BatteryVoltagesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeBatteryVoltages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::BatteryVoltagesResponse>* StrikerService::Stub::PrepareAsyncSubscribeBatteryVoltagesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::BatteryVoltagesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeBatteryVoltages_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::striker::AvailableModesResponse>* StrikerService::Stub::SubscribeAvailableModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::AvailableModesResponse>::Create(channel_.get(), rpcmethod_SubscribeAvailableModes_, context, request);
}

void StrikerService::Stub::async::SubscribeAvailableModes(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::AvailableModesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::AvailableModesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeAvailableModes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::AvailableModesResponse>* StrikerService::Stub::AsyncSubscribeAvailableModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::AvailableModesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeAvailableModes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::AvailableModesResponse>* StrikerService::Stub::PrepareAsyncSubscribeAvailableModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::AvailableModesResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeAvailableModes_, context, request, false, nullptr);
}

::grpc::Status StrikerService::Stub::SetManualFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest& request, ::mavsdk::rpc::striker::SetManualFlightModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::striker::SetManualFlightModeRequest, ::mavsdk::rpc::striker::SetManualFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetManualFlightMode_, context, request, response);
}

void StrikerService::Stub::async::SetManualFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest* request, ::mavsdk::rpc::striker::SetManualFlightModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::striker::SetManualFlightModeRequest, ::mavsdk::rpc::striker::SetManualFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetManualFlightMode_, context, request, response, std::move(f));
}

void StrikerService::Stub::async::SetManualFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest* request, ::mavsdk::rpc::striker::SetManualFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetManualFlightMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::striker::SetManualFlightModeResponse>* StrikerService::Stub::PrepareAsyncSetManualFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::striker::SetManualFlightModeResponse, ::mavsdk::rpc::striker::SetManualFlightModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetManualFlightMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::striker::SetManualFlightModeResponse>* StrikerService::Stub::AsyncSetManualFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetManualFlightModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>* StrikerService::Stub::SubscribeActuatorServosStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>::Create(channel_.get(), rpcmethod_SubscribeActuatorServosStatus_, context, request);
}

void StrikerService::Stub::async::SubscribeActuatorServosStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeActuatorServosStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>* StrikerService::Stub::AsyncSubscribeActuatorServosStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeActuatorServosStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>* StrikerService::Stub::PrepareAsyncSubscribeActuatorServosStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeActuatorServosStatus_, context, request, false, nullptr);
}

::grpc::Status StrikerService::Stub::SetRateActuatorServosStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest& request, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRateActuatorServosStatus_, context, request, response);
}

void StrikerService::Stub::async::SetRateActuatorServosStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest* request, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRateActuatorServosStatus_, context, request, response, std::move(f));
}

void StrikerService::Stub::async::SetRateActuatorServosStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest* request, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRateActuatorServosStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse>* StrikerService::Stub::PrepareAsyncSetRateActuatorServosStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse, ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRateActuatorServosStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse>* StrikerService::Stub::AsyncSetRateActuatorServosStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRateActuatorServosStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

StrikerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeHeartbeatRequest, ::mavsdk::rpc::striker::HeartbeatResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::HeartbeatResponse>* writer) {
               return service->SubscribeHeartbeat(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeSysStatusRequest, ::mavsdk::rpc::striker::SysStatusResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeSysStatusRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::SysStatusResponse>* writer) {
               return service->SubscribeSysStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeRcChannelRequest, ::mavsdk::rpc::striker::RcChannelResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeRcChannelRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::RcChannelResponse>* writer) {
               return service->SubscribeRcChannel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeMagnitometerRequest, ::mavsdk::rpc::striker::MagnitometerResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::MagnitometerResponse>* writer) {
               return service->SubscribeMagnitometer(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest, ::mavsdk::rpc::striker::BatteryVoltagesResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::BatteryVoltagesResponse>* writer) {
               return service->SubscribeBatteryVoltages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeAvailableModesRequest, ::mavsdk::rpc::striker::AvailableModesResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::AvailableModesResponse>* writer) {
               return service->SubscribeAvailableModes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StrikerService::Service, ::mavsdk::rpc::striker::SetManualFlightModeRequest, ::mavsdk::rpc::striker::SetManualFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SetManualFlightModeRequest* req,
             ::mavsdk::rpc::striker::SetManualFlightModeResponse* resp) {
               return service->SetManualFlightMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StrikerService::Service, ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest, ::mavsdk::rpc::striker::ActuatorServosStatusResponse>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::striker::ActuatorServosStatusResponse>* writer) {
               return service->SubscribeActuatorServosStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StrikerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StrikerService::Service, ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StrikerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest* req,
             ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse* resp) {
               return service->SetRateActuatorServosStatus(ctx, req, resp);
             }, this)));
}

StrikerService::Service::~Service() {
}

::grpc::Status StrikerService::Service::SubscribeHeartbeat(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeHeartbeatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::HeartbeatResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeSysStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeSysStatusRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::SysStatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeRcChannel(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeRcChannelRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::RcChannelResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeMagnitometer(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeMagnitometerRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::MagnitometerResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeBatteryVoltages(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::BatteryVoltagesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeAvailableModes(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeAvailableModesRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::AvailableModesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SetManualFlightMode(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SetManualFlightModeRequest* request, ::mavsdk::rpc::striker::SetManualFlightModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SubscribeActuatorServosStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SubscribeActuatorServosStatusRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::striker::ActuatorServosStatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StrikerService::Service::SetRateActuatorServosStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::striker::SetRateActuatorServosStatusRequest* request, ::mavsdk::rpc::striker::SetRateActuatorServosStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace striker

