// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: striker/striker.proto

#include "striker/striker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace striker {
PROTOBUF_CONSTEXPR SubscribeHeartbeatRequest::SubscribeHeartbeatRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeHeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHeartbeatRequestDefaultTypeInternal() {}
  union {
    SubscribeHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHeartbeatRequestDefaultTypeInternal _SubscribeHeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.heartbeat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeSysStatusRequest::SubscribeSysStatusRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeSysStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeSysStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeSysStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeSysStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeSysStatusRequestDefaultTypeInternal _SubscribeSysStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR SysStatusResponse::SysStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sys_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SysStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStatusResponseDefaultTypeInternal() {}
  union {
    SysStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStatusResponseDefaultTypeInternal _SysStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRcChannelRequest::SubscribeRcChannelRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeRcChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRcChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRcChannelRequestDefaultTypeInternal() {}
  union {
    SubscribeRcChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRcChannelRequestDefaultTypeInternal _SubscribeRcChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR RcChannelResponse::RcChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rc_channel_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RcChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcChannelResponseDefaultTypeInternal() {}
  union {
    RcChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcChannelResponseDefaultTypeInternal _RcChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeMagnitometerRequest::SubscribeMagnitometerRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeMagnitometerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeMagnitometerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeMagnitometerRequestDefaultTypeInternal() {}
  union {
    SubscribeMagnitometerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeMagnitometerRequestDefaultTypeInternal _SubscribeMagnitometerRequest_default_instance_;
PROTOBUF_CONSTEXPR MagnitometerResponse::MagnitometerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.magnitometer_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MagnitometerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagnitometerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagnitometerResponseDefaultTypeInternal() {}
  union {
    MagnitometerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagnitometerResponseDefaultTypeInternal _MagnitometerResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeBatteryVoltagesRequest::SubscribeBatteryVoltagesRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeBatteryVoltagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeBatteryVoltagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeBatteryVoltagesRequestDefaultTypeInternal() {}
  union {
    SubscribeBatteryVoltagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeBatteryVoltagesRequestDefaultTypeInternal _SubscribeBatteryVoltagesRequest_default_instance_;
PROTOBUF_CONSTEXPR BatteryVoltagesResponse::BatteryVoltagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.battery_voltages_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatteryVoltagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryVoltagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryVoltagesResponseDefaultTypeInternal() {}
  union {
    BatteryVoltagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryVoltagesResponseDefaultTypeInternal _BatteryVoltagesResponse_default_instance_;
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custom_mode_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.autopilot_)*/0u
  , /*decltype(_impl_.base_mode_)*/0u
  , /*decltype(_impl_.system_status_)*/0u
  , /*decltype(_impl_.mavlink_version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR SysStatus::SysStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.onboard_control_sensors_present_)*/0u
  , /*decltype(_impl_.onboard_control_sensors_enabled_)*/0u
  , /*decltype(_impl_.onboard_control_sensors_health_)*/0u
  , /*decltype(_impl_.load_)*/0u
  , /*decltype(_impl_.voltage_battery_)*/0u
  , /*decltype(_impl_.current_battery_)*/0
  , /*decltype(_impl_.drop_rate_comm_)*/0u
  , /*decltype(_impl_.errors_comm_)*/0u
  , /*decltype(_impl_.errors_count1_)*/0u
  , /*decltype(_impl_.errors_count2_)*/0u
  , /*decltype(_impl_.errors_count3_)*/0u
  , /*decltype(_impl_.errors_count4_)*/0u
  , /*decltype(_impl_.battery_remaining_)*/0
  , /*decltype(_impl_.onboard_control_sensors_present_extended_)*/0u
  , /*decltype(_impl_.onboard_control_sensors_enabled_extended_)*/0u
  , /*decltype(_impl_.onboard_control_sensors_health_extended_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SysStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStatusDefaultTypeInternal() {}
  union {
    SysStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStatusDefaultTypeInternal _SysStatus_default_instance_;
PROTOBUF_CONSTEXPR RcChannel::RcChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_boot_ms_)*/0u
  , /*decltype(_impl_.chan1_raw_)*/0u
  , /*decltype(_impl_.chan2_raw_)*/0u
  , /*decltype(_impl_.chan3_raw_)*/0u
  , /*decltype(_impl_.chan4_raw_)*/0u
  , /*decltype(_impl_.chan5_raw_)*/0u
  , /*decltype(_impl_.chan6_raw_)*/0u
  , /*decltype(_impl_.chan7_raw_)*/0u
  , /*decltype(_impl_.chan8_raw_)*/0u
  , /*decltype(_impl_.chan9_raw_)*/0u
  , /*decltype(_impl_.chan10_raw_)*/0u
  , /*decltype(_impl_.chan11_raw_)*/0u
  , /*decltype(_impl_.chan12_raw_)*/0u
  , /*decltype(_impl_.chan13_raw_)*/0u
  , /*decltype(_impl_.chan14_raw_)*/0u
  , /*decltype(_impl_.chan15_raw_)*/0u
  , /*decltype(_impl_.chan16_raw_)*/0u
  , /*decltype(_impl_.chan17_raw_)*/0u
  , /*decltype(_impl_.chan18_raw_)*/0u
  , /*decltype(_impl_.chancount_)*/0u
  , /*decltype(_impl_.rssi_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RcChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcChannelDefaultTypeInternal() {}
  union {
    RcChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcChannelDefaultTypeInternal _RcChannel_default_instance_;
PROTOBUF_CONSTEXPR Magnitometer::Magnitometer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.magnetic_heading_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MagnitometerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagnitometerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagnitometerDefaultTypeInternal() {}
  union {
    Magnitometer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagnitometerDefaultTypeInternal _Magnitometer_default_instance_;
PROTOBUF_CONSTEXPR BatteryVoltages::BatteryVoltages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voltages_)*/{}
  , /*decltype(_impl_._voltages_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ext_voltages_)*/{}
  , /*decltype(_impl_._ext_voltages_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatteryVoltagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryVoltagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryVoltagesDefaultTypeInternal() {}
  union {
    BatteryVoltages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryVoltagesDefaultTypeInternal _BatteryVoltages_default_instance_;
}  // namespace striker
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_striker_2fstriker_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_striker_2fstriker_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_striker_2fstriker_2eproto = nullptr;

const uint32_t TableStruct_striker_2fstriker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SubscribeHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::HeartbeatResponse, _impl_.heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SubscribeSysStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatusResponse, _impl_.sys_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SubscribeRcChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannelResponse, _impl_.rc_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SubscribeMagnitometerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::MagnitometerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::MagnitometerResponse, _impl_.magnitometer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::BatteryVoltagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::BatteryVoltagesResponse, _impl_.battery_voltages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.custom_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.autopilot_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.base_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.system_status_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Heartbeat, _impl_.mavlink_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_present_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_enabled_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_health_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.voltage_battery_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.current_battery_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.drop_rate_comm_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.errors_comm_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.errors_count1_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.errors_count2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.errors_count3_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.errors_count4_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.battery_remaining_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_present_extended_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_enabled_extended_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::SysStatus, _impl_.onboard_control_sensors_health_extended_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.time_boot_ms_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan1_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan2_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan3_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan4_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan5_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan6_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan7_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan8_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan9_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan10_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan11_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan12_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan13_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan14_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan15_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan16_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan17_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chan18_raw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.chancount_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::RcChannel, _impl_.rssi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Magnitometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Magnitometer, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Magnitometer, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Magnitometer, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::Magnitometer, _impl_.magnetic_heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::BatteryVoltages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::BatteryVoltages, _impl_.voltages_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::striker::BatteryVoltages, _impl_.ext_voltages_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::striker::SubscribeHeartbeatRequest)},
  { 6, -1, -1, sizeof(::mavsdk::rpc::striker::HeartbeatResponse)},
  { 13, -1, -1, sizeof(::mavsdk::rpc::striker::SubscribeSysStatusRequest)},
  { 19, -1, -1, sizeof(::mavsdk::rpc::striker::SysStatusResponse)},
  { 26, -1, -1, sizeof(::mavsdk::rpc::striker::SubscribeRcChannelRequest)},
  { 32, -1, -1, sizeof(::mavsdk::rpc::striker::RcChannelResponse)},
  { 39, -1, -1, sizeof(::mavsdk::rpc::striker::SubscribeMagnitometerRequest)},
  { 45, -1, -1, sizeof(::mavsdk::rpc::striker::MagnitometerResponse)},
  { 52, -1, -1, sizeof(::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest)},
  { 58, -1, -1, sizeof(::mavsdk::rpc::striker::BatteryVoltagesResponse)},
  { 65, -1, -1, sizeof(::mavsdk::rpc::striker::Heartbeat)},
  { 77, -1, -1, sizeof(::mavsdk::rpc::striker::SysStatus)},
  { 99, -1, -1, sizeof(::mavsdk::rpc::striker::RcChannel)},
  { 126, -1, -1, sizeof(::mavsdk::rpc::striker::Magnitometer)},
  { 136, -1, -1, sizeof(::mavsdk::rpc::striker::BatteryVoltages)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::striker::_SubscribeHeartbeatRequest_default_instance_._instance,
  &::mavsdk::rpc::striker::_HeartbeatResponse_default_instance_._instance,
  &::mavsdk::rpc::striker::_SubscribeSysStatusRequest_default_instance_._instance,
  &::mavsdk::rpc::striker::_SysStatusResponse_default_instance_._instance,
  &::mavsdk::rpc::striker::_SubscribeRcChannelRequest_default_instance_._instance,
  &::mavsdk::rpc::striker::_RcChannelResponse_default_instance_._instance,
  &::mavsdk::rpc::striker::_SubscribeMagnitometerRequest_default_instance_._instance,
  &::mavsdk::rpc::striker::_MagnitometerResponse_default_instance_._instance,
  &::mavsdk::rpc::striker::_SubscribeBatteryVoltagesRequest_default_instance_._instance,
  &::mavsdk::rpc::striker::_BatteryVoltagesResponse_default_instance_._instance,
  &::mavsdk::rpc::striker::_Heartbeat_default_instance_._instance,
  &::mavsdk::rpc::striker::_SysStatus_default_instance_._instance,
  &::mavsdk::rpc::striker::_RcChannel_default_instance_._instance,
  &::mavsdk::rpc::striker::_Magnitometer_default_instance_._instance,
  &::mavsdk::rpc::striker::_BatteryVoltages_default_instance_._instance,
};

const char descriptor_table_protodef_striker_2fstriker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025striker/striker.proto\022\022mavsdk.rpc.stri"
  "ker\032\024mavsdk_options.proto\"\033\n\031SubscribeHe"
  "artbeatRequest\"E\n\021HeartbeatResponse\0220\n\th"
  "eartbeat\030\001 \001(\0132\035.mavsdk.rpc.striker.Hear"
  "tbeat\"\033\n\031SubscribeSysStatusRequest\"F\n\021Sy"
  "sStatusResponse\0221\n\nsys_status\030\001 \001(\0132\035.ma"
  "vsdk.rpc.striker.SysStatus\"\033\n\031SubscribeR"
  "cChannelRequest\"F\n\021RcChannelResponse\0221\n\n"
  "rc_channel\030\001 \001(\0132\035.mavsdk.rpc.striker.Rc"
  "Channel\"\036\n\034SubscribeMagnitometerRequest\""
  "N\n\024MagnitometerResponse\0226\n\014magnitometer\030"
  "\001 \001(\0132 .mavsdk.rpc.striker.Magnitometer\""
  "!\n\037SubscribeBatteryVoltagesRequest\"X\n\027Ba"
  "tteryVoltagesResponse\022=\n\020battery_voltage"
  "s\030\001 \001(\0132#.mavsdk.rpc.striker.BatteryVolt"
  "ages\"\204\001\n\tHeartbeat\022\023\n\013custom_mode\030\001 \001(\r\022"
  "\014\n\004type\030\002 \001(\r\022\021\n\tautopilot\030\003 \001(\r\022\021\n\tbase"
  "_mode\030\004 \001(\r\022\025\n\rsystem_status\030\005 \001(\r\022\027\n\017ma"
  "vlink_version\030\006 \001(\r\"\376\003\n\tSysStatus\022\'\n\037onb"
  "oard_control_sensors_present\030\001 \001(\r\022\'\n\037on"
  "board_control_sensors_enabled\030\002 \001(\r\022&\n\036o"
  "nboard_control_sensors_health\030\003 \001(\r\022\014\n\004l"
  "oad\030\004 \001(\r\022\027\n\017voltage_battery\030\005 \001(\r\022\027\n\017cu"
  "rrent_battery\030\006 \001(\005\022\026\n\016drop_rate_comm\030\007 "
  "\001(\r\022\023\n\013errors_comm\030\010 \001(\r\022\025\n\rerrors_count"
  "1\030\t \001(\r\022\025\n\rerrors_count2\030\n \001(\r\022\025\n\rerrors"
  "_count3\030\013 \001(\r\022\025\n\rerrors_count4\030\014 \001(\r\022\031\n\021"
  "battery_remaining\030\r \001(\005\0220\n(onboard_contr"
  "ol_sensors_present_extended\030\016 \001(\r\0220\n(onb"
  "oard_control_sensors_enabled_extended\030\017 "
  "\001(\r\022/\n\'onboard_control_sensors_health_ex"
  "tended\030\020 \001(\r\"\264\004\n\tRcChannel\022\033\n\014time_boot_"
  "ms\030\001 \001(\rB\005\202\265\030\0010\022\030\n\tchan1_raw\030\002 \001(\rB\005\202\265\030\001"
  "0\022\030\n\tchan2_raw\030\003 \001(\rB\005\202\265\030\0010\022\030\n\tchan3_raw"
  "\030\004 \001(\rB\005\202\265\030\0010\022\030\n\tchan4_raw\030\005 \001(\rB\005\202\265\030\0010\022"
  "\030\n\tchan5_raw\030\006 \001(\rB\005\202\265\030\0010\022\030\n\tchan6_raw\030\007"
  " \001(\rB\005\202\265\030\0010\022\030\n\tchan7_raw\030\010 \001(\rB\005\202\265\030\0010\022\030\n"
  "\tchan8_raw\030\t \001(\rB\005\202\265\030\0010\022\030\n\tchan9_raw\030\n \001"
  "(\rB\005\202\265\030\0010\022\031\n\nchan10_raw\030\013 \001(\rB\005\202\265\030\0010\022\031\n\n"
  "chan11_raw\030\014 \001(\rB\005\202\265\030\0010\022\031\n\nchan12_raw\030\r "
  "\001(\rB\005\202\265\030\0010\022\031\n\nchan13_raw\030\016 \001(\rB\005\202\265\030\0010\022\031\n"
  "\nchan14_raw\030\017 \001(\rB\005\202\265\030\0010\022\031\n\nchan15_raw\030\020"
  " \001(\rB\005\202\265\030\0010\022\031\n\nchan16_raw\030\021 \001(\rB\005\202\265\030\0010\022\031"
  "\n\nchan17_raw\030\022 \001(\rB\005\202\265\030\0010\022\031\n\nchan18_raw\030"
  "\023 \001(\rB\005\202\265\030\0010\022\030\n\tchancount\030\024 \001(\rB\005\202\265\030\0010\022\023"
  "\n\004rssi\030\025 \001(\rB\005\202\265\030\0010\"I\n\014Magnitometer\022\t\n\001x"
  "\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\030\n\020magnetic"
  "_heading\030\004 \001(\001\"9\n\017BatteryVoltages\022\020\n\010vol"
  "tages\030\001 \003(\r\022\024\n\014ext_voltages\030\002 \003(\r2\334\004\n\016St"
  "rikerService\022n\n\022SubscribeHeartbeat\022-.mav"
  "sdk.rpc.striker.SubscribeHeartbeatReques"
  "t\032%.mavsdk.rpc.striker.HeartbeatResponse"
  "\"\0000\001\022n\n\022SubscribeSysStatus\022-.mavsdk.rpc."
  "striker.SubscribeSysStatusRequest\032%.mavs"
  "dk.rpc.striker.SysStatusResponse\"\0000\001\022n\n\022"
  "SubscribeRcChannel\022-.mavsdk.rpc.striker."
  "SubscribeRcChannelRequest\032%.mavsdk.rpc.s"
  "triker.RcChannelResponse\"\0000\001\022w\n\025Subscrib"
  "eMagnitometer\0220.mavsdk.rpc.striker.Subsc"
  "ribeMagnitometerRequest\032(.mavsdk.rpc.str"
  "iker.MagnitometerResponse\"\0000\001\022\200\001\n\030Subscr"
  "ibeBatteryVoltages\0223.mavsdk.rpc.striker."
  "SubscribeBatteryVoltagesRequest\032+.mavsdk"
  ".rpc.striker.BatteryVoltagesResponse\"\0000\001"
  "B!\n\021io.mavsdk.strikerB\014StrikerProtob\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_striker_2fstriker_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_striker_2fstriker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_striker_2fstriker_2eproto = {
    false, false, 2603, descriptor_table_protodef_striker_2fstriker_2eproto,
    "striker/striker.proto",
    &descriptor_table_striker_2fstriker_2eproto_once, descriptor_table_striker_2fstriker_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_striker_2fstriker_2eproto::offsets,
    file_level_metadata_striker_2fstriker_2eproto, file_level_enum_descriptors_striker_2fstriker_2eproto,
    file_level_service_descriptors_striker_2fstriker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_striker_2fstriker_2eproto_getter() {
  return &descriptor_table_striker_2fstriker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_striker_2fstriker_2eproto(&descriptor_table_striker_2fstriker_2eproto);
namespace mavsdk {
namespace rpc {
namespace striker {

// ===================================================================

class SubscribeHeartbeatRequest::_Internal {
 public:
};

SubscribeHeartbeatRequest::SubscribeHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SubscribeHeartbeatRequest)
}
SubscribeHeartbeatRequest::SubscribeHeartbeatRequest(const SubscribeHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeHeartbeatRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SubscribeHeartbeatRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeHeartbeatRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[0]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
  static const ::mavsdk::rpc::striker::Heartbeat& heartbeat(const HeartbeatResponse* msg);
};

const ::mavsdk::rpc::striker::Heartbeat&
HeartbeatResponse::_Internal::heartbeat(const HeartbeatResponse* msg) {
  return *msg->_impl_.heartbeat_;
}
HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.heartbeat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heartbeat()) {
    _this->_impl_.heartbeat_ = new ::mavsdk::rpc::striker::Heartbeat(*from._impl_.heartbeat_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.heartbeat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.heartbeat_;
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.heartbeat_ != nullptr) {
    delete _impl_.heartbeat_;
  }
  _impl_.heartbeat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.striker.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.Heartbeat heartbeat = 1;
  if (this->_internal_has_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.Heartbeat heartbeat = 1;
  if (this->_internal_has_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.heartbeat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_heartbeat()) {
    _this->_internal_mutable_heartbeat()->::mavsdk::rpc::striker::Heartbeat::MergeFrom(
        from._internal_heartbeat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.heartbeat_, other->_impl_.heartbeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[1]);
}

// ===================================================================

class SubscribeSysStatusRequest::_Internal {
 public:
};

SubscribeSysStatusRequest::SubscribeSysStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SubscribeSysStatusRequest)
}
SubscribeSysStatusRequest::SubscribeSysStatusRequest(const SubscribeSysStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeSysStatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SubscribeSysStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeSysStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeSysStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeSysStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[2]);
}

// ===================================================================

class SysStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::striker::SysStatus& sys_status(const SysStatusResponse* msg);
};

const ::mavsdk::rpc::striker::SysStatus&
SysStatusResponse::_Internal::sys_status(const SysStatusResponse* msg) {
  return *msg->_impl_.sys_status_;
}
SysStatusResponse::SysStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SysStatusResponse)
}
SysStatusResponse::SysStatusResponse(const SysStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sys_status()) {
    _this->_impl_.sys_status_ = new ::mavsdk::rpc::striker::SysStatus(*from._impl_.sys_status_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SysStatusResponse)
}

inline void SysStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SysStatusResponse::~SysStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.SysStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sys_status_;
}

void SysStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.SysStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.sys_status_ != nullptr) {
    delete _impl_.sys_status_;
  }
  _impl_.sys_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.striker.SysStatus sys_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.SysStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.SysStatus sys_status = 1;
  if (this->_internal_has_sys_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sys_status(this),
        _Internal::sys_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.SysStatusResponse)
  return target;
}

size_t SysStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.SysStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.SysStatus sys_status = 1;
  if (this->_internal_has_sys_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sys_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStatusResponse::GetClassData() const { return &_class_data_; }


void SysStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStatusResponse*>(&to_msg);
  auto& from = static_cast<const SysStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.SysStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sys_status()) {
    _this->_internal_mutable_sys_status()->::mavsdk::rpc::striker::SysStatus::MergeFrom(
        from._internal_sys_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStatusResponse::CopyFrom(const SysStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.SysStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStatusResponse::IsInitialized() const {
  return true;
}

void SysStatusResponse::InternalSwap(SysStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sys_status_, other->_impl_.sys_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[3]);
}

// ===================================================================

class SubscribeRcChannelRequest::_Internal {
 public:
};

SubscribeRcChannelRequest::SubscribeRcChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SubscribeRcChannelRequest)
}
SubscribeRcChannelRequest::SubscribeRcChannelRequest(const SubscribeRcChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeRcChannelRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SubscribeRcChannelRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRcChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRcChannelRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRcChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[4]);
}

// ===================================================================

class RcChannelResponse::_Internal {
 public:
  static const ::mavsdk::rpc::striker::RcChannel& rc_channel(const RcChannelResponse* msg);
};

const ::mavsdk::rpc::striker::RcChannel&
RcChannelResponse::_Internal::rc_channel(const RcChannelResponse* msg) {
  return *msg->_impl_.rc_channel_;
}
RcChannelResponse::RcChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.RcChannelResponse)
}
RcChannelResponse::RcChannelResponse(const RcChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rc_channel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rc_channel()) {
    _this->_impl_.rc_channel_ = new ::mavsdk::rpc::striker::RcChannel(*from._impl_.rc_channel_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.RcChannelResponse)
}

inline void RcChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rc_channel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RcChannelResponse::~RcChannelResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.RcChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rc_channel_;
}

void RcChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.RcChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rc_channel_ != nullptr) {
    delete _impl_.rc_channel_;
  }
  _impl_.rc_channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.striker.RcChannel rc_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rc_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.RcChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.RcChannel rc_channel = 1;
  if (this->_internal_has_rc_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rc_channel(this),
        _Internal::rc_channel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.RcChannelResponse)
  return target;
}

size_t RcChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.RcChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.RcChannel rc_channel = 1;
  if (this->_internal_has_rc_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rc_channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcChannelResponse::GetClassData() const { return &_class_data_; }


void RcChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcChannelResponse*>(&to_msg);
  auto& from = static_cast<const RcChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.RcChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rc_channel()) {
    _this->_internal_mutable_rc_channel()->::mavsdk::rpc::striker::RcChannel::MergeFrom(
        from._internal_rc_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcChannelResponse::CopyFrom(const RcChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.RcChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcChannelResponse::IsInitialized() const {
  return true;
}

void RcChannelResponse::InternalSwap(RcChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rc_channel_, other->_impl_.rc_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RcChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[5]);
}

// ===================================================================

class SubscribeMagnitometerRequest::_Internal {
 public:
};

SubscribeMagnitometerRequest::SubscribeMagnitometerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SubscribeMagnitometerRequest)
}
SubscribeMagnitometerRequest::SubscribeMagnitometerRequest(const SubscribeMagnitometerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeMagnitometerRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SubscribeMagnitometerRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeMagnitometerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeMagnitometerRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMagnitometerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[6]);
}

// ===================================================================

class MagnitometerResponse::_Internal {
 public:
  static const ::mavsdk::rpc::striker::Magnitometer& magnitometer(const MagnitometerResponse* msg);
};

const ::mavsdk::rpc::striker::Magnitometer&
MagnitometerResponse::_Internal::magnitometer(const MagnitometerResponse* msg) {
  return *msg->_impl_.magnitometer_;
}
MagnitometerResponse::MagnitometerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.MagnitometerResponse)
}
MagnitometerResponse::MagnitometerResponse(const MagnitometerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MagnitometerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.magnitometer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_magnitometer()) {
    _this->_impl_.magnitometer_ = new ::mavsdk::rpc::striker::Magnitometer(*from._impl_.magnitometer_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.MagnitometerResponse)
}

inline void MagnitometerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.magnitometer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MagnitometerResponse::~MagnitometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.MagnitometerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MagnitometerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.magnitometer_;
}

void MagnitometerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MagnitometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.MagnitometerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.magnitometer_ != nullptr) {
    delete _impl_.magnitometer_;
  }
  _impl_.magnitometer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagnitometerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.striker.Magnitometer magnitometer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnitometer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MagnitometerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.MagnitometerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.Magnitometer magnitometer = 1;
  if (this->_internal_has_magnitometer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::magnitometer(this),
        _Internal::magnitometer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.MagnitometerResponse)
  return target;
}

size_t MagnitometerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.MagnitometerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.Magnitometer magnitometer = 1;
  if (this->_internal_has_magnitometer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.magnitometer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MagnitometerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MagnitometerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MagnitometerResponse::GetClassData() const { return &_class_data_; }


void MagnitometerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MagnitometerResponse*>(&to_msg);
  auto& from = static_cast<const MagnitometerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.MagnitometerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_magnitometer()) {
    _this->_internal_mutable_magnitometer()->::mavsdk::rpc::striker::Magnitometer::MergeFrom(
        from._internal_magnitometer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MagnitometerResponse::CopyFrom(const MagnitometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.MagnitometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagnitometerResponse::IsInitialized() const {
  return true;
}

void MagnitometerResponse::InternalSwap(MagnitometerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.magnitometer_, other->_impl_.magnitometer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MagnitometerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[7]);
}

// ===================================================================

class SubscribeBatteryVoltagesRequest::_Internal {
 public:
};

SubscribeBatteryVoltagesRequest::SubscribeBatteryVoltagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SubscribeBatteryVoltagesRequest)
}
SubscribeBatteryVoltagesRequest::SubscribeBatteryVoltagesRequest(const SubscribeBatteryVoltagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeBatteryVoltagesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SubscribeBatteryVoltagesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeBatteryVoltagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeBatteryVoltagesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBatteryVoltagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[8]);
}

// ===================================================================

class BatteryVoltagesResponse::_Internal {
 public:
  static const ::mavsdk::rpc::striker::BatteryVoltages& battery_voltages(const BatteryVoltagesResponse* msg);
};

const ::mavsdk::rpc::striker::BatteryVoltages&
BatteryVoltagesResponse::_Internal::battery_voltages(const BatteryVoltagesResponse* msg) {
  return *msg->_impl_.battery_voltages_;
}
BatteryVoltagesResponse::BatteryVoltagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.BatteryVoltagesResponse)
}
BatteryVoltagesResponse::BatteryVoltagesResponse(const BatteryVoltagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatteryVoltagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.battery_voltages_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battery_voltages()) {
    _this->_impl_.battery_voltages_ = new ::mavsdk::rpc::striker::BatteryVoltages(*from._impl_.battery_voltages_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.BatteryVoltagesResponse)
}

inline void BatteryVoltagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.battery_voltages_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatteryVoltagesResponse::~BatteryVoltagesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.BatteryVoltagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryVoltagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.battery_voltages_;
}

void BatteryVoltagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryVoltagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.BatteryVoltagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.battery_voltages_ != nullptr) {
    delete _impl_.battery_voltages_;
  }
  _impl_.battery_voltages_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryVoltagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.striker.BatteryVoltages battery_voltages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_voltages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryVoltagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.BatteryVoltagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.BatteryVoltages battery_voltages = 1;
  if (this->_internal_has_battery_voltages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::battery_voltages(this),
        _Internal::battery_voltages(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.BatteryVoltagesResponse)
  return target;
}

size_t BatteryVoltagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.BatteryVoltagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.striker.BatteryVoltages battery_voltages = 1;
  if (this->_internal_has_battery_voltages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.battery_voltages_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryVoltagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatteryVoltagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryVoltagesResponse::GetClassData() const { return &_class_data_; }


void BatteryVoltagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatteryVoltagesResponse*>(&to_msg);
  auto& from = static_cast<const BatteryVoltagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.BatteryVoltagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battery_voltages()) {
    _this->_internal_mutable_battery_voltages()->::mavsdk::rpc::striker::BatteryVoltages::MergeFrom(
        from._internal_battery_voltages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryVoltagesResponse::CopyFrom(const BatteryVoltagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.BatteryVoltagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltagesResponse::IsInitialized() const {
  return true;
}

void BatteryVoltagesResponse::InternalSwap(BatteryVoltagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.battery_voltages_, other->_impl_.battery_voltages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryVoltagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[9]);
}

// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_mode_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.autopilot_){}
    , decltype(_impl_.base_mode_){}
    , decltype(_impl_.system_status_){}
    , decltype(_impl_.mavlink_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.custom_mode_, &from._impl_.custom_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mavlink_version_) -
    reinterpret_cast<char*>(&_impl_.custom_mode_)) + sizeof(_impl_.mavlink_version_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_mode_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.autopilot_){0u}
    , decltype(_impl_.base_mode_){0u}
    , decltype(_impl_.system_status_){0u}
    , decltype(_impl_.mavlink_version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.custom_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mavlink_version_) -
      reinterpret_cast<char*>(&_impl_.custom_mode_)) + sizeof(_impl_.mavlink_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 custom_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.custom_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 autopilot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.autopilot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 base_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.base_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 system_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.system_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mavlink_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mavlink_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 custom_mode = 1;
  if (this->_internal_custom_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_custom_mode(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 autopilot = 3;
  if (this->_internal_autopilot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_autopilot(), target);
  }

  // uint32 base_mode = 4;
  if (this->_internal_base_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_base_mode(), target);
  }

  // uint32 system_status = 5;
  if (this->_internal_system_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_system_status(), target);
  }

  // uint32 mavlink_version = 6;
  if (this->_internal_mavlink_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mavlink_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 custom_mode = 1;
  if (this->_internal_custom_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_mode());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 autopilot = 3;
  if (this->_internal_autopilot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autopilot());
  }

  // uint32 base_mode = 4;
  if (this->_internal_base_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_mode());
  }

  // uint32 system_status = 5;
  if (this->_internal_system_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_system_status());
  }

  // uint32 mavlink_version = 6;
  if (this->_internal_mavlink_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mavlink_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_custom_mode() != 0) {
    _this->_internal_set_custom_mode(from._internal_custom_mode());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_autopilot() != 0) {
    _this->_internal_set_autopilot(from._internal_autopilot());
  }
  if (from._internal_base_mode() != 0) {
    _this->_internal_set_base_mode(from._internal_base_mode());
  }
  if (from._internal_system_status() != 0) {
    _this->_internal_set_system_status(from._internal_system_status());
  }
  if (from._internal_mavlink_version() != 0) {
    _this->_internal_set_mavlink_version(from._internal_mavlink_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.mavlink_version_)
      + sizeof(Heartbeat::_impl_.mavlink_version_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.custom_mode_)>(
          reinterpret_cast<char*>(&_impl_.custom_mode_),
          reinterpret_cast<char*>(&other->_impl_.custom_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[10]);
}

// ===================================================================

class SysStatus::_Internal {
 public:
};

SysStatus::SysStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.SysStatus)
}
SysStatus::SysStatus(const SysStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.onboard_control_sensors_present_){}
    , decltype(_impl_.onboard_control_sensors_enabled_){}
    , decltype(_impl_.onboard_control_sensors_health_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.voltage_battery_){}
    , decltype(_impl_.current_battery_){}
    , decltype(_impl_.drop_rate_comm_){}
    , decltype(_impl_.errors_comm_){}
    , decltype(_impl_.errors_count1_){}
    , decltype(_impl_.errors_count2_){}
    , decltype(_impl_.errors_count3_){}
    , decltype(_impl_.errors_count4_){}
    , decltype(_impl_.battery_remaining_){}
    , decltype(_impl_.onboard_control_sensors_present_extended_){}
    , decltype(_impl_.onboard_control_sensors_enabled_extended_){}
    , decltype(_impl_.onboard_control_sensors_health_extended_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.onboard_control_sensors_present_, &from._impl_.onboard_control_sensors_present_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.onboard_control_sensors_health_extended_) -
    reinterpret_cast<char*>(&_impl_.onboard_control_sensors_present_)) + sizeof(_impl_.onboard_control_sensors_health_extended_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.SysStatus)
}

inline void SysStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.onboard_control_sensors_present_){0u}
    , decltype(_impl_.onboard_control_sensors_enabled_){0u}
    , decltype(_impl_.onboard_control_sensors_health_){0u}
    , decltype(_impl_.load_){0u}
    , decltype(_impl_.voltage_battery_){0u}
    , decltype(_impl_.current_battery_){0}
    , decltype(_impl_.drop_rate_comm_){0u}
    , decltype(_impl_.errors_comm_){0u}
    , decltype(_impl_.errors_count1_){0u}
    , decltype(_impl_.errors_count2_){0u}
    , decltype(_impl_.errors_count3_){0u}
    , decltype(_impl_.errors_count4_){0u}
    , decltype(_impl_.battery_remaining_){0}
    , decltype(_impl_.onboard_control_sensors_present_extended_){0u}
    , decltype(_impl_.onboard_control_sensors_enabled_extended_){0u}
    , decltype(_impl_.onboard_control_sensors_health_extended_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SysStatus::~SysStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.SysStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.SysStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.onboard_control_sensors_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.onboard_control_sensors_health_extended_) -
      reinterpret_cast<char*>(&_impl_.onboard_control_sensors_present_)) + sizeof(_impl_.onboard_control_sensors_health_extended_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 onboard_control_sensors_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.onboard_control_sensors_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onboard_control_sensors_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.onboard_control_sensors_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onboard_control_sensors_health = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.onboard_control_sensors_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 load = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_battery = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.voltage_battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_battery = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.current_battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drop_rate_comm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.drop_rate_comm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors_comm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.errors_comm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors_count1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.errors_count1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors_count2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.errors_count2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors_count3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.errors_count3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors_count4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.errors_count4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 battery_remaining = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.battery_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onboard_control_sensors_present_extended = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.onboard_control_sensors_present_extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onboard_control_sensors_enabled_extended = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.onboard_control_sensors_enabled_extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onboard_control_sensors_health_extended = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.onboard_control_sensors_health_extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.SysStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 onboard_control_sensors_present = 1;
  if (this->_internal_onboard_control_sensors_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_onboard_control_sensors_present(), target);
  }

  // uint32 onboard_control_sensors_enabled = 2;
  if (this->_internal_onboard_control_sensors_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_onboard_control_sensors_enabled(), target);
  }

  // uint32 onboard_control_sensors_health = 3;
  if (this->_internal_onboard_control_sensors_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_onboard_control_sensors_health(), target);
  }

  // uint32 load = 4;
  if (this->_internal_load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_load(), target);
  }

  // uint32 voltage_battery = 5;
  if (this->_internal_voltage_battery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voltage_battery(), target);
  }

  // int32 current_battery = 6;
  if (this->_internal_current_battery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_current_battery(), target);
  }

  // uint32 drop_rate_comm = 7;
  if (this->_internal_drop_rate_comm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_drop_rate_comm(), target);
  }

  // uint32 errors_comm = 8;
  if (this->_internal_errors_comm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_errors_comm(), target);
  }

  // uint32 errors_count1 = 9;
  if (this->_internal_errors_count1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_errors_count1(), target);
  }

  // uint32 errors_count2 = 10;
  if (this->_internal_errors_count2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_errors_count2(), target);
  }

  // uint32 errors_count3 = 11;
  if (this->_internal_errors_count3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_errors_count3(), target);
  }

  // uint32 errors_count4 = 12;
  if (this->_internal_errors_count4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_errors_count4(), target);
  }

  // int32 battery_remaining = 13;
  if (this->_internal_battery_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_battery_remaining(), target);
  }

  // uint32 onboard_control_sensors_present_extended = 14;
  if (this->_internal_onboard_control_sensors_present_extended() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_onboard_control_sensors_present_extended(), target);
  }

  // uint32 onboard_control_sensors_enabled_extended = 15;
  if (this->_internal_onboard_control_sensors_enabled_extended() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_onboard_control_sensors_enabled_extended(), target);
  }

  // uint32 onboard_control_sensors_health_extended = 16;
  if (this->_internal_onboard_control_sensors_health_extended() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_onboard_control_sensors_health_extended(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.SysStatus)
  return target;
}

size_t SysStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.SysStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 onboard_control_sensors_present = 1;
  if (this->_internal_onboard_control_sensors_present() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onboard_control_sensors_present());
  }

  // uint32 onboard_control_sensors_enabled = 2;
  if (this->_internal_onboard_control_sensors_enabled() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onboard_control_sensors_enabled());
  }

  // uint32 onboard_control_sensors_health = 3;
  if (this->_internal_onboard_control_sensors_health() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onboard_control_sensors_health());
  }

  // uint32 load = 4;
  if (this->_internal_load() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_load());
  }

  // uint32 voltage_battery = 5;
  if (this->_internal_voltage_battery() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_battery());
  }

  // int32 current_battery = 6;
  if (this->_internal_current_battery() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_battery());
  }

  // uint32 drop_rate_comm = 7;
  if (this->_internal_drop_rate_comm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drop_rate_comm());
  }

  // uint32 errors_comm = 8;
  if (this->_internal_errors_comm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors_comm());
  }

  // uint32 errors_count1 = 9;
  if (this->_internal_errors_count1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors_count1());
  }

  // uint32 errors_count2 = 10;
  if (this->_internal_errors_count2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors_count2());
  }

  // uint32 errors_count3 = 11;
  if (this->_internal_errors_count3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors_count3());
  }

  // uint32 errors_count4 = 12;
  if (this->_internal_errors_count4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors_count4());
  }

  // int32 battery_remaining = 13;
  if (this->_internal_battery_remaining() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_battery_remaining());
  }

  // uint32 onboard_control_sensors_present_extended = 14;
  if (this->_internal_onboard_control_sensors_present_extended() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onboard_control_sensors_present_extended());
  }

  // uint32 onboard_control_sensors_enabled_extended = 15;
  if (this->_internal_onboard_control_sensors_enabled_extended() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onboard_control_sensors_enabled_extended());
  }

  // uint32 onboard_control_sensors_health_extended = 16;
  if (this->_internal_onboard_control_sensors_health_extended() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_onboard_control_sensors_health_extended());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStatus::GetClassData() const { return &_class_data_; }


void SysStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStatus*>(&to_msg);
  auto& from = static_cast<const SysStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.SysStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_onboard_control_sensors_present() != 0) {
    _this->_internal_set_onboard_control_sensors_present(from._internal_onboard_control_sensors_present());
  }
  if (from._internal_onboard_control_sensors_enabled() != 0) {
    _this->_internal_set_onboard_control_sensors_enabled(from._internal_onboard_control_sensors_enabled());
  }
  if (from._internal_onboard_control_sensors_health() != 0) {
    _this->_internal_set_onboard_control_sensors_health(from._internal_onboard_control_sensors_health());
  }
  if (from._internal_load() != 0) {
    _this->_internal_set_load(from._internal_load());
  }
  if (from._internal_voltage_battery() != 0) {
    _this->_internal_set_voltage_battery(from._internal_voltage_battery());
  }
  if (from._internal_current_battery() != 0) {
    _this->_internal_set_current_battery(from._internal_current_battery());
  }
  if (from._internal_drop_rate_comm() != 0) {
    _this->_internal_set_drop_rate_comm(from._internal_drop_rate_comm());
  }
  if (from._internal_errors_comm() != 0) {
    _this->_internal_set_errors_comm(from._internal_errors_comm());
  }
  if (from._internal_errors_count1() != 0) {
    _this->_internal_set_errors_count1(from._internal_errors_count1());
  }
  if (from._internal_errors_count2() != 0) {
    _this->_internal_set_errors_count2(from._internal_errors_count2());
  }
  if (from._internal_errors_count3() != 0) {
    _this->_internal_set_errors_count3(from._internal_errors_count3());
  }
  if (from._internal_errors_count4() != 0) {
    _this->_internal_set_errors_count4(from._internal_errors_count4());
  }
  if (from._internal_battery_remaining() != 0) {
    _this->_internal_set_battery_remaining(from._internal_battery_remaining());
  }
  if (from._internal_onboard_control_sensors_present_extended() != 0) {
    _this->_internal_set_onboard_control_sensors_present_extended(from._internal_onboard_control_sensors_present_extended());
  }
  if (from._internal_onboard_control_sensors_enabled_extended() != 0) {
    _this->_internal_set_onboard_control_sensors_enabled_extended(from._internal_onboard_control_sensors_enabled_extended());
  }
  if (from._internal_onboard_control_sensors_health_extended() != 0) {
    _this->_internal_set_onboard_control_sensors_health_extended(from._internal_onboard_control_sensors_health_extended());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStatus::CopyFrom(const SysStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.SysStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStatus::IsInitialized() const {
  return true;
}

void SysStatus::InternalSwap(SysStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStatus, _impl_.onboard_control_sensors_health_extended_)
      + sizeof(SysStatus::_impl_.onboard_control_sensors_health_extended_)
      - PROTOBUF_FIELD_OFFSET(SysStatus, _impl_.onboard_control_sensors_present_)>(
          reinterpret_cast<char*>(&_impl_.onboard_control_sensors_present_),
          reinterpret_cast<char*>(&other->_impl_.onboard_control_sensors_present_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[11]);
}

// ===================================================================

class RcChannel::_Internal {
 public:
};

RcChannel::RcChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.RcChannel)
}
RcChannel::RcChannel(const RcChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_boot_ms_){}
    , decltype(_impl_.chan1_raw_){}
    , decltype(_impl_.chan2_raw_){}
    , decltype(_impl_.chan3_raw_){}
    , decltype(_impl_.chan4_raw_){}
    , decltype(_impl_.chan5_raw_){}
    , decltype(_impl_.chan6_raw_){}
    , decltype(_impl_.chan7_raw_){}
    , decltype(_impl_.chan8_raw_){}
    , decltype(_impl_.chan9_raw_){}
    , decltype(_impl_.chan10_raw_){}
    , decltype(_impl_.chan11_raw_){}
    , decltype(_impl_.chan12_raw_){}
    , decltype(_impl_.chan13_raw_){}
    , decltype(_impl_.chan14_raw_){}
    , decltype(_impl_.chan15_raw_){}
    , decltype(_impl_.chan16_raw_){}
    , decltype(_impl_.chan17_raw_){}
    , decltype(_impl_.chan18_raw_){}
    , decltype(_impl_.chancount_){}
    , decltype(_impl_.rssi_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_boot_ms_, &from._impl_.time_boot_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rssi_) -
    reinterpret_cast<char*>(&_impl_.time_boot_ms_)) + sizeof(_impl_.rssi_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.RcChannel)
}

inline void RcChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_boot_ms_){0u}
    , decltype(_impl_.chan1_raw_){0u}
    , decltype(_impl_.chan2_raw_){0u}
    , decltype(_impl_.chan3_raw_){0u}
    , decltype(_impl_.chan4_raw_){0u}
    , decltype(_impl_.chan5_raw_){0u}
    , decltype(_impl_.chan6_raw_){0u}
    , decltype(_impl_.chan7_raw_){0u}
    , decltype(_impl_.chan8_raw_){0u}
    , decltype(_impl_.chan9_raw_){0u}
    , decltype(_impl_.chan10_raw_){0u}
    , decltype(_impl_.chan11_raw_){0u}
    , decltype(_impl_.chan12_raw_){0u}
    , decltype(_impl_.chan13_raw_){0u}
    , decltype(_impl_.chan14_raw_){0u}
    , decltype(_impl_.chan15_raw_){0u}
    , decltype(_impl_.chan16_raw_){0u}
    , decltype(_impl_.chan17_raw_){0u}
    , decltype(_impl_.chan18_raw_){0u}
    , decltype(_impl_.chancount_){0u}
    , decltype(_impl_.rssi_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RcChannel::~RcChannel() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.RcChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RcChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.RcChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_boot_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rssi_) -
      reinterpret_cast<char*>(&_impl_.time_boot_ms_)) + sizeof(_impl_.rssi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time_boot_ms = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_boot_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan1_raw = 2 [(.mavsdk.options.default_value) = "0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chan1_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan2_raw = 3 [(.mavsdk.options.default_value) = "0"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chan2_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan3_raw = 4 [(.mavsdk.options.default_value) = "0"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chan3_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan4_raw = 5 [(.mavsdk.options.default_value) = "0"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chan4_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan5_raw = 6 [(.mavsdk.options.default_value) = "0"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.chan5_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan6_raw = 7 [(.mavsdk.options.default_value) = "0"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.chan6_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan7_raw = 8 [(.mavsdk.options.default_value) = "0"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.chan7_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan8_raw = 9 [(.mavsdk.options.default_value) = "0"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.chan8_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan9_raw = 10 [(.mavsdk.options.default_value) = "0"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.chan9_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan10_raw = 11 [(.mavsdk.options.default_value) = "0"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.chan10_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan11_raw = 12 [(.mavsdk.options.default_value) = "0"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.chan11_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan12_raw = 13 [(.mavsdk.options.default_value) = "0"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.chan12_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan13_raw = 14 [(.mavsdk.options.default_value) = "0"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.chan13_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan14_raw = 15 [(.mavsdk.options.default_value) = "0"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.chan14_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan15_raw = 16 [(.mavsdk.options.default_value) = "0"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.chan15_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan16_raw = 17 [(.mavsdk.options.default_value) = "0"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.chan16_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan17_raw = 18 [(.mavsdk.options.default_value) = "0"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.chan17_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chan18_raw = 19 [(.mavsdk.options.default_value) = "0"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.chan18_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chancount = 20 [(.mavsdk.options.default_value) = "0"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.chancount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rssi = 21 [(.mavsdk.options.default_value) = "0"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.RcChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time_boot_ms = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_time_boot_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_boot_ms(), target);
  }

  // uint32 chan1_raw = 2 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan1_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chan1_raw(), target);
  }

  // uint32 chan2_raw = 3 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan2_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chan2_raw(), target);
  }

  // uint32 chan3_raw = 4 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan3_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_chan3_raw(), target);
  }

  // uint32 chan4_raw = 5 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan4_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chan4_raw(), target);
  }

  // uint32 chan5_raw = 6 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan5_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chan5_raw(), target);
  }

  // uint32 chan6_raw = 7 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan6_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chan6_raw(), target);
  }

  // uint32 chan7_raw = 8 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan7_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_chan7_raw(), target);
  }

  // uint32 chan8_raw = 9 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan8_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_chan8_raw(), target);
  }

  // uint32 chan9_raw = 10 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan9_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chan9_raw(), target);
  }

  // uint32 chan10_raw = 11 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan10_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_chan10_raw(), target);
  }

  // uint32 chan11_raw = 12 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan11_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_chan11_raw(), target);
  }

  // uint32 chan12_raw = 13 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan12_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_chan12_raw(), target);
  }

  // uint32 chan13_raw = 14 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan13_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_chan13_raw(), target);
  }

  // uint32 chan14_raw = 15 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan14_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_chan14_raw(), target);
  }

  // uint32 chan15_raw = 16 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan15_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_chan15_raw(), target);
  }

  // uint32 chan16_raw = 17 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan16_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_chan16_raw(), target);
  }

  // uint32 chan17_raw = 18 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan17_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_chan17_raw(), target);
  }

  // uint32 chan18_raw = 19 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan18_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_chan18_raw(), target);
  }

  // uint32 chancount = 20 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chancount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_chancount(), target);
  }

  // uint32 rssi = 21 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_rssi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.RcChannel)
  return target;
}

size_t RcChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.RcChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time_boot_ms = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_time_boot_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_boot_ms());
  }

  // uint32 chan1_raw = 2 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan1_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan1_raw());
  }

  // uint32 chan2_raw = 3 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan2_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan2_raw());
  }

  // uint32 chan3_raw = 4 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan3_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan3_raw());
  }

  // uint32 chan4_raw = 5 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan4_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan4_raw());
  }

  // uint32 chan5_raw = 6 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan5_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan5_raw());
  }

  // uint32 chan6_raw = 7 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan6_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan6_raw());
  }

  // uint32 chan7_raw = 8 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan7_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan7_raw());
  }

  // uint32 chan8_raw = 9 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan8_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan8_raw());
  }

  // uint32 chan9_raw = 10 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan9_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan9_raw());
  }

  // uint32 chan10_raw = 11 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan10_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan10_raw());
  }

  // uint32 chan11_raw = 12 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan11_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan11_raw());
  }

  // uint32 chan12_raw = 13 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan12_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan12_raw());
  }

  // uint32 chan13_raw = 14 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan13_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan13_raw());
  }

  // uint32 chan14_raw = 15 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan14_raw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chan14_raw());
  }

  // uint32 chan15_raw = 16 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan15_raw() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chan15_raw());
  }

  // uint32 chan16_raw = 17 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan16_raw() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chan16_raw());
  }

  // uint32 chan17_raw = 18 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan17_raw() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chan17_raw());
  }

  // uint32 chan18_raw = 19 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chan18_raw() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chan18_raw());
  }

  // uint32 chancount = 20 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_chancount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chancount());
  }

  // uint32 rssi = 21 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_rssi() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rssi());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcChannel::GetClassData() const { return &_class_data_; }


void RcChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcChannel*>(&to_msg);
  auto& from = static_cast<const RcChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.RcChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_boot_ms() != 0) {
    _this->_internal_set_time_boot_ms(from._internal_time_boot_ms());
  }
  if (from._internal_chan1_raw() != 0) {
    _this->_internal_set_chan1_raw(from._internal_chan1_raw());
  }
  if (from._internal_chan2_raw() != 0) {
    _this->_internal_set_chan2_raw(from._internal_chan2_raw());
  }
  if (from._internal_chan3_raw() != 0) {
    _this->_internal_set_chan3_raw(from._internal_chan3_raw());
  }
  if (from._internal_chan4_raw() != 0) {
    _this->_internal_set_chan4_raw(from._internal_chan4_raw());
  }
  if (from._internal_chan5_raw() != 0) {
    _this->_internal_set_chan5_raw(from._internal_chan5_raw());
  }
  if (from._internal_chan6_raw() != 0) {
    _this->_internal_set_chan6_raw(from._internal_chan6_raw());
  }
  if (from._internal_chan7_raw() != 0) {
    _this->_internal_set_chan7_raw(from._internal_chan7_raw());
  }
  if (from._internal_chan8_raw() != 0) {
    _this->_internal_set_chan8_raw(from._internal_chan8_raw());
  }
  if (from._internal_chan9_raw() != 0) {
    _this->_internal_set_chan9_raw(from._internal_chan9_raw());
  }
  if (from._internal_chan10_raw() != 0) {
    _this->_internal_set_chan10_raw(from._internal_chan10_raw());
  }
  if (from._internal_chan11_raw() != 0) {
    _this->_internal_set_chan11_raw(from._internal_chan11_raw());
  }
  if (from._internal_chan12_raw() != 0) {
    _this->_internal_set_chan12_raw(from._internal_chan12_raw());
  }
  if (from._internal_chan13_raw() != 0) {
    _this->_internal_set_chan13_raw(from._internal_chan13_raw());
  }
  if (from._internal_chan14_raw() != 0) {
    _this->_internal_set_chan14_raw(from._internal_chan14_raw());
  }
  if (from._internal_chan15_raw() != 0) {
    _this->_internal_set_chan15_raw(from._internal_chan15_raw());
  }
  if (from._internal_chan16_raw() != 0) {
    _this->_internal_set_chan16_raw(from._internal_chan16_raw());
  }
  if (from._internal_chan17_raw() != 0) {
    _this->_internal_set_chan17_raw(from._internal_chan17_raw());
  }
  if (from._internal_chan18_raw() != 0) {
    _this->_internal_set_chan18_raw(from._internal_chan18_raw());
  }
  if (from._internal_chancount() != 0) {
    _this->_internal_set_chancount(from._internal_chancount());
  }
  if (from._internal_rssi() != 0) {
    _this->_internal_set_rssi(from._internal_rssi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcChannel::CopyFrom(const RcChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.RcChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcChannel::IsInitialized() const {
  return true;
}

void RcChannel::InternalSwap(RcChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcChannel, _impl_.rssi_)
      + sizeof(RcChannel::_impl_.rssi_)
      - PROTOBUF_FIELD_OFFSET(RcChannel, _impl_.time_boot_ms_)>(
          reinterpret_cast<char*>(&_impl_.time_boot_ms_),
          reinterpret_cast<char*>(&other->_impl_.time_boot_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[12]);
}

// ===================================================================

class Magnitometer::_Internal {
 public:
};

Magnitometer::Magnitometer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.Magnitometer)
}
Magnitometer::Magnitometer(const Magnitometer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Magnitometer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.magnetic_heading_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.magnetic_heading_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.magnetic_heading_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.Magnitometer)
}

inline void Magnitometer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.magnetic_heading_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Magnitometer::~Magnitometer() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.Magnitometer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Magnitometer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Magnitometer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Magnitometer::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.Magnitometer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.magnetic_heading_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.magnetic_heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Magnitometer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double magnetic_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.magnetic_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Magnitometer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.Magnitometer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double magnetic_heading = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_magnetic_heading = this->_internal_magnetic_heading();
  uint64_t raw_magnetic_heading;
  memcpy(&raw_magnetic_heading, &tmp_magnetic_heading, sizeof(tmp_magnetic_heading));
  if (raw_magnetic_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_magnetic_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.Magnitometer)
  return target;
}

size_t Magnitometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.Magnitometer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double magnetic_heading = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_magnetic_heading = this->_internal_magnetic_heading();
  uint64_t raw_magnetic_heading;
  memcpy(&raw_magnetic_heading, &tmp_magnetic_heading, sizeof(tmp_magnetic_heading));
  if (raw_magnetic_heading != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Magnitometer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Magnitometer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Magnitometer::GetClassData() const { return &_class_data_; }


void Magnitometer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Magnitometer*>(&to_msg);
  auto& from = static_cast<const Magnitometer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.Magnitometer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_magnetic_heading = from._internal_magnetic_heading();
  uint64_t raw_magnetic_heading;
  memcpy(&raw_magnetic_heading, &tmp_magnetic_heading, sizeof(tmp_magnetic_heading));
  if (raw_magnetic_heading != 0) {
    _this->_internal_set_magnetic_heading(from._internal_magnetic_heading());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Magnitometer::CopyFrom(const Magnitometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.Magnitometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Magnitometer::IsInitialized() const {
  return true;
}

void Magnitometer::InternalSwap(Magnitometer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Magnitometer, _impl_.magnetic_heading_)
      + sizeof(Magnitometer::_impl_.magnetic_heading_)
      - PROTOBUF_FIELD_OFFSET(Magnitometer, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Magnitometer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[13]);
}

// ===================================================================

class BatteryVoltages::_Internal {
 public:
};

BatteryVoltages::BatteryVoltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.striker.BatteryVoltages)
}
BatteryVoltages::BatteryVoltages(const BatteryVoltages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatteryVoltages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voltages_){from._impl_.voltages_}
    , /*decltype(_impl_._voltages_cached_byte_size_)*/{0}
    , decltype(_impl_.ext_voltages_){from._impl_.ext_voltages_}
    , /*decltype(_impl_._ext_voltages_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.striker.BatteryVoltages)
}

inline void BatteryVoltages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voltages_){arena}
    , /*decltype(_impl_._voltages_cached_byte_size_)*/{0}
    , decltype(_impl_.ext_voltages_){arena}
    , /*decltype(_impl_._ext_voltages_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatteryVoltages::~BatteryVoltages() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.striker.BatteryVoltages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryVoltages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voltages_.~RepeatedField();
  _impl_.ext_voltages_.~RepeatedField();
}

void BatteryVoltages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryVoltages::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.striker.BatteryVoltages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voltages_.Clear();
  _impl_.ext_voltages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryVoltages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 voltages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_voltages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_voltages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ext_voltages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ext_voltages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_ext_voltages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryVoltages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.striker.BatteryVoltages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 voltages = 1;
  {
    int byte_size = _impl_._voltages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_voltages(), byte_size, target);
    }
  }

  // repeated uint32 ext_voltages = 2;
  {
    int byte_size = _impl_._ext_voltages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_ext_voltages(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.striker.BatteryVoltages)
  return target;
}

size_t BatteryVoltages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.striker.BatteryVoltages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 voltages = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.voltages_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._voltages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ext_voltages = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ext_voltages_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ext_voltages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryVoltages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatteryVoltages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryVoltages::GetClassData() const { return &_class_data_; }


void BatteryVoltages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatteryVoltages*>(&to_msg);
  auto& from = static_cast<const BatteryVoltages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.striker.BatteryVoltages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.voltages_.MergeFrom(from._impl_.voltages_);
  _this->_impl_.ext_voltages_.MergeFrom(from._impl_.ext_voltages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryVoltages::CopyFrom(const BatteryVoltages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.striker.BatteryVoltages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltages::IsInitialized() const {
  return true;
}

void BatteryVoltages::InternalSwap(BatteryVoltages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.voltages_.InternalSwap(&other->_impl_.voltages_);
  _impl_.ext_voltages_.InternalSwap(&other->_impl_.ext_voltages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryVoltages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_striker_2fstriker_2eproto_getter, &descriptor_table_striker_2fstriker_2eproto_once,
      file_level_metadata_striker_2fstriker_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace striker
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SubscribeHeartbeatRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SubscribeHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SubscribeHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::HeartbeatResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SubscribeSysStatusRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SubscribeSysStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SubscribeSysStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SysStatusResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SysStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SysStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SubscribeRcChannelRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SubscribeRcChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SubscribeRcChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::RcChannelResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::RcChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::RcChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SubscribeMagnitometerRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SubscribeMagnitometerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SubscribeMagnitometerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::MagnitometerResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::MagnitometerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::MagnitometerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SubscribeBatteryVoltagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::BatteryVoltagesResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::BatteryVoltagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::BatteryVoltagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::Heartbeat*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::SysStatus*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::SysStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::SysStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::RcChannel*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::RcChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::RcChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::Magnitometer*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::Magnitometer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::Magnitometer >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::striker::BatteryVoltages*
Arena::CreateMaybeMessage< ::mavsdk::rpc::striker::BatteryVoltages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::striker::BatteryVoltages >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
