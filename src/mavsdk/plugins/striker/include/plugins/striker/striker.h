// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/striker/striker.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class StrikerImpl;

/**
 * @brief Allow users to get vehicle telemetry and state information
 */
class Striker : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto striker = Striker(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Striker(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto striker = Striker(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Striker(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Striker() override;

    /**
     * @brief Heartbeat type.
     */
    struct Heartbeat {
        uint32_t custom_mode{}; /**< @brief A bitfield for use for autopilot-specific flags */
        uint32_t type{}; /**< @brief Vehicle or component type. Use MAV_TYPE_* constants */
        uint32_t autopilot{}; /**< @brief Autopilot type/class. Use MAV_AUTOPILOT_* constants */
        uint32_t base_mode{}; /**< @brief System mode bitmap. Use MAV_MODE_FLAG_* constants */
        uint32_t system_status{}; /**< @brief System status flag. Use MAV_STATE_* constants */
        uint32_t mavlink_version{}; /**< @brief MAVLink version, set by protocol */
    };

    /**
     * @brief Equal operator to compare two `Striker::Heartbeat` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Striker::Heartbeat& lhs, const Striker::Heartbeat& rhs);

    /**
     * @brief Stream operator to print information about a `Striker::Heartbeat`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Striker::Heartbeat const& heartbeat);

    /**
     * @brief System status type.
     */
    struct SysStatus {
        uint32_t onboard_control_sensors_present{}; /**< @brief Bitmask of onboard controllers and
                                                       sensors present */
        uint32_t
            onboard_control_sensors_enabled{}; /**< @brief Bitmask of enabled controllers/sensors */
        uint32_t onboard_control_sensors_health{}; /**< @brief Bitmask of sensors with errors (0 =
                                                      error, 1 = healthy) */
        uint32_t load{}; /**< @brief [0-1000] Maximum loop load percentage (1000 = 100%) */
        uint32_t voltage_battery{}; /**< @brief [mV] Battery voltage, UINT16_MAX if not sent */
        int32_t current_battery{}; /**< @brief [cA] Battery current, -1 if not sent */
        uint32_t drop_rate_comm{}; /**< @brief [%] Communication drop rate */
        uint32_t errors_comm{}; /**< @brief Communication errors count */
        uint32_t errors_count1{}; /**< @brief Autopilot-specific errors */
        uint32_t errors_count2{}; /**< @brief Autopilot-specific errors */
        uint32_t errors_count3{}; /**< @brief Autopilot-specific errors */
        uint32_t errors_count4{}; /**< @brief Autopilot-specific errors */
        int32_t battery_remaining{}; /**< @brief [%] Battery energy remaining, -1 if not sent */
        uint32_t onboard_control_sensors_present_extended{}; /**< @brief Extended bitmask for
                                                                present sensors */
        uint32_t onboard_control_sensors_enabled_extended{}; /**< @brief Extended bitmask for
                                                                enabled sensors */
        uint32_t onboard_control_sensors_health_extended{}; /**< @brief Extended bitmask for sensor
                                                               health */
    };

    /**
     * @brief Equal operator to compare two `Striker::SysStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Striker::SysStatus& lhs, const Striker::SysStatus& rhs);

    /**
     * @brief Stream operator to print information about a `Striker::SysStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Striker::SysStatus const& sys_status);

    /**
     * @brief RC_Channel type.
     */
    struct RcChannel {
        uint32_t time_boot_ms{0}; /**< @brief */
        uint32_t chan1_raw{0}; /**< @brief */
        uint32_t chan2_raw{0}; /**< @brief */
        uint32_t chan3_raw{0}; /**< @brief */
        uint32_t chan4_raw{0}; /**< @brief */
        uint32_t chan5_raw{0}; /**< @brief */
        uint32_t chan6_raw{0}; /**< @brief */
        uint32_t chan7_raw{0}; /**< @brief */
        uint32_t chan8_raw{0}; /**< @brief */
        uint32_t chan9_raw{0}; /**< @brief */
        uint32_t chan10_raw{0}; /**< @brief */
        uint32_t chan11_raw{0}; /**< @brief */
        uint32_t chan12_raw{0}; /**< @brief */
        uint32_t chan13_raw{0}; /**< @brief */
        uint32_t chan14_raw{0}; /**< @brief */
        uint32_t chan15_raw{0}; /**< @brief */
        uint32_t chan16_raw{0}; /**< @brief */
        uint32_t chan17_raw{0}; /**< @brief */
        uint32_t chan18_raw{0}; /**< @brief */
        uint32_t chancount{0}; /**< @brief */
        uint32_t rssi{0}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `Striker::RcChannel` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Striker::RcChannel& lhs, const Striker::RcChannel& rhs);

    /**
     * @brief Stream operator to print information about a `Striker::RcChannel`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Striker::RcChannel const& rc_channel);

    /**
     * @brief
     */
    struct Magnitometer {
        double x{}; /**< @brief */
        double y{}; /**< @brief */
        double z{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `Striker::Magnitometer` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Striker::Magnitometer& lhs, const Striker::Magnitometer& rhs);

    /**
     * @brief Stream operator to print information about a `Striker::Magnitometer`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Striker::Magnitometer const& magnitometer);

    /**
     * @brief Callback type for subscribe_heartbeat.
     */
    using HeartbeatCallback = std::function<void(Heartbeat)>;

    /**
     * @brief Handle type for subscribe_heartbeat.
     */
    using HeartbeatHandle = Handle<Heartbeat>;

    /**
     * @brief Subscribe to 'Heartbeat' updates.
     */
    HeartbeatHandle subscribe_heartbeat(const HeartbeatCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_heartbeat
     */
    void unsubscribe_heartbeat(HeartbeatHandle handle);

    /**
     * @brief Poll for 'Heartbeat' (blocking).
     *
     * @return One Heartbeat update.
     */
    Heartbeat heartbeat() const;

    /**
     * @brief Callback type for subscribe_sys_status.
     */
    using SysStatusCallback = std::function<void(SysStatus)>;

    /**
     * @brief Handle type for subscribe_sys_status.
     */
    using SysStatusHandle = Handle<SysStatus>;

    /**
     * @brief Subscribe to 'Sys Status' updates.
     */
    SysStatusHandle subscribe_sys_status(const SysStatusCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_sys_status
     */
    void unsubscribe_sys_status(SysStatusHandle handle);

    /**
     * @brief Poll for 'SysStatus' (blocking).
     *
     * @return One SysStatus update.
     */
    SysStatus sys_status() const;

    /**
     * @brief Callback type for subscribe_rc_channel.
     */
    using RcChannelCallback = std::function<void(RcChannel)>;

    /**
     * @brief Handle type for subscribe_rc_channel.
     */
    using RcChannelHandle = Handle<RcChannel>;

    /**
     * @brief Subscribe to 'RC channel' updates.
     */
    RcChannelHandle subscribe_rc_channel(const RcChannelCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_rc_channel
     */
    void unsubscribe_rc_channel(RcChannelHandle handle);

    /**
     * @brief Poll for 'RcChannel' (blocking).
     *
     * @return One RcChannel update.
     */
    RcChannel rc_channel() const;

    /**
     * @brief Callback type for subscribe_magnitometer.
     */
    using MagnitometerCallback = std::function<void(Magnitometer)>;

    /**
     * @brief Handle type for subscribe_magnitometer.
     */
    using MagnitometerHandle = Handle<Magnitometer>;

    /**
     * @brief Subscribe to 'Magnitometer' updates.
     */
    MagnitometerHandle subscribe_magnitometer(const MagnitometerCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_magnitometer
     */
    void unsubscribe_magnitometer(MagnitometerHandle handle);

    /**
     * @brief Poll for 'Magnitometer' (blocking).
     *
     * @return One Magnitometer update.
     */
    Magnitometer magnitometer() const;

    /**
     * @brief Copy constructor.
     */
    Striker(const Striker& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Striker& operator=(const Striker&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<StrikerImpl> _impl;
};

} // namespace mavsdk